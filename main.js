const id = function(id) {
	return document.getElementById(id);
}





let categories_expense_titles = [];

const CATEGORY_EXPENSE_ICONS = [
	/* 1 */ 
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 64.718 294.71 C 21.635 305.658 1.317 354.368 12.825 404.515 C 22.187 445.309 50.427 466.598 70.822 476.317 C 105.585 492.068 161.955 489.324 199.072 474.932 C 237.565 460.328 260.896 423.962 265.897 395.598 C 271.77 332.371 242.875 295.329 191.188 291.704"></path>
		<path d="M 124.088 272.482 C 105.315 272.604 74.98 280.717 57.862 293.33 C 73.793 295.983 88.732 299.268 97.529 304.05 L 91.098 345.504 L 134.694 312.627 L 178.293 344.073 L 173.648 300.835 C 180.476 294.03 202.218 287.77 210.096 286.181 C 196.257 276.291 160.531 270.951 143.48 271.53"></path>
		<path d="M 128.814 291.082 C 128.34 276.409 118.336 245.987 114.006 238.551 L 122.188 228.789 C 134.815 239.51 142.577 266.425 147.461 290.367"></path>
		<path d="M 298.973 492.575 L 431.129 492.575 C 414.076 478.365 387.077 484.049 364.34 452.787 L 364.34 280.84 C 394.182 242.472 473.761 204.104 480.866 177.105 C 489.392 148.683 449.603 63.421 435.392 8 L 294.709 8 C 280.499 63.421 240.711 148.683 249.236 177.105 C 256.341 204.104 334.498 242.472 364.34 280.84 L 364.34 452.787 C 340.184 484.049 316.025 478.365 298.973 492.575 Z"></path>
		<path d="M 252 151.7 C 302.899 143.105 310.183 125.644 364.3 137 C 398.851 147.66 429.044 160.627 478 150.9"></path>
	</svg>`,
	/* 2 */ 
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
		<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
  	</svg>`,
	/* 3 */ 
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
		<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
  	</svg>`,
	/* 4 */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<g transform="matrix(1.309595, 0, 0, 1.309595, -77.39875, -74.201775)">
			<ellipse cx="165" cy="320" rx="27" ry="27"></ellipse>
			<ellipse cx="335" cy="320" rx="27" ry="27"></ellipse>
			<path d="M 140 240 C 129.842 217.608 130 167.4 140 145 C 191.9 130 308.1 130 360 145 C 370 167.4 370 217.6 360 240 C 308.1 255 191.9 255 140 240 Z"></path>
			<path d="M 170 378 C 170 378 176.26 404.212 168 412 C 157.571 421.833 135.447 421.814 125 412 C 113.316 401.023 122 364 122 364 C 122 364 102.37 351.934 98 342 C 84 277.9 84 197 98 132 C 104.639 115.356 118.536 100.075 135 93 C 205.4 70 294.6 70 365 93 C 381.464 100.075 395.361 115.356 402 132 C 416 197 416 277.9 402 342 C 397.63 351.934 378 364 378 364 C 378 364 386.684 401.023 375 412 C 365.039 421.358 344.343 420.933 334 412 C 325.331 404.512 329 378 329 378 L 170 378 Z"></path>
		</g>
  	</svg>`,
	/* 5 */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 129.692 368.239 C 129.692 368.239 130.58 392.173 122.4 398.621 C 102.361 414.423 64.8 415.707 45.841 398.621 C 31.319 385.534 39.765 340.29 39.765 340.29 C 39.765 340.29 23.086 297.797 25.182 275.883 C 27.582 250.784 30.043 231.039 55.563 206.615 C 55.563 206.615 24 196.191 25.182 183.526 C 26.446 169.997 48.158 163.606 61.64 165.297 C 69.867 166.329 80.457 181.572 80.457 181.572 C 80.457 181.572 100.126 119.315 126.045 104.536 C 197.867 83.876 301.525 83.876 373.953 104.536 C 400.605 119.221 422.717 181.713 422.717 181.713 C 422.717 181.713 430.917 166.597 438.361 165.297 C 451.744 162.96 473.554 169.997 474.818 183.526 C 476.001 196.191 444.438 206.615 444.438 206.615 C 469.957 231.039 472.417 250.784 474.818 275.883 C 476.913 297.797 460.237 340.29 460.237 340.29 C 460.237 340.29 468.682 385.534 454.158 398.621 C 435.201 415.707 397.641 414.423 377.6 398.621 C 369.421 392.173 370.307 368.239 370.307 368.239 L 129.692 368.239 Z"></path>
		<path d="M 95.665 196.892 C 102.715 173.032 117.199 136.374 131.557 121.548 C 198.435 100.89 301.565 100.89 368.444 121.548 C 382.802 136.374 395.958 173.196 404.335 196.892 C 349.658 199.324 150.34 199.324 95.665 196.892 Z"></path>
		<path d="M 75.007 297.757 C 63.588 286.831 61.265 259.998 73.792 250.362 C 88.374 249.148 131.029 257.654 144.275 271.021 C 148.925 278.247 147.069 290.852 140.629 296.542 C 124.223 305.049 90.804 300.188 75.007 297.757 Z"></path>
		<path d="M 362.688 253.849 C 351.271 264.772 348.947 291.608 361.473 301.241 C 376.056 302.459 418.712 293.95 431.956 280.582 C 436.606 273.357 434.751 260.753 428.311 255.064 C 411.905 246.557 378.485 251.418 362.688 253.849 Z" transform="matrix(-1, 0, 0, -1, 787.597576, 551.605187)"></path>
  	</svg>`,
	/* 6 */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
		<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
		<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
		<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
  	</svg>`,
	/* 7 */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<g transform="matrix(4.888889, 0, 0, 4.888889, -972.222229, -1600.681519)">
			<ellipse style="stroke-width: 3px;" cx="250" cy="406.597" rx="4.5" ry="4.5"></ellipse>
			<path style="stroke-width: 3px;" d="M 235 393 C 240 382 260 382 265 393"></path>
			<path style="stroke-width: 3px;" d="M 220 380 C 235 360 265 360 280 380"></path>
			<path style="stroke-width: 3px;" d="M 205 367 C 233 339 267 339 295 367"></path>
		</g>
  	</svg>`,
	/* 8 */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 297.836 208.448 C 307.451 206.429 317.326 205.429 327.355 205.429 C 387.96 205.429 442.917 241.944 469.121 319.271 C 479.86 365.025 473.419 435.906 469.121 471.778 C 402.318 476.074 252.391 476.074 185.591 471.778 C 179.299 439.327 175.797 382.002 182.199 337.525"></path>
		<polyline points="50.368 472.296 256.052 166.307 200.832 153.356 326.524 108.507 327.368 241.96 296.312 194.499 79.126 492.432" transform="matrix(-0.990268, -0.139173, 0.139173, -0.990268, 334.080756, 624.300215)"></polyline>
		<path d="M 268.011 183.165 C 249.091 166.628 237.14 142.317 237.14 115.215 C 237.14 65.391 277.531 25 327.355 25 C 377.179 25 417.57 65.391 417.57 115.215 C 417.57 165.039 377.179 205.43 327.355 205.43 C 319.044 205.43 310.996 204.306 303.354 202.202"></path>
  	</svg>`,
	/* 9 */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 316.69 325.708 C 325.475 371.442 319.422 437.548 315.321 471.778 C 248.518 476.074 98.591 476.074 31.791 471.778 C 24.596 434.667 21.049 365.025 31.791 319.271 C 57.993 241.944 112.95 205.429 173.555 205.429 C 222.476 205.429 267.717 229.222 297.125 279.068"></path>
		<ellipse cx="173.555" cy="115.215" rx="90.215" ry="90.215"></ellipse>
		<polyline points="204.857 411.774 410.541 105.785 355.321 92.834 481.013 47.985 481.857 181.438 450.801 133.977 233.615 431.91" transform="matrix(0.99863, -0.052336, 0.052336, 0.99863, -12.087331, 18.29877)"></polyline>
  	</svg>`,
	/* 10 */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<ellipse cx="153.928" cy="219.257" rx="38.428" ry="38.428"></ellipse>
		<ellipse cx="346.072" cy="142.4" rx="38.428" ry="38.428"></ellipse>
		<ellipse cx="269.215" cy="357.6" rx="38.428" ry="38.428"></ellipse>
  	</svg>`

];

let subcategories_titles = [];

const SUBCATEGORY_ICONS = [
  /* 1 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 70.895 294.024 C 27.812 304.972 7.494 353.682 19.002 403.829 C 28.364 444.623 56.604 465.912 76.999 475.631 C 111.762 491.382 168.132 488.638 205.249 474.246 C 243.742 459.642 267.073 423.276 272.074 394.912 C 277.947 331.685 249.052 294.643 197.365 291.018"></path>
			<path d="M 130.265 271.796 C 111.492 271.918 81.157 280.031 64.039 292.644 C 79.97 295.297 94.909 298.582 103.706 303.364 L 97.275 344.818 L 140.871 311.941 L 184.47 343.387 L 179.825 300.149 C 186.653 293.344 208.395 287.084 216.273 285.495 C 202.434 275.605 166.708 270.265 149.657 270.844"></path>
			<path d="M 134.991 290.396 C 134.517 275.723 124.513 245.301 120.183 237.865 L 128.365 228.103 C 140.992 238.824 148.754 265.739 153.638 289.681"></path>
			<path d="M 308.721 490.338 L 469.401 490.338 C 483.175 487.583 487.766 480.467 490.061 467.382 L 490.061 210.291 C 485.47 159.791 471.698 108.833 444.151 65.681 L 333.971 65.681 C 315.319 108.568 290.386 155.822 288.061 210.291 L 288.061 463.02 C 289.23 479.566 294.733 486.473 308.721 490.338 Z" bx:origin="0.472971 0.424729"></path>
			<path d="M 320.198 65.681 L 457.925 65.681 C 462.069 65.584 467.109 60.817 467.106 56.496 L 467.106 17.475 C 467.059 11.931 461.946 8.245 455.63 8.291 L 320.198 8.291 C 315.606 8.615 310.953 12.876 311.016 17.475 L 311.016 56.496 C 311.161 61.269 315.715 65.681 320.198 65.681 Z" bx:origin="0.444248 4.737284"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<line x1="20" y1="400.609" x2="479.126" y2="401.523"></line>
			<line x1="20.874" y1="363.588" x2="480" y2="363.588"></line>
			<path d="M 20.874 363.589 C 59.134 57.506 441.739 57.506 480 363.589"></path>
			<path d="M 211.302 135.23 C 218.955 86.256 280.172 86.256 287.824 135.23"></path>
		</svg>`,
		
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 70.895 294.024 C 27.812 304.972 7.494 353.682 19.002 403.829 C 28.364 444.623 56.604 465.912 76.999 475.631 C 111.762 491.382 168.132 488.638 205.249 474.246 C 243.742 459.642 267.073 423.276 272.074 394.912 C 277.947 331.685 249.052 294.643 197.365 291.018"></path>
			<path d="M 130.265 271.796 C 111.492 271.918 81.157 280.031 64.039 292.644 C 79.97 295.297 94.909 298.582 103.706 303.364 L 97.275 344.818 L 140.871 311.941 L 184.47 343.387 L 179.825 300.149 C 186.653 293.344 208.395 287.084 216.273 285.495 C 202.434 275.605 166.708 270.265 149.657 270.844"></path>
			<path d="M 134.991 290.396 C 134.517 275.723 124.513 245.301 120.183 237.865 L 128.365 228.103 C 140.992 238.824 148.754 265.739 153.638 289.681"></path>
			<path d="M 308.721 490.338 L 469.401 490.338 C 483.175 487.583 487.766 480.467 490.061 467.382 L 490.061 210.291 C 485.47 159.791 471.698 108.833 444.151 65.681 L 333.971 65.681 C 315.319 108.568 290.386 155.822 288.061 210.291 L 288.061 463.02 C 289.23 479.566 294.733 486.473 308.721 490.338 Z" bx:origin="0.472971 0.424729"></path>
			<path d="M 320.198 65.681 L 457.925 65.681 C 462.069 65.584 467.109 60.817 467.106 56.496 L 467.106 17.475 C 467.059 11.931 461.946 8.245 455.63 8.291 L 320.198 8.291 C 315.606 8.615 310.953 12.876 311.016 17.475 L 311.016 56.496 C 311.161 61.269 315.715 65.681 320.198 65.681 Z" bx:origin="0.444248 4.737284"></path>
		</svg>`
	],
  /* 2 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
	  	</svg>`
	],
  /* 3 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
			<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
			<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
			<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
			<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
			<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
			<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
	  	</svg>`
	],
  /* 4 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(1.309595, 0, 0, 1.309595, -77.39875, -74.201775)">
				<ellipse cx="165" cy="320" rx="27" ry="27"></ellipse>
				<ellipse cx="335" cy="320" rx="27" ry="27"></ellipse>
				<path d="M 140 240 C 129.842 217.608 130 167.4 140 145 C 191.9 130 308.1 130 360 145 C 370 167.4 370 217.6 360 240 C 308.1 255 191.9 255 140 240 Z"></path>
				<path d="M 170 378 C 170 378 176.26 404.212 168 412 C 157.571 421.833 135.447 421.814 125 412 C 113.316 401.023 122 364 122 364 C 122 364 102.37 351.934 98 342 C 84 277.9 84 197 98 132 C 104.639 115.356 118.536 100.075 135 93 C 205.4 70 294.6 70 365 93 C 381.464 100.075 395.361 115.356 402 132 C 416 197 416 277.9 402 342 C 397.63 351.934 378 364 378 364 C 378 364 386.684 401.023 375 412 C 365.039 421.358 344.343 420.933 334 412 C 325.331 404.512 329 378 329 378 L 170 378 Z"></path>
			</g>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(1.309595, 0, 0, 1.309595, -77.39875, -74.201775)">
				<ellipse cx="165" cy="320" rx="27" ry="27"></ellipse>
				<ellipse cx="335" cy="320" rx="27" ry="27"></ellipse>
				<path d="M 140 240 C 129.842 217.608 130 167.4 140 145 C 191.9 130 308.1 130 360 145 C 370 167.4 370 217.6 360 240 C 308.1 255 191.9 255 140 240 Z"></path>
				<path d="M 170 378 C 170 378 176.26 404.212 168 412 C 157.571 421.833 135.447 421.814 125 412 C 113.316 401.023 122 364 122 364 C 122 364 102.37 351.934 98 342 C 84 277.9 84 197 98 132 C 104.639 115.356 118.536 100.075 135 93 C 205.4 70 294.6 70 365 93 C 381.464 100.075 395.361 115.356 402 132 C 416 197 416 277.9 402 342 C 397.63 351.934 378 364 378 364 C 378 364 386.684 401.023 375 412 C 365.039 421.358 344.343 420.933 334 412 C 325.331 404.512 329 378 329 378 L 170 378 Z"></path>
			</g>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(1.309595, 0, 0, 1.309595, -77.39875, -74.201775)">
				<ellipse cx="165" cy="320" rx="27" ry="27"></ellipse>
				<ellipse cx="335" cy="320" rx="27" ry="27"></ellipse>
				<path d="M 140 240 C 129.842 217.608 130 167.4 140 145 C 191.9 130 308.1 130 360 145 C 370 167.4 370 217.6 360 240 C 308.1 255 191.9 255 140 240 Z"></path>
				<path d="M 170 378 C 170 378 176.26 404.212 168 412 C 157.571 421.833 135.447 421.814 125 412 C 113.316 401.023 122 364 122 364 C 122 364 102.37 351.934 98 342 C 84 277.9 84 197 98 132 C 104.639 115.356 118.536 100.075 135 93 C 205.4 70 294.6 70 365 93 C 381.464 100.075 395.361 115.356 402 132 C 416 197 416 277.9 402 342 C 397.63 351.934 378 364 378 364 C 378 364 386.684 401.023 375 412 C 365.039 421.358 344.343 420.933 334 412 C 325.331 404.512 329 378 329 378 L 170 378 Z"></path>
			</g>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(1.309595, 0, 0, 1.309595, -77.39875, -74.201775)">
				<ellipse cx="165" cy="320" rx="27" ry="27"></ellipse>
				<ellipse cx="335" cy="320" rx="27" ry="27"></ellipse>
				<path d="M 140 240 C 129.842 217.608 130 167.4 140 145 C 191.9 130 308.1 130 360 145 C 370 167.4 370 217.6 360 240 C 308.1 255 191.9 255 140 240 Z"></path>
				<path d="M 170 378 C 170 378 176.26 404.212 168 412 C 157.571 421.833 135.447 421.814 125 412 C 113.316 401.023 122 364 122 364 C 122 364 102.37 351.934 98 342 C 84 277.9 84 197 98 132 C 104.639 115.356 118.536 100.075 135 93 C 205.4 70 294.6 70 365 93 C 381.464 100.075 395.361 115.356 402 132 C 416 197 416 277.9 402 342 C 397.63 351.934 378 364 378 364 C 378 364 386.684 401.023 375 412 C 365.039 421.358 344.343 420.933 334 412 C 325.331 404.512 329 378 329 378 L 170 378 Z"></path>
			</g>
	  	</svg>`
	],
  /* 5 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 129.692 368.239 C 129.692 368.239 130.58 392.173 122.4 398.621 C 102.361 414.423 64.8 415.707 45.841 398.621 C 31.319 385.534 39.765 340.29 39.765 340.29 C 39.765 340.29 23.086 297.797 25.182 275.883 C 27.582 250.784 30.043 231.039 55.563 206.615 C 55.563 206.615 24 196.191 25.182 183.526 C 26.446 169.997 48.158 163.606 61.64 165.297 C 69.867 166.329 80.457 181.572 80.457 181.572 C 80.457 181.572 100.126 119.315 126.045 104.536 C 197.867 83.876 301.525 83.876 373.953 104.536 C 400.605 119.221 422.717 181.713 422.717 181.713 C 422.717 181.713 430.917 166.597 438.361 165.297 C 451.744 162.96 473.554 169.997 474.818 183.526 C 476.001 196.191 444.438 206.615 444.438 206.615 C 469.957 231.039 472.417 250.784 474.818 275.883 C 476.913 297.797 460.237 340.29 460.237 340.29 C 460.237 340.29 468.682 385.534 454.158 398.621 C 435.201 415.707 397.641 414.423 377.6 398.621 C 369.421 392.173 370.307 368.239 370.307 368.239 L 129.692 368.239 Z"></path>
			<path d="M 95.665 196.892 C 102.715 173.032 117.199 136.374 131.557 121.548 C 198.435 100.89 301.565 100.89 368.444 121.548 C 382.802 136.374 395.958 173.196 404.335 196.892 C 349.658 199.324 150.34 199.324 95.665 196.892 Z"></path>
			<path d="M 75.007 297.757 C 63.588 286.831 61.265 259.998 73.792 250.362 C 88.374 249.148 131.029 257.654 144.275 271.021 C 148.925 278.247 147.069 290.852 140.629 296.542 C 124.223 305.049 90.804 300.188 75.007 297.757 Z"></path>
			<path d="M 362.688 253.849 C 351.271 264.772 348.947 291.608 361.473 301.241 C 376.056 302.459 418.712 293.95 431.956 280.582 C 436.606 273.357 434.751 260.753 428.311 255.064 C 411.905 246.557 378.485 251.418 362.688 253.849 Z" transform="matrix(-1, 0, 0, -1, 787.597576, 551.605187)"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 129.692 368.239 C 129.692 368.239 130.58 392.173 122.4 398.621 C 102.361 414.423 64.8 415.707 45.841 398.621 C 31.319 385.534 39.765 340.29 39.765 340.29 C 39.765 340.29 23.086 297.797 25.182 275.883 C 27.582 250.784 30.043 231.039 55.563 206.615 C 55.563 206.615 24 196.191 25.182 183.526 C 26.446 169.997 48.158 163.606 61.64 165.297 C 69.867 166.329 80.457 181.572 80.457 181.572 C 80.457 181.572 100.126 119.315 126.045 104.536 C 197.867 83.876 301.525 83.876 373.953 104.536 C 400.605 119.221 422.717 181.713 422.717 181.713 C 422.717 181.713 430.917 166.597 438.361 165.297 C 451.744 162.96 473.554 169.997 474.818 183.526 C 476.001 196.191 444.438 206.615 444.438 206.615 C 469.957 231.039 472.417 250.784 474.818 275.883 C 476.913 297.797 460.237 340.29 460.237 340.29 C 460.237 340.29 468.682 385.534 454.158 398.621 C 435.201 415.707 397.641 414.423 377.6 398.621 C 369.421 392.173 370.307 368.239 370.307 368.239 L 129.692 368.239 Z"></path>
			<path d="M 95.665 196.892 C 102.715 173.032 117.199 136.374 131.557 121.548 C 198.435 100.89 301.565 100.89 368.444 121.548 C 382.802 136.374 395.958 173.196 404.335 196.892 C 349.658 199.324 150.34 199.324 95.665 196.892 Z"></path>
			<path d="M 75.007 297.757 C 63.588 286.831 61.265 259.998 73.792 250.362 C 88.374 249.148 131.029 257.654 144.275 271.021 C 148.925 278.247 147.069 290.852 140.629 296.542 C 124.223 305.049 90.804 300.188 75.007 297.757 Z"></path>
			<path d="M 362.688 253.849 C 351.271 264.772 348.947 291.608 361.473 301.241 C 376.056 302.459 418.712 293.95 431.956 280.582 C 436.606 273.357 434.751 260.753 428.311 255.064 C 411.905 246.557 378.485 251.418 362.688 253.849 Z" transform="matrix(-1, 0, 0, -1, 787.597576, 551.605187)"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 129.692 368.239 C 129.692 368.239 130.58 392.173 122.4 398.621 C 102.361 414.423 64.8 415.707 45.841 398.621 C 31.319 385.534 39.765 340.29 39.765 340.29 C 39.765 340.29 23.086 297.797 25.182 275.883 C 27.582 250.784 30.043 231.039 55.563 206.615 C 55.563 206.615 24 196.191 25.182 183.526 C 26.446 169.997 48.158 163.606 61.64 165.297 C 69.867 166.329 80.457 181.572 80.457 181.572 C 80.457 181.572 100.126 119.315 126.045 104.536 C 197.867 83.876 301.525 83.876 373.953 104.536 C 400.605 119.221 422.717 181.713 422.717 181.713 C 422.717 181.713 430.917 166.597 438.361 165.297 C 451.744 162.96 473.554 169.997 474.818 183.526 C 476.001 196.191 444.438 206.615 444.438 206.615 C 469.957 231.039 472.417 250.784 474.818 275.883 C 476.913 297.797 460.237 340.29 460.237 340.29 C 460.237 340.29 468.682 385.534 454.158 398.621 C 435.201 415.707 397.641 414.423 377.6 398.621 C 369.421 392.173 370.307 368.239 370.307 368.239 L 129.692 368.239 Z"></path>
			<path d="M 95.665 196.892 C 102.715 173.032 117.199 136.374 131.557 121.548 C 198.435 100.89 301.565 100.89 368.444 121.548 C 382.802 136.374 395.958 173.196 404.335 196.892 C 349.658 199.324 150.34 199.324 95.665 196.892 Z"></path>
			<path d="M 75.007 297.757 C 63.588 286.831 61.265 259.998 73.792 250.362 C 88.374 249.148 131.029 257.654 144.275 271.021 C 148.925 278.247 147.069 290.852 140.629 296.542 C 124.223 305.049 90.804 300.188 75.007 297.757 Z"></path>
			<path d="M 362.688 253.849 C 351.271 264.772 348.947 291.608 361.473 301.241 C 376.056 302.459 418.712 293.95 431.956 280.582 C 436.606 273.357 434.751 260.753 428.311 255.064 C 411.905 246.557 378.485 251.418 362.688 253.849 Z" transform="matrix(-1, 0, 0, -1, 787.597576, 551.605187)"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 129.692 368.239 C 129.692 368.239 130.58 392.173 122.4 398.621 C 102.361 414.423 64.8 415.707 45.841 398.621 C 31.319 385.534 39.765 340.29 39.765 340.29 C 39.765 340.29 23.086 297.797 25.182 275.883 C 27.582 250.784 30.043 231.039 55.563 206.615 C 55.563 206.615 24 196.191 25.182 183.526 C 26.446 169.997 48.158 163.606 61.64 165.297 C 69.867 166.329 80.457 181.572 80.457 181.572 C 80.457 181.572 100.126 119.315 126.045 104.536 C 197.867 83.876 301.525 83.876 373.953 104.536 C 400.605 119.221 422.717 181.713 422.717 181.713 C 422.717 181.713 430.917 166.597 438.361 165.297 C 451.744 162.96 473.554 169.997 474.818 183.526 C 476.001 196.191 444.438 206.615 444.438 206.615 C 469.957 231.039 472.417 250.784 474.818 275.883 C 476.913 297.797 460.237 340.29 460.237 340.29 C 460.237 340.29 468.682 385.534 454.158 398.621 C 435.201 415.707 397.641 414.423 377.6 398.621 C 369.421 392.173 370.307 368.239 370.307 368.239 L 129.692 368.239 Z"></path>
			<path d="M 95.665 196.892 C 102.715 173.032 117.199 136.374 131.557 121.548 C 198.435 100.89 301.565 100.89 368.444 121.548 C 382.802 136.374 395.958 173.196 404.335 196.892 C 349.658 199.324 150.34 199.324 95.665 196.892 Z"></path>
			<path d="M 75.007 297.757 C 63.588 286.831 61.265 259.998 73.792 250.362 C 88.374 249.148 131.029 257.654 144.275 271.021 C 148.925 278.247 147.069 290.852 140.629 296.542 C 124.223 305.049 90.804 300.188 75.007 297.757 Z"></path>
			<path d="M 362.688 253.849 C 351.271 264.772 348.947 291.608 361.473 301.241 C 376.056 302.459 418.712 293.95 431.956 280.582 C 436.606 273.357 434.751 260.753 428.311 255.064 C 411.905 246.557 378.485 251.418 362.688 253.849 Z" transform="matrix(-1, 0, 0, -1, 787.597576, 551.605187)"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 129.692 368.239 C 129.692 368.239 130.58 392.173 122.4 398.621 C 102.361 414.423 64.8 415.707 45.841 398.621 C 31.319 385.534 39.765 340.29 39.765 340.29 C 39.765 340.29 23.086 297.797 25.182 275.883 C 27.582 250.784 30.043 231.039 55.563 206.615 C 55.563 206.615 24 196.191 25.182 183.526 C 26.446 169.997 48.158 163.606 61.64 165.297 C 69.867 166.329 80.457 181.572 80.457 181.572 C 80.457 181.572 100.126 119.315 126.045 104.536 C 197.867 83.876 301.525 83.876 373.953 104.536 C 400.605 119.221 422.717 181.713 422.717 181.713 C 422.717 181.713 430.917 166.597 438.361 165.297 C 451.744 162.96 473.554 169.997 474.818 183.526 C 476.001 196.191 444.438 206.615 444.438 206.615 C 469.957 231.039 472.417 250.784 474.818 275.883 C 476.913 297.797 460.237 340.29 460.237 340.29 C 460.237 340.29 468.682 385.534 454.158 398.621 C 435.201 415.707 397.641 414.423 377.6 398.621 C 369.421 392.173 370.307 368.239 370.307 368.239 L 129.692 368.239 Z"></path>
			<path d="M 95.665 196.892 C 102.715 173.032 117.199 136.374 131.557 121.548 C 198.435 100.89 301.565 100.89 368.444 121.548 C 382.802 136.374 395.958 173.196 404.335 196.892 C 349.658 199.324 150.34 199.324 95.665 196.892 Z"></path>
			<path d="M 75.007 297.757 C 63.588 286.831 61.265 259.998 73.792 250.362 C 88.374 249.148 131.029 257.654 144.275 271.021 C 148.925 278.247 147.069 290.852 140.629 296.542 C 124.223 305.049 90.804 300.188 75.007 297.757 Z"></path>
			<path d="M 362.688 253.849 C 351.271 264.772 348.947 291.608 361.473 301.241 C 376.056 302.459 418.712 293.95 431.956 280.582 C 436.606 273.357 434.751 260.753 428.311 255.064 C 411.905 246.557 378.485 251.418 362.688 253.849 Z" transform="matrix(-1, 0, 0, -1, 787.597576, 551.605187)"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 129.692 368.239 C 129.692 368.239 130.58 392.173 122.4 398.621 C 102.361 414.423 64.8 415.707 45.841 398.621 C 31.319 385.534 39.765 340.29 39.765 340.29 C 39.765 340.29 23.086 297.797 25.182 275.883 C 27.582 250.784 30.043 231.039 55.563 206.615 C 55.563 206.615 24 196.191 25.182 183.526 C 26.446 169.997 48.158 163.606 61.64 165.297 C 69.867 166.329 80.457 181.572 80.457 181.572 C 80.457 181.572 100.126 119.315 126.045 104.536 C 197.867 83.876 301.525 83.876 373.953 104.536 C 400.605 119.221 422.717 181.713 422.717 181.713 C 422.717 181.713 430.917 166.597 438.361 165.297 C 451.744 162.96 473.554 169.997 474.818 183.526 C 476.001 196.191 444.438 206.615 444.438 206.615 C 469.957 231.039 472.417 250.784 474.818 275.883 C 476.913 297.797 460.237 340.29 460.237 340.29 C 460.237 340.29 468.682 385.534 454.158 398.621 C 435.201 415.707 397.641 414.423 377.6 398.621 C 369.421 392.173 370.307 368.239 370.307 368.239 L 129.692 368.239 Z"></path>
			<path d="M 95.665 196.892 C 102.715 173.032 117.199 136.374 131.557 121.548 C 198.435 100.89 301.565 100.89 368.444 121.548 C 382.802 136.374 395.958 173.196 404.335 196.892 C 349.658 199.324 150.34 199.324 95.665 196.892 Z"></path>
			<path d="M 75.007 297.757 C 63.588 286.831 61.265 259.998 73.792 250.362 C 88.374 249.148 131.029 257.654 144.275 271.021 C 148.925 278.247 147.069 290.852 140.629 296.542 C 124.223 305.049 90.804 300.188 75.007 297.757 Z"></path>
			<path d="M 362.688 253.849 C 351.271 264.772 348.947 291.608 361.473 301.241 C 376.056 302.459 418.712 293.95 431.956 280.582 C 436.606 273.357 434.751 260.753 428.311 255.064 C 411.905 246.557 378.485 251.418 362.688 253.849 Z" transform="matrix(-1, 0, 0, -1, 787.597576, 551.605187)"></path>
  		</svg>`
	],
  /* 6 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`
	],
  /* 7 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(4.888889, 0, 0, 4.888889, -972.222229, -1600.681519)">
				<ellipse style="stroke-width: 3px;" cx="250" cy="406.597" rx="4.5" ry="4.5"></ellipse>
				<path style="stroke-width: 3px;" d="M 235 393 C 240 382 260 382 265 393"></path>
				<path style="stroke-width: 3px;" d="M 220 380 C 235 360 265 360 280 380"></path>
				<path style="stroke-width: 3px;" d="M 205 367 C 233 339 267 339 295 367"></path>
			</g>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(4.888889, 0, 0, 4.888889, -972.222229, -1600.681519)">
				<ellipse style="stroke-width: 3px;" cx="250" cy="406.597" rx="4.5" ry="4.5"></ellipse>
				<path style="stroke-width: 3px;" d="M 235 393 C 240 382 260 382 265 393"></path>
				<path style="stroke-width: 3px;" d="M 220 380 C 235 360 265 360 280 380"></path>
				<path style="stroke-width: 3px;" d="M 205 367 C 233 339 267 339 295 367"></path>
			</g>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(4.888889, 0, 0, 4.888889, -972.222229, -1600.681519)">
				<ellipse style="stroke-width: 3px;" cx="250" cy="406.597" rx="4.5" ry="4.5"></ellipse>
				<path style="stroke-width: 3px;" d="M 235 393 C 240 382 260 382 265 393"></path>
				<path style="stroke-width: 3px;" d="M 220 380 C 235 360 265 360 280 380"></path>
				<path style="stroke-width: 3px;" d="M 205 367 C 233 339 267 339 295 367"></path>
			</g>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(4.888889, 0, 0, 4.888889, -972.222229, -1600.681519)">
				<ellipse style="stroke-width: 3px;" cx="250" cy="406.597" rx="4.5" ry="4.5"></ellipse>
				<path style="stroke-width: 3px;" d="M 235 393 C 240 382 260 382 265 393"></path>
				<path style="stroke-width: 3px;" d="M 220 380 C 235 360 265 360 280 380"></path>
				<path style="stroke-width: 3px;" d="M 205 367 C 233 339 267 339 295 367"></path>
			</g>
		</svg>`
	],
  /* 8 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 297.836 208.448 C 307.451 206.429 317.326 205.429 327.355 205.429 C 387.96 205.429 442.917 241.944 469.121 319.271 C 479.86 365.025 473.419 435.906 469.121 471.778 C 402.318 476.074 252.391 476.074 185.591 471.778 C 179.299 439.327 175.797 382.002 182.199 337.525"></path>
			<polyline points="50.368 472.296 256.052 166.307 200.832 153.356 326.524 108.507 327.368 241.96 296.312 194.499 79.126 492.432" transform="matrix(-0.990268, -0.139173, 0.139173, -0.990268, 334.080756, 624.300215)"></polyline>
			<path d="M 268.011 183.165 C 249.091 166.628 237.14 142.317 237.14 115.215 C 237.14 65.391 277.531 25 327.355 25 C 377.179 25 417.57 65.391 417.57 115.215 C 417.57 165.039 377.179 205.43 327.355 205.43 C 319.044 205.43 310.996 204.306 303.354 202.202"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 297.836 208.448 C 307.451 206.429 317.326 205.429 327.355 205.429 C 387.96 205.429 442.917 241.944 469.121 319.271 C 479.86 365.025 473.419 435.906 469.121 471.778 C 402.318 476.074 252.391 476.074 185.591 471.778 C 179.299 439.327 175.797 382.002 182.199 337.525"></path>
			<polyline points="50.368 472.296 256.052 166.307 200.832 153.356 326.524 108.507 327.368 241.96 296.312 194.499 79.126 492.432" transform="matrix(-0.990268, -0.139173, 0.139173, -0.990268, 334.080756, 624.300215)"></polyline>
			<path d="M 268.011 183.165 C 249.091 166.628 237.14 142.317 237.14 115.215 C 237.14 65.391 277.531 25 327.355 25 C 377.179 25 417.57 65.391 417.57 115.215 C 417.57 165.039 377.179 205.43 327.355 205.43 C 319.044 205.43 310.996 204.306 303.354 202.202"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 297.836 208.448 C 307.451 206.429 317.326 205.429 327.355 205.429 C 387.96 205.429 442.917 241.944 469.121 319.271 C 479.86 365.025 473.419 435.906 469.121 471.778 C 402.318 476.074 252.391 476.074 185.591 471.778 C 179.299 439.327 175.797 382.002 182.199 337.525"></path>
			<polyline points="50.368 472.296 256.052 166.307 200.832 153.356 326.524 108.507 327.368 241.96 296.312 194.499 79.126 492.432" transform="matrix(-0.990268, -0.139173, 0.139173, -0.990268, 334.080756, 624.300215)"></polyline>
			<path d="M 268.011 183.165 C 249.091 166.628 237.14 142.317 237.14 115.215 C 237.14 65.391 277.531 25 327.355 25 C 377.179 25 417.57 65.391 417.57 115.215 C 417.57 165.039 377.179 205.43 327.355 205.43 C 319.044 205.43 310.996 204.306 303.354 202.202"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 297.836 208.448 C 307.451 206.429 317.326 205.429 327.355 205.429 C 387.96 205.429 442.917 241.944 469.121 319.271 C 479.86 365.025 473.419 435.906 469.121 471.778 C 402.318 476.074 252.391 476.074 185.591 471.778 C 179.299 439.327 175.797 382.002 182.199 337.525"></path>
			<polyline points="50.368 472.296 256.052 166.307 200.832 153.356 326.524 108.507 327.368 241.96 296.312 194.499 79.126 492.432" transform="matrix(-0.990268, -0.139173, 0.139173, -0.990268, 334.080756, 624.300215)"></polyline>
			<path d="M 268.011 183.165 C 249.091 166.628 237.14 142.317 237.14 115.215 C 237.14 65.391 277.531 25 327.355 25 C 377.179 25 417.57 65.391 417.57 115.215 C 417.57 165.039 377.179 205.43 327.355 205.43 C 319.044 205.43 310.996 204.306 303.354 202.202"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 297.836 208.448 C 307.451 206.429 317.326 205.429 327.355 205.429 C 387.96 205.429 442.917 241.944 469.121 319.271 C 479.86 365.025 473.419 435.906 469.121 471.778 C 402.318 476.074 252.391 476.074 185.591 471.778 C 179.299 439.327 175.797 382.002 182.199 337.525"></path>
			<polyline points="50.368 472.296 256.052 166.307 200.832 153.356 326.524 108.507 327.368 241.96 296.312 194.499 79.126 492.432" transform="matrix(-0.990268, -0.139173, 0.139173, -0.990268, 334.080756, 624.300215)"></polyline>
			<path d="M 268.011 183.165 C 249.091 166.628 237.14 142.317 237.14 115.215 C 237.14 65.391 277.531 25 327.355 25 C 377.179 25 417.57 65.391 417.57 115.215 C 417.57 165.039 377.179 205.43 327.355 205.43 C 319.044 205.43 310.996 204.306 303.354 202.202"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 297.836 208.448 C 307.451 206.429 317.326 205.429 327.355 205.429 C 387.96 205.429 442.917 241.944 469.121 319.271 C 479.86 365.025 473.419 435.906 469.121 471.778 C 402.318 476.074 252.391 476.074 185.591 471.778 C 179.299 439.327 175.797 382.002 182.199 337.525"></path>
			<polyline points="50.368 472.296 256.052 166.307 200.832 153.356 326.524 108.507 327.368 241.96 296.312 194.499 79.126 492.432" transform="matrix(-0.990268, -0.139173, 0.139173, -0.990268, 334.080756, 624.300215)"></polyline>
			<path d="M 268.011 183.165 C 249.091 166.628 237.14 142.317 237.14 115.215 C 237.14 65.391 277.531 25 327.355 25 C 377.179 25 417.57 65.391 417.57 115.215 C 417.57 165.039 377.179 205.43 327.355 205.43 C 319.044 205.43 310.996 204.306 303.354 202.202"></path>
		</svg>`
	],
  /* 9 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 316.69 325.708 C 325.475 371.442 319.422 437.548 315.321 471.778 C 248.518 476.074 98.591 476.074 31.791 471.778 C 24.596 434.667 21.049 365.025 31.791 319.271 C 57.993 241.944 112.95 205.429 173.555 205.429 C 222.476 205.429 267.717 229.222 297.125 279.068"></path>
			<ellipse cx="173.555" cy="115.215" rx="90.215" ry="90.215"></ellipse>
			<polyline points="204.857 411.774 410.541 105.785 355.321 92.834 481.013 47.985 481.857 181.438 450.801 133.977 233.615 431.91" transform="matrix(0.99863, -0.052336, 0.052336, 0.99863, -12.087331, 18.29877)"></polyline>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 316.69 325.708 C 325.475 371.442 319.422 437.548 315.321 471.778 C 248.518 476.074 98.591 476.074 31.791 471.778 C 24.596 434.667 21.049 365.025 31.791 319.271 C 57.993 241.944 112.95 205.429 173.555 205.429 C 222.476 205.429 267.717 229.222 297.125 279.068"></path>
			<ellipse cx="173.555" cy="115.215" rx="90.215" ry="90.215"></ellipse>
			<polyline points="204.857 411.774 410.541 105.785 355.321 92.834 481.013 47.985 481.857 181.438 450.801 133.977 233.615 431.91" transform="matrix(0.99863, -0.052336, 0.052336, 0.99863, -12.087331, 18.29877)"></polyline>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 316.69 325.708 C 325.475 371.442 319.422 437.548 315.321 471.778 C 248.518 476.074 98.591 476.074 31.791 471.778 C 24.596 434.667 21.049 365.025 31.791 319.271 C 57.993 241.944 112.95 205.429 173.555 205.429 C 222.476 205.429 267.717 229.222 297.125 279.068"></path>
			<ellipse cx="173.555" cy="115.215" rx="90.215" ry="90.215"></ellipse>
			<polyline points="204.857 411.774 410.541 105.785 355.321 92.834 481.013 47.985 481.857 181.438 450.801 133.977 233.615 431.91" transform="matrix(0.99863, -0.052336, 0.052336, 0.99863, -12.087331, 18.29877)"></polyline>
		</svg>`
	],
  /* 10 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<defs>
			<path id="path-0" d="M 196.561 234.585 C 206.182 234.585 211.03 235.007 215.894 235.007 C 223.657 235.35 233.576 241.092 238.334 244.524"></path>
			</defs>
			<path d="M 221.093 357.937 C 217.31 354.221 218.141 340.293 218.141 340.293 C 218.141 340.293 223.754 303.234 229.648 288.113 C 233.954 276.728 240.923 265.239 250.557 253.643 C 257.633 245.196 270.353 232.864 288.716 216.653 C 307.081 200.443 319.019 187.534 324.535 177.924 C 330.025 168.292 332.771 157.775 332.771 146.369 C 332.771 125.753 324.712 107.638 308.595 92.02 C 292.503 76.4 272.765 68.591 249.383 68.591 C 226.783 68.591 207.922 75.667 192.801 89.817 C 177.677 103.946 171.87 123.353 152.607 140.164 C 138.818 152.198 112.384 135.879 112.708 121.793 C 113.338 94.481 139.419 70.121 152.297 57.089 C 175.033 34.084 208.622 25 248.497 25 C 290.74 25 324.43 36.488 349.56 59.468 C 374.718 82.446 387.295 110.242 387.295 142.853 C 387.295 161.713 382.871 179.096 374.021 195 C 365.191 210.905 347.902 230.251 322.156 253.039 C 304.881 268.375 293.591 279.675 288.29 286.94 C 282.965 294.206 279.038 302.547 276.504 311.966 C 273.948 321.409 281.706 347.007 272.068 357.937 C 260.83 370.681 233.214 369.844 221.093 357.937 Z M 217.863 464.326 C 203.622 450.085 203.622 418.146 217.863 403.905 C 232.095 389.673 264.012 389.673 278.244 403.905 C 292.485 418.146 292.485 450.085 278.244 464.326 C 264.012 478.558 232.095 478.558 217.863 464.326 Z" style="white-space: pre;"></path>
			<path style="white-space: pre;" d=""></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<ellipse cx="153.928" cy="219.257" rx="38.428" ry="38.428"></ellipse>
			<ellipse cx="346.072" cy="142.4" rx="38.428" ry="38.428"></ellipse>
			<ellipse cx="269.215" cy="357.6" rx="38.428" ry="38.428"></ellipse>
  		</svg>`,

		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<polyline points="70.704 25 280.69 250 70.704 475"></polyline>
			<polyline points="219.281 25 429.296 250 219.281 475"></polyline>
		</svg>`
	]
];

let categories_income_titles = [];

const CATEGORY_INCOME_ICONS = [
  /* 1 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<ellipse cx="250" cy="250" rx="225" ry="225"></ellipse>
		<path d="M 346.154 125 C 346.154 125 153.846 138.471 153.846 208.333 C 153.846 278.196 346.154 221.804 346.154 291.667 C 346.154 361.53 153.846 375 153.846 375"></path>
		<line x1="250" y1="97" x2="250" y2="403"></line>
	</svg>`,
  /* 2 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 21.662 82.418 C 21.526 69.392 209.941 25 250 25 C 290.06 25 478.339 69.065 478.339 82.418 C 478.339 95.772 290.06 139.837 250 139.837 C 209.941 139.837 21.802 95.77 21.662 82.418 Z"></path>
		<path d="M 140.505 121.142 C 140.505 121.142 212.973 139.837 250 139.837 C 287.027 139.837 359.496 121.142 359.496 121.142 L 359.496 209.273 C 359.496 209.273 287.79 238.65 250 238.65 C 212.211 238.65 140.505 209.273 140.505 209.273 L 140.505 121.142 Z"></path>
		<path d="M 406.232 109.125 C 406.232 109.125 406.232 179.496 406.232 201.261 C 409.971 210.608 418.517 210.608 422.255 201.261 C 422.255 178.561 422.255 105.119 422.255 105.119"></path>
		<path d="M 298.072 306.751 C 298.072 306.751 209.447 303.626 203.264 336.128 C 195.69 375.94 305.058 372.321 298.072 412.24 C 292.151 446.072 200.594 445.623 200.594 445.623"></path>
		<line x1="250" y1="276.039" x2="250" y2="475"></line>
	</svg>`,
  /* 3 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 25.785 287.806 C 11.943 257.829 237.188 49.564 261.515 38.66 C 286.682 25.237 439.357 15.171 458.652 41.176 C 484.656 60.469 474.59 213.145 461.168 238.311 C 450.262 262.638 243.06 491.651 212.022 474.035 C 185.178 472.358 27.47 314.649 25.785 287.806 Z"></path>
		<ellipse cx="279" cy="153" rx="47.454" ry="47.454" transform="matrix(0.707107, 0.707107, -0.707107, 0.707107, 269.729643, -164.468667)"></ellipse>
	</svg>`,
  /* 4 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
		<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
	</svg>`,
  /* 5 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 316.69 325.708 C 325.475 371.442 319.422 437.548 315.321 471.778 C 248.518 476.074 98.591 476.074 31.791 471.778 C 24.596 434.667 21.049 365.025 31.791 319.271 C 57.993 241.944 112.95 205.429 173.555 205.429 C 222.476 205.429 267.717 229.222 297.125 279.068"></path>
		<ellipse cx="173.555" cy="115.215" rx="90.215" ry="90.215"></ellipse>
		<polyline points="204.857 411.774 410.541 105.785 355.321 92.834 481.013 47.985 481.857 181.438 450.801 133.977 233.615 431.91" transform="matrix(0.99863, -0.052336, 0.052336, 0.99863, -12.087331, 18.29877)"></polyline>
	</svg>`,
  /* 6 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 69.949 235.617 L 69.949 475 L 428.511 475 L 428.511 235.617 C 428.511 235.617 447.783 237.864 453.168 231.507 C 461.387 208.288 461.387 161.644 453.168 140.069 C 357.004 140.069 141.456 140.069 45.291 140.069 C 39.127 161.644 39.127 208.288 45.291 231.507 C 50.677 237.864 69.949 235.617 69.949 235.617 Z"></path>
		<line x1="189.127" y1="141.096" x2="189.127" y2="475"></line>
		<line x1="308.305" y1="141.096" x2="308.305" y2="475"></line>
		<line x1="69.949" y1="235.617" x2="189.127" y2="235.617"></line>
		<line x1="428.511" y1="235.617" x2="308.305" y2="235.617"></line>
		<path d="M 248.69 134.126 C 248.69 134.126 129.471 140.324 111.615 96.43 C 101.237 70.921 125.944 27.731 153.361 25.134 C 201.413 20.581 248.69 134.126 248.69 134.126 Z"></path>
		<path d="M 388.211 25.301 C 388.211 25.301 268.992 19.103 251.136 62.997 C 240.758 88.507 265.465 131.696 292.882 134.294 C 340.933 138.846 388.211 25.301 388.211 25.301 Z" transform="matrix(-1, 0, 0, -1, 636.927493, 159.427722)"></path>
	</svg>`,
  /* 7 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<polyline points="78.095 475 144.087 475 178.655 390.152"></polyline>
		<polyline points="421.675 475 355.682 475 322.162 390.152"></polyline>
		<polygon points="68.667 283.307 68.667 134.562 174.465 25.622 325.305 25.622 431.102 132.467 431.102 283.307 323.21 390.152 177.607 390.152"></polygon>
		<ellipse cx="249.885" cy="206.84" rx="91.133" ry="91.133"></ellipse>
		<line x1="69.239" y1="133.868" x2="164.967" y2="174.182"></line>
		<line x1="174.179" y1="25.912" x2="216.764" y2="122.349"></line>
		<line x1="325.733" y1="25" x2="284.382" y2="121.873"></line>
		<line x1="430.74" y1="132.614" x2="334.144" y2="170.592"></line>
		<line x1="431.333" y1="282.87" x2="333.411" y2="243.287"></line>
		<line x1="323.631" y1="389.679" x2="284.894" y2="290.876"></line>
		<line x1="177.783" y1="389.862" x2="216.061" y2="291.418"></line>
		<line x1="69.22" y1="282.813" x2="166.384" y2="243.666"></line>
	</svg>`,
  /* 8 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 25 249.999 C 25 125.736 125.736 25 249.999 25 C 339.346 25 416.528 77.077 452.85 152.533"></path>
		<polyline points="356.817 113.636 454.543 154.545 454.543 56.818"></polyline>
		<path d="M 47.15 474.998 C 47.15 350.735 147.886 249.999 272.149 249.999 C 361.496 249.999 438.678 302.076 475 377.532" transform="matrix(-1, 0, 0, -1, 522.150051, 724.996982)"></path>
		<polyline points="45.454 402.271 143.181 443.18 143.181 345.453" transform="matrix(-1, 0, 0, -1, 188.635012, 788.632988)"></polyline>
	</svg>`,
  /* 9 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<polyline points="70.704 25 280.69 250 70.704 475"></polyline>
		<polyline points="219.281 25 429.296 250 219.281 475"></polyline>
	</svg>`
];

let above_categories_titles = [];

const ABOVE_CATEGORY_ICONS = [

	/* 1 transfer */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<polyline points="70.704 25 280.69 250 70.704 475"></polyline>
		<polyline points="219.281 25 429.296 250 219.281 475"></polyline>
	</svg>`	
	// `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
	// 	<line style="" stroke-miterlimit: 5; x1="30" y1="30" x2="470" y2="470"></line>
	// </svg>`
];


const DATE_RANGE_ENUM = {
	this_month: "this_month",
	last_month: "last_month",
	custom: "custom"
}

const ACCOUNT_INFO = {
	currency: "currency",
	balance: "balance",
	color: "color"
}

let uiState = {
	date_range: DATE_RANGE_ENUM.this_month
}



/**
 * Constructs account element based on the given account number. Account data will be taken from the local storage.
 *
 * @param {number} num - Account number.
 *
 * @return {string} - Account html element as a string.
 */
const constructAccountEl = (num) => {

	let color = localStorage.getItem('AColor' + num),
		account_dark_class = '';

	// if account has dark color give to it class for inverting color with dark themes
	if (color === '050505') {
		account_dark_class = 'account-dark-color';
	}
	
	return (`
		<div data-accountnum="${num}" style="color: #ddd; background: #${color};" class="account ${account_dark_class}">
			<p class="account-currency">${localStorage.getItem('ACurrency' + num)}</p>
			<p class="account-balance" style="background: rgba(255, 255, 255, 0.1);">${getAccountBalance(num)}</p>
		</div>
	`);
}

/**
 * Get balance for an account based on the given account number and account settings.
 *
 * @param {number} num - Account number.
 *
 * @return {string} - Account balance based on the account settings. If this account has "without balance" setting, it
 * returns '∞' character instead of the actual account balance. If it has "hide balance setting", it returns "???"
 * string instead of the actual account balance. Else it returns actual account balance stored in the local storage.
 */
function getAccountBalance(num) {

	if (localStorage.getItem(`AWB${num}`) === "true") {
		return ('∞');
	} else if (localStorage.getItem(`AHB${num}`) === "false") {
		return getReadableNumber(
			Number(localStorage.getItem('ABalance' + num))
		);
	} else {
		return ('???');
	}
}

/**
 * Format a number for readability by adding commas as a thousand separators.
 *
 * @param {number} number - The number to be formatted.
 *
 * @return {string} - Returns the formatted number as a string with commas as a thousand separators.
 */
function getReadableNumber(number) {
	let formattedNumber = number.toFixed(2);

	let number_len = formattedNumber.length - 3;
	formattedNumber = formattedNumber.split('');
	formattedNumber = formattedNumber.reverse();
	
	let readable_number = "";
	readable_number = readable_number.split('');
	readable_number[0] = formattedNumber[0];
	readable_number[1] = formattedNumber[1];
	readable_number[2] = formattedNumber[2];
	
	let step = 2;

	for (let a = 1; a <= number_len; a++) {

		if (formattedNumber[a + 2] === '-' || formattedNumber[a + 2] === '+') {
			readable_number[a + step] = ' ';
			readable_number[a + step + 1] = formattedNumber[a + 2];
			break;
		}

		readable_number[a + step] = formattedNumber[a + 2];
		if (
			a % 3 === 0 && a !== number_len &&
			formattedNumber[a + 3] !== '-' && formattedNumber[a + 3] !== '+'
		) {
			step++;
			readable_number[a + step] = ' ';
		}
	}

	// return number;
	readable_number = readable_number.reverse().join('');
	return readable_number;
}



/**
 * Generate HTML for a category element based on provided parameters.
 *
 * @param {number} categoryNum - Category number.
 * @param {Array} iconsArray - Array of category icons.
 * @param {Array} titlesArray - Array of category titles.
 *
 * @return {string} - Returns HTML string for a category element.
 */
const category_list_el = (categoryNum, iconsArray, titlesArray) => {
	return (`
		<div class="category" data-categorynum="${categoryNum}">
			<div class="category-svg-cont">${iconsArray[categoryNum]}</div>
			<h3 class="category-title">${titlesArray[categoryNum]}</h3>
		</div>
	`);
}

/**
 * Generate HTML for a subcategory element based on provided parameters.
 *
 * @param {number} subcategoryNum - Subcategory number.
 * @param {Array} iconsArray - Array of subcategory icons.
 * @param {Array} titlesArray - Array of subcategory titles.
 * @param {number} arrayNum - Index in the outer array.
 * @param {number} nestedArrayNum - Index in the nested array.
 *
 * @return {string} - Returns HTML string for a subcategory element.
 */
const subcategory_list_el = (
	subcategoryNum, iconsArray, titlesArray, arrayNum, nestedArrayNum
) => {
	return (`
		<div class="subcategory" data-subcategorynum="${subcategoryNum}">
			<div class="subcategory-svg-cont">${iconsArray[arrayNum][nestedArrayNum]}</div>
			<h3 class="subcategory-title">${titlesArray[arrayNum][nestedArrayNum]}</h3>
		</div>
	`);
}

const category_list_hr = `<hr class="categories-hr">`;





window.addEventListener('load', async () => {

	if (navigator.serviceWorker) {
		try {
			await navigator.serviceWorker.register('sw.js');
			console.log('Service worker registration success.')
		} catch {
			console.log('Service worker registration failed.')
		}
	}

	startApp();
});

/**
 * Start the application by checking if data exists in local storage.
 * If data exists, upload the application data, otherwise, open the hello screen.
 */
function startApp() {
	if (localStorage.getItem('L')) uploadAppData();
	else openHelloScreen();
}

/**
 * Open the hello screen by hiding the scroll, showing the hello screen, and initializing language selection.
 */
function openHelloScreen() {

	disableScrolling();

	id('hello-screen').classList.remove('hide');

	uploadHelloTitle(0);

	id('hello-language').setAttribute('data-langnum', (0).toString());
	setTimeout(() => {
		uploadHelloLanguageName(0);
		id('hello-language').style.opacity = '1';

		setTimeout(() => {
			setUpClickOnHelloSliderButtons();
		}, 200);
	}, 1000);

	setTimeout(() => {
		setUpClickOnHelloSubmitLanguageButton();
	}, 1800);
}

/**
 * Upload the hello title based on the selected language.
 *
 * @param {number} langNumber - Language number.
 */
function uploadHelloTitle(langNumber) {
	let el = id('hello-screen').firstElementChild;

	el.style.transition = 'opacity .5s';
	el.style.opacity = '0';
	
	setTimeout(() => {
		el.innerHTML = getStrings(getLanguageByNumber(langNumber)).hello;
		el.style.opacity = '1';
	}, 500);
}

/**
 * Upload the hello language name based on the selected language.
 *
 * @param {number} langNumber - Language number.
 *
 * @return {number} - Returns the updated language number.
 */
function uploadHelloLanguageName(langNumber) {

	if (langNumber < 0) langNumber = 4;
	else if (langNumber > 4) langNumber = 0;

	if (langNumber === 0) id('hello-language').innerHTML = getStrings(LANG_ENUM.en).english;
	else if (langNumber === 1) id('hello-language').innerHTML = getStrings(LANG_ENUM.cz).czech;
	else if (langNumber === 2) id('hello-language').innerHTML = getStrings(LANG_ENUM.de).german;
	else if (langNumber === 3) id('hello-language').innerHTML = getStrings(LANG_ENUM.ru).russian;
	else if (langNumber === 4) id('hello-language').innerHTML = getStrings(LANG_ENUM.ua).ukrainian;

	return langNumber;
}

/**
 * Hide the hello language name with a specified direction.
 *
 * @param {number} direction - Direction for hiding (1 for right, -1 for left).
 */
function hideHelloLanguageName(direction) {
	let el = id('hello-language');
	let x = 50 * direction;

	el.style.transition = '.5s transform, .5s opacity';
	el.style.transform = `scale(0.8) translateX(${x}px)`;
	el.style.opacity = '0';
}

/**
 * Show the hello language name with a specified direction.
 *
 * @param {number} direction - Direction for showing (1 for right, -1 for left).
 */
function showHelloLanguage(direction) {
	let el = id('hello-language');
	let x = 50 * direction;

	el.style.transition = '0s transform, 0s opacity';
	el.style.transform = `scale(0.8) translateX(${x}px)`;
	
	setTimeout(() => {
		el.style.transition = '.5s transform, .5s opacity';
		el.style.opacity = '1';
		id('hello-language').style.transform = 'scale(1) translateX(0px)';
	}, 50);
}

/**
 * Set up click events on hello screen slider buttons.
 */
function setUpClickOnHelloSliderButtons() {

	id('button-slider').firstElementChild.style.opacity = '1';

	id('button-slider').firstElementChild.onclick = function() {
		if (id('hello-screen').getAttribute('data-animstatus') === 'done')
			clickOnHelloScreenLeftButton();
	}
	
	id('button-slider').lastElementChild.style.opacity = '1';

	id('button-slider').lastElementChild.onclick = function() {
		if (id('hello-screen').getAttribute('data-animstatus') === 'done')
			clickOnHelloScreenRightButton();
	}
}

/**
 * Handle the click event on the left button of the hello screen slider.
 */
function clickOnHelloScreenLeftButton() {

	id('hello-screen').setAttribute('data-animstatus', 'processing');
	hideHelloLanguageName(1);

	let langNumber = id('hello-language').getAttribute('data-langnum');
	
	setTimeout(() => {
		langNumber = uploadHelloLanguageName(Number(langNumber) - 1);
		uploadHelloTitle(langNumber);
		id('hello-language').setAttribute('data-langnum', langNumber);
		showHelloLanguage(-1);

		setTimeout(() => {
			id('hello-screen').setAttribute('data-animstatus', 'done');
		}, 500);
	}, 500);
}

/**
 * Handle the click event on the right button of the hello screen slider.
 */
function clickOnHelloScreenRightButton() {

	id('hello-screen').setAttribute('data-animstatus', 'processing');
	hideHelloLanguageName(-1);
	
	let langNumber = id('hello-language').getAttribute('data-langnum');
	
	setTimeout(() => {
		langNumber = uploadHelloLanguageName(Number(langNumber) + 1);
		uploadHelloTitle(langNumber);
		id('hello-language').setAttribute('data-langnum', langNumber);
		showHelloLanguage(1);

		setTimeout(() => {
			id('hello-screen').setAttribute('data-animstatus', 'done');
		}, 500);
	}, 500);
}

/**
 * Set up click events on the hello screen submit language button.
 */
function setUpClickOnHelloSubmitLanguageButton() {

	id('hello-submit-language').style.opacity = '1';

	id('hello-submit-language').onclick = () => {
		
		id('hello-submit-language').style.transition = '1s opacity, 1s transform';
		id('hello-submit-language').style.transform = 'scale(0.8)';
		id('hello-submit-language').style.opacity = '0';

		setTimeout(() => {
			id('hello-title').style.transition = '.5s opacity, .5s transform';
			id('hello-title').style.transform = 'scale(0.8)';
			id('hello-title').style.opacity = '0';
		}, 500);

		setTimeout(() => {
			id('button-slider').firstElementChild.style.transform = 'scale(0.8)';
			id('button-slider').firstElementChild.style.opacity = '0';
			id('button-slider').lastElementChild.style.transform = 'scale(0.8)';
			id('button-slider').lastElementChild.style.opacity = '0';
		}, 700);

		setTimeout(() => {
			id('hello-language').style.transition = '.5s opacity, .5s transform';
			id('hello-language').style.transform = 'scale(0.8)';
			id('hello-language').style.opacity = '0';

			setTimeout(() => {
				localStorage.setItem( 'L', getLanguageByNumber( Number(id('hello-language').getAttribute('data-langnum')) ) );
				closeHelloScreen();
			}, 1000);
		}, 1200);
		
	}
}

/**
 * Get language enum value based on the provided number.
 *
 * @param {number} n - Language number.
 *
 * @return {string} - Returns the language enum value.
 */
function getLanguageByNumber(n) {
	if (n === 0) return LANG_ENUM.en;
	else if (n === 1) return LANG_ENUM.cz;
	else if (n === 2) return LANG_ENUM.de;
	else if (n === 3) return LANG_ENUM.ru;
	else if (n === 4) return LANG_ENUM.ua;
	return LANG_ENUM.en;
}

/**
 * Close the hello screen by adding the 'hide' class and initiating the upload of application data.
 */
function closeHelloScreen() {
	id('hello-screen').classList.add('hide');
	uploadAppData();
	startPreloaderAnimation().then();
}



/**
 * Uploads various app data on window load.
 */
function uploadAppData() {

	// upload version update
	uploadVersionUpdate();

	// upload language
	let lang = localStorage.getItem('L');
	uploadLanguage(lang);

	// upload blur
	if (!localStorage.getItem('B')) {
		localStorage.setItem('B', "true");
	}
	reapplyBlur(localStorage.getItem('B') === "true");

	// upload notification sound
	if (!localStorage.getItem('NS')) {
		localStorage.setItem('NS', "0");
	}

	// upload categories to its windows

	uploadCategoriesToItsWindow(id('categories-expense'), categories_expense_titles, CATEGORY_EXPENSE_ICONS);
	uploadCategoriesToItsWindow(id('categories-income'), categories_income_titles, CATEGORY_INCOME_ICONS);
	uploadSubcategoriesToItsWindow();

	setUpOpeningSubcategoryList(
		id('categories-expense'),
		id('categories-expense').getElementsByClassName('category'),
		id('subcategories').getElementsByClassName('subcategory-cont')
	);

	// apply theme
	if (!localStorage.getItem('T')) {
		localStorage.setItem('T', 'l');
		localStorage.setItem('TA', '0');
	}
	applyTheme(localStorage.getItem('T'));

	// set setting 'run animation on start' on the first run of the app
	if (!localStorage.getItem('SA'))
		localStorage.setItem('SA', '1');

	// apply top margin
	if (!(localStorage.getItem('TM'))) localStorage.setItem('TM', (0).toString());
		applyTopMargin();

	// add new account on first run of the app
	if (!localStorage.getItem('ACount')) {
		localStorage.setItem('ACount', (0).toString());
		addAccount();
	}

	// add variable "records' count" into storage on the first run of the app
	if (!localStorage.getItem('RCount')) localStorage.setItem('RCount', (0).toString());
	
	// upload accounts into top-bar
	for (let a = 1; a <= localStorage.getItem('ACount'); a++)
		uploadAccount(a, id('accounts'));

	// adapt size of pie chart
	fitPieChartSize();

	// apply period to custom date menu
	changeDatePeriodInCustomDateMenu(uiState.date_range);
	// set up clicks on accounts in top-bar, after that widgets will be reloaded
	setUpClickOnAccountsInTopBar();
	
	// upload date filter menu
	setTimeout(placeDateFilterMenu, 101);

	// give fix width to elements
	setTimeout(fixCurrentWidthOfElements, 1);
}

/**
 * Checks and displays version update notifications.
 */
function uploadVersionUpdate() {
	let version = '3.2.0';

	if (!localStorage.getItem('V')) {

		localStorage.setItem('V', version);
		setTimeout(() => {
			showNotification('update 3.0.0', 6500);
		}, 3000);

	} else if (localStorage.getItem('V') !== version) {

		checkVersionForNeededStorageUpdates(localStorage.getItem('V'));
		
		localStorage.setItem('V', version);
		setTimeout(() => {
			showNotification(`update ${version}`, 6500);
		}, 3000);
	}
}



/**
 * Checks if storage data needs updates based on the app version.
 *
 * @param {string} version - Current app version.
 */
function checkVersionForNeededStorageUpdates(version) {
	
	// if current version is older than 3.1.0
	if (
		(Number(version[0]) < 3) ||
		(Number(version[0]) === 3 && Number(version[2]) < 1) ||
		(Number(version[0]) === 3 && Number(version[2]) === 1 && Number(version[4]) < 0)
	)
	updateStorageDataToV3_1_0();
}

/**
 * Updates storage data to version 3.1.0 format.
 */
function updateStorageDataToV3_1_0() {
	console.log('storage has been updated');
	// change name of variable in storage from 'Auto Theme' to 'Theme Auto'
	localStorage.setItem('TA', localStorage.getItem('AT'));
	localStorage.removeItem('AT');
	// add status 'Hide from Top-bar', 'WithoutBalance' and 'Hide Balance' to accounts
	for (let a = 1; a <= Number(localStorage.getItem('ACount')); a++) {
		localStorage.setItem(`AHT${a}`, '0');
		localStorage.setItem(`AWB${a}`, '0');
		localStorage.setItem(`AHB${a}`, '0');
	}
	// add setting 'start animation'
	localStorage.setItem('SA', '1');

	// change records' variables to compact ones

	let arr_from = [
		'Type', 'Amount', 'Account', 'Category'
	];
	let arr_to = [
		// tyPe, amoUnt, Account, Category
		'P', 'U', 'A', 'C'
	];

	for (let a = 1; a <= Number(localStorage.getItem('RCount')); a++)
		for (let b = 0; b < arr_from.length; b++) {
			localStorage.setItem(
				`R${arr_to[b]}${a}`,
				localStorage.getItem(`R${arr_from[b]}${a}`)
			);
			localStorage.removeItem(`R${arr_from[b]}${a}`);
		}

	arr_from = ['Subcategory', 'Note'];
	// Subcategory and noTe (if exist)
	arr_to = ['S', 'T'];

	for (let a = 1; a <= Number(localStorage.getItem('RCount')); a++)
		for (let b = 0; b < arr_from.length; b++)
			if (localStorage.getItem(`R${arr_from[b]}${a}`)) {
				localStorage.setItem(
					`R${arr_to[b]}${a}`,
					localStorage.getItem(`R${arr_from[b]}${a}`)
				);
				localStorage.removeItem(`R${arr_from[b]}${a}`);
			}

	// change records' date
	for (let a = 1; a <= Number(localStorage.getItem('RCount')); a++) {

		let year = localStorage.getItem(`RYear${a}`);
		let month = localStorage.getItem(`RMonth${a}`);
		if (Number(month) < 10) month = '0' + month;
		let day = localStorage.getItem(`RDay${a}`);
		if (Number(day) < 10) day = '0' + day;
		let hour = localStorage.getItem(`RHour${a}`);
		if (Number(hour) < 10) hour = '0' + hour;
		let minute = localStorage.getItem(`RMinute${a}`);
		if (Number(minute) < 10) minute = '0' + minute;

		let date = year + month + day + hour + minute;

		localStorage.setItem(`RD${a}`, date);
	}

	arr_from = [
		'Minute', 'Hour', 'Day', 'Month', 'Year'
	];

	for (let a = 1; a <= Number(localStorage.getItem('RCount')); a++)
		for (let b = 0; b < arr_from.length; b++)
			localStorage.removeItem(`R${arr_from[b]}${a}`);
}





/**
 * Shows a notification with the given type and timer.
 *
 * @param {string} type - Type of notification.
 * @param {number} timer - Duration of the notification display.
 */
function showNotification(type, timer) {

	let notificationContEl = id('notification-cont'),
		notificationEl = id('notification'),
		timerLine = id('notification-timer-line');
	let hideNotificationTimeout;

	uploadNotificationMessage(type, id('notification-title'), id('notification-details'));
	// show or hide buttons block
	uploadNotificationButtons(type, notificationEl);

	playNotificationSound();
	// start show notification animation
	notificationContEl.style.visibility = 'visible';
	notificationContEl.classList.add('show');
	// show timer line
	if (timer > 0) timerLine.style.transition = `${timer / 1000}s width linear`;
	else timerLine.style.width = '0%';
	
	setTimeout(() => {
		// end show notification animation
		notificationContEl.classList.add('animate-end');
		notificationContEl.classList.remove('show');
		// start timer to hide notification
		if (timer > 0) {
			timerLine.style.width = '0%';
			hideNotificationTimeout = setTimeout(() => {
				hideNotification(notificationContEl);
			}, timer);
		}
	}, 400);
	
	// hide notification by click on it
	notificationEl.onclick = e => {
		if (e.target.id !== 'notification-show-details-button') {
			clearTimeout(hideNotificationTimeout);
			hideNotification(notificationContEl);
		}
	}
}

/**
 * Uploads notification messages based on the type and language.
 *
 * @param {string} type - Type of notification.
 * @param {HTMLElement} titleEl - Element to display the title.
 * @param {HTMLElement} detailsEl - Element to display details.
 */
function uploadNotificationMessage(type, titleEl, detailsEl) {
	let lang = localStorage.getItem('L');
	titleEl.innerText = "";

	if (type === `update ${localStorage.getItem('V')}` || type === 'update 3.0.0') {
		if (lang === LANG_ENUM.en)
			detailsEl.innerText = `WalletStats got new update version ${localStorage.getItem('V')}!`;
		else if (lang === LANG_ENUM.cz)
			detailsEl.innerText = `WalletStats dostal novou aktualizaci verze ${localStorage.getItem('V')}!`;
		else if (lang === LANG_ENUM.de)
			detailsEl.innerText = `WalletStats hat ein neues Update auf Version ${localStorage.getItem('V')}!`;
		else if (lang === LANG_ENUM.ru)
			detailsEl.innerText = `WalletStats получил новое обновление версии ${localStorage.getItem('V')}!`;
		else
			detailsEl.innerText = `WalletStats отримав нове оновлення версії ${localStorage.getItem('V')}!`;
	}
}

/**
 * Uploads and handles notification buttons based on the type.
 *
 * @param {string} type - Type of notification.
 * @param {HTMLElement} notificationEl - Notification element.
 */
function uploadNotificationButtons(type, notificationEl) {

	if (type === `update ${localStorage.getItem('V')}` || type === 'update 3.0.0') {

		let windowEl_cont = id('update-details-cont'),
			windowEl = id('update-details-cont').lastElementChild;

		// show button block
		id('notification-button-block').style.display = 'flex';

		id('notification-show-details-button').onclick = function() {
			// upload update details content to window
			uploadUpdateDetailsToItsWindow(type);
			// open update detail's window
			disableScrolling();
			openFloatingWindow(notificationEl, windowEl_cont, windowEl, calculateScaleX(notificationEl, windowEl_cont));
			// set up click to close update's details window
			windowEl_cont.firstElementChild.onclick = function() {
				closeFloatingWindowByDisappearMethod(notificationEl, windowEl_cont, windowEl);
				enableScrolling();
			}
		}
	}
}

/**
 * Hides the notification container.
 *
 * @param {HTMLElement} notificationContEl - Notification container element.
 */
function hideNotification(notificationContEl) {

	notificationContEl.classList.remove('animate-end');
	
	setTimeout(() => {
		notificationContEl.style.visibility = 'hidden';
	}, 400);
}

/**
 * Plays notification sound based on the saved setting in the local storage.
 */
function playNotificationSound() {
	if (localStorage.getItem("NS") === "0") {
		return;
	}

	let audio = new Audio(`Main/sounds/notification_${localStorage.getItem("NS")}.mp3`);
	audio.play()
		.then(() => {})
		.catch(() => {});
}



/**
 * Uploads update details content to the update details window.
 *
 * @param {string} type - Type of update.
 */
function uploadUpdateDetailsToItsWindow(type) {
	let container = id('update-details-paragraphs');

	let paragraphs = getUpdateDetailsArrayByLang(type);

	id('update-details-paragraphs').innerText = null;
	for (let a = 0; a < paragraphs.length; a++)
		container.insertAdjacentHTML('beforeend', paragraphs[a]);
}

/**
 * Gets an array of update details based on the language.
 *
 * @param {string} type - Type of update.
 *
 * @returns {Array} - Array of update details paragraphs.
 */
function getUpdateDetailsArrayByLang(type) {
	let lang = localStorage.getItem('L');

	if (type === 'update 3.0.0') {

		if (lang === LANG_ENUM.en)
			return [
				`<h3>Desktop optimizing</h3>
				<p>
					Now WalletStats is optimized for using on desktop.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>German language support</h3>
				<p>
					Now WalletStats is available in German. Change language to German or other you can in settings.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Other</h3>
				<p>
					Other features, bug fixing and visual improvements.
				</p>`
			];
		else if (lang === LANG_ENUM.cz)
			return [
				`<h3>Optimalizace pro počítač</h3>
				<p>
					Nyní je WalletStats optimalizován pro použití na počítači.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Podpora německého jazyka</h3>
				<p>
					Nyní je WalletStats dostupný v němčině. Jazyk můžete změnit na němčinu nebo jiný v nastavení.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Jiné</h3>
				<p>
					Další funkce, opravy chyb a vizuální vylepšení.
				</p>`
			];
		else if (lang === LANG_ENUM.de)
			return [
				`<h3>Desktop optimieren</h3>
				<p>
					Jetzt ist WalletStats für die Verwendung auf dem Desktop optimiert.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Unterstützung für die deutsche Sprache</h3>
				<p>
					Jetzt ist WalletStats auf Deutsch verfügbar. Die Sprache kann in den Einstellungen auf Deutsch oder eine andere Sprache geändert werden.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Sonstiges</h3>
				<p>
					Weitere Funktionen, Fehlerbehebungen und visuelle Verbesserungen.
				</p>`
			];
		else if (lang === LANG_ENUM.ru)
			return [
				`<h3>Оптимизация для компьютеров</h3>
				<p>
					Теперь WalletStats оптимизирован для использования на компьютерах.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Поддержка немецкого языка</h3>
				<p>
					Теперь WalletStats доступен на немецком языке. Вы можете изменить язык на немецкий или другой в настройках.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Прочее</h3>
				<p>
					Другие функции, исправление ошибок и визуальные улучшения.
				</p>`
			];
		else if (lang === LANG_ENUM.ua)
			return [
				`<h3>Оптимізація для комп'ютера</h3>
				<p>
					Тепер WalletStats оптимізований для використання на комп'ютері.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Підтримка німецької мови</h3>
				<p>
					Тепер WalletStats доступний німецькою мовою. Мову можна змінити на німецьку або іншу в налаштуваннях.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Інше</h3>
				<p>
					Інші функції, виправлення помилок та візуальні поліпшення.
				</p>`
			];	

	} else if (type === `update ${localStorage.getItem('V')}`) {
		
		if (lang === LANG_ENUM.en)
			return [
				`<h3>Sound notifications</h3>
				<p>
					Now you can select which sound will play on internal app notifications.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Other</h3>
				<p>
					Code optimization and bug fixing.
				</p>`
			];
		else if (lang === LANG_ENUM.cz)
			return [
				`<h3>Zvuková oznámení</h3>
				<p>
					Nyní můžete vybrat, který zvuk se přehraje při interních oznámeních aplikace.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Ostatní</h3>
				<p>
					Optimalizace kódu a opravy chyb.
				</p>`
			];
		else if (lang === LANG_ENUM.de)
			return [
				`<h3>Töne für Benachrichtigungen</h3>
				<p>
					Jetzt können Sie auswählen, welcher Ton bei internen App-Benachrichtigungen abgespielt wird.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Sonstiges</h3>
				<p>
					Codeoptimierung und Fehlerbehebung.
				</p>`
			];
		else if (lang === LANG_ENUM.ru)
			return [
				`<h3>Звуковые уведомления</h3>
				<p>
					Теперь вы можете выбрать, какой звук будет воспроизводиться при внутренних уведомлениях приложения.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Другое</h3>
				<p>
					Оптимизация кода и исправление ошибок.
				</p>`
			];
		else if (lang === LANG_ENUM.ua)
			return [
				`<h3>Звукові сповіщення</h3>
				<p>
					Тепер ви можете вибрати, який звук буде відтворюватися при внутрішніх сповіщеннях програми.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Інше</h3>
				<p>
					Оптимізація коду та виправлення помилок.
				</p>`
			];
	}
}





const makeDelay = (delay) => new Promise (resolve => setTimeout(resolve, delay));

/**
 * Starts the preloader animation based on app settings.
 * If animation is enabled, shows the preloader animation and hides it when finished.
 * If animation is disabled, hides the preloader immediately.
 * Enables scrolling after animation or hiding.
 *
 * @returns {Promise<void>} - A Promise that resolves when the animation/hiding is completed.
 */
async function startPreloaderAnimation() {

	disableScrolling();

	if (Number(localStorage.getItem('SA'))) {
		
		id('preloader-svg').classList.add('default');

		await makeDelay(500);
		id('preloader-svg').classList.add('show');

		await makeDelay(550);
		id('preloader-svg').classList.add('animate');

		await makeDelay(600);
		id('preloader-svg').classList.add('prefinish');

		await makeDelay(200);
		id('preloader-svg').classList.add('finish');

		await makeDelay(50);
		id('preloader').classList.add('hide');

		await makeDelay(300);
		id('preloader').style.display = 'none';
		enableScrolling();

	} else {

		id('preloader-svg').classList.add('easier');
		// id('preloader-svg').classList.add('animate');
		// await makeDelay(500);

		// await makeDelay(550);

		await makeDelay(600);
		// id('preloader-svg').classList.add('prefinish');

		// await makeDelay(200);
		// id('preloader-svg').classList.add('finish');

		// await makeDelay(50);
		id('preloader').classList.add('hide');

		await makeDelay(300);
		id('preloader').style.display = 'none';
		enableScrolling();
		
	}
	
}





/**
 * Uploads language-specific settings and content to various parts of the app based on the given language.
 *
 * @param {string} lang - The language code representing the selected language.
 */
function uploadLanguage(lang) {

	uploadFontFamilyByLanguage(lang);
	uploadLanguageToRecordCategories(lang);
	uploadLanguageToHistoryNavBars(lang);
	uploadLanguageToWidgets(lang);
	uploadLanguageToTitles(lang);
	uploadLanguageToButtons(lang);
}

/**
 * Uploads the appropriate font family to the body element based on the selected language.
 *
 * @param {string} lang - The language code representing the selected language.
 */
function uploadFontFamilyByLanguage(lang) {
	if (lang === LANG_ENUM.ru || lang === LANG_ENUM.ua) {
		id('body').classList.add('font2');
	} else {
		id('body').classList.add('font1');
	}
}


/**
 * Uploads language-specific titles to record categories based on the given language.
 *
 * @param {string} lang - The language code representing the selected language.
 */
function uploadLanguageToRecordCategories(lang) {
	categories_expense_titles = getCategoriesExpenseTitlesByLanguage(lang);
	subcategories_titles = getSubcategoriesTitlesByLanguage(lang);
	categories_income_titles = getCategoriesIncomeTitlesByLanguage(lang);
	above_categories_titles = getAboveCategoriesExpenseTitlesByLanguage(lang);
}

/**
 * Returns an array of expense category titles based on the specified language.
 *
 * @param {string} lang - The language code representing the selected language.
 *
 * @returns {string[]} An array of expense category titles.
 */
function getCategoriesExpenseTitlesByLanguage(lang) {

	if (lang === LANG_ENUM.en)
		return [
			/* 1 */ 'Food and drinks',
			/* 2 */ 'Shopping',
			/* 3 */ 'Housing',
			/* 4 */ 'Transport',
			/* 5 */ 'Vehicle',
			/* 6 */ 'Life and entertainment',
			/* 7 */ 'Communications',
			/* 8 */ 'Financial expenses',
			/* 9 */ 'Investments',
			/* 10 */ 'Other'
		];
	else if (lang === LANG_ENUM.cz)
		return [
			/* 1 */ 'Jídlo a pití',
			/* 2 */ 'Nakupování',
			/* 3 */ 'Bydlení',
			/* 4 */ 'Doprava',
			/* 5 */ 'Vozidlo',
			/* 6 */ 'Život a zábava',
			/* 7 */ 'Sdělení',
			/* 8 */ 'Finanční výdaje',
			/* 9 */ 'Investice',
			/* 10 */ 'Ostatní'
		];
	else if (lang === LANG_ENUM.de)
		return [
			/* 1 */ 'Essen und Getränke',
			/* 2 */ 'Einkaufen',
			/* 3 */ 'Haus',
			/* 4 */ 'Verkehrsmittel',
			/* 5 */ 'Fahrzeug',
			/* 6 */ 'Leben und Freizeit',
			/* 7 */ 'Kommunikation',
			/* 8 */ 'Finanzierungsspesen',
			/* 9 */ 'Investitionen',
			/* 10 */ 'Andere'
		];
	else if (lang === LANG_ENUM.ru)
		return [
			/* 1 */ 'Еда и напитки',
			/* 2 */ 'Шоппинг',
			/* 3 */ 'Жилье',
			/* 4 */ 'Транспорт',
			/* 5 */ 'Транспортное средство',
			/* 6 */ 'Жизнь и развлечения',
			/* 7 */ 'Коммуникация',
			/* 8 */ 'Финансовые расходы',
			/* 9 */ 'Вложения',
			/* 10 */ 'Другое'
		];
	else if (lang === LANG_ENUM.ua)
		return [
			/* 1 */ 'Їжа та напої',
			/* 2 */ 'Шопінг',
			/* 3 */ 'Житло',
			/* 4 */ 'Транспорт',
			/* 5 */ 'Транспортний засіб',
			/* 6 */ 'Життя і розваги',
			/* 7 */ 'Комунікація',
			/* 8 */ 'Фінансові витрати',
			/* 9 */ 'Інвестиції',
			/* 10 */ 'Інше'
		];
}

/**
 * Returns an array of subcategory titles for each expense category based on the specified language.
 *
 * @param {string} lang - The language code representing the selected language.
 *
 * @returns {string[][]} An array of subcategory titles for each expense category.
 */
function getSubcategoriesTitlesByLanguage(lang) {
	
	if (lang === LANG_ENUM.en)
		return [
			/* 1 */
			[
				'Groceries',
				'Restaurant, fast-food',
				'Cafe, bar',
			],
			/* 2 */
			[
				'Clothes and shoes',
				'Drug-store, chemist',
				'Electronic, accessories',
				'Gifts, joy',
				'Health and beauty',
				'Home, garden',
				'Jewels, accessories',
				'Kids',
				'Pets, animals',
				'Stationery, tools',
			],
			/* 3 */
			[
				'Energy, utilities',
				'Maintenance, repairs',
				'Mortgage',
				'Property insurance',
				'Rent',
				'Services',
			],
			/* 4 */
			[
				'Public transport',
				'Taxi',
				'Business trips',
				'Long distance',
			],
			/* 5 */
			[
				'Fuel',
				'Parking',
				'Leasing',
				'Rentals',
				'Vehicle insurance',
				'Vehicle maintenance',
			],
			/* 6 */
			[
				'Wellness, beauty',
				'Active sport, fitness',
				'Alcohol, tobacco',
				'Books, audio',
				'Gifts, charity',
				'Culture, events',
				'Education, development',
				'Health care, doctor',
				'Hobbies',
				'Holiday, trips, hotels',
				'Life events',
				'Lottery, gambling',
				'TV, Streaming',
			],
			/* 7 */
			[
				'Telephone communications',
				'Internet',
				'Subscriptions, software, apps, games',
				'Postal services',
			],
			/* 8 */
			[
				'Advisory',
				'Charges, fees',
				'Taxes',
				'Fines',
				'Insurance',
				'Loan, interests',
			],
			/* 9 */
			[
				'Financial investments',
				'Realty',
				'Savings',
			],
			/* 10 */
			[
				'Missing',
				'Other',
				'Transfers'
			]
		];
	else if (lang === LANG_ENUM.cz)
		return [
			/* 1 */
			[
				'Potraviny',
				'Restaurace, fast-food',
				'Kavárna, bar',
			],
			/* 2 */
			[
				'Oblečení a boty',
				'Lékárna',
				'Elektronika, příslušenství',
				'Dárky, radost',
				'Zdraví a krása',
				'Dům a zahrada',
				'Šperky, doplňky',
				'Děti',
				'Domácí mazlíčci, zvířata',
				'Psací potřeby, nářadí',
			],
			/* 3 */
			[
				'Energie, utility',
				'Údržba, opravy',
				'Hypotéka',
				'Pojištění majetku',
				'Nájemné',
				'Ostátní služby',
			],
			/* 4 */
			[
				'Veřejná doprava',
				'Taxi',
				'Služební cesty',
				'Velká vzdálenost',
			],
			/* 5 */
			[
				'Palivo',
				'Parkoviště',
				'Leasing',
				'Pronájem vozidla',
				'Pojištění vozidla',
				'Údržba vozidla',
			],
			/* 6 */
			[
				'Wellness, krása',
				'Aktivní sport, fitness',
				'Alkohol, tabák',
				'Knihy, audio',
				'Dary, charita',
				'Kultura, akce',
				'Vzdělávání, rozvoj',
				'Zdravotní péče, lékař',
				'Koníčky',
				'Dovolená, výlety, hotely',
				'Životní události',
				'Loterie, hazardní hry',
				'TV, streamování',
			],
			/* 7 */
			[
				'Telefonní komunikace',
				'Internet',
				'Předplatné, software, aplikace, hry',
				'Poštovní služby',
			],
			/* 8 */
			[
				'Poradní',
				'Poplatky',
				'Daně',
				'Pokuty',
				'Pojištění',
				'Půjčka, úroky',
			],
			/* 9 */
			[
				'Finanční investice',
				'Nemovitost',
				'Úspory',
			],
			/* 10 */
			[
				'Chybějící',
				'Ostatní',
				'Převody'
			]
		];
	else if (lang === LANG_ENUM.de)
		return [
			/* 1 */
			[
				'Lebensmittel',
				'Restaurant, Fastfood',
				'Cafe, Bar',
			],
			/* 2 */
			[
				'Kleidung und Schuhe',
				'Apotheke',
				'Elektronik, Zubehör',
				'Geschäfte, Lust',
				'Gesundheit, Schönheit',
				'Haus und Garten',
				'Schmuck, Zubehör',
				'Kinder',
				'Haustiere',
				'Schreibwaren, Werkzeuge',
			],
			/* 3 */
			[
				'Nebenkosten',
				'Instandhaltung',
				'Hypothek',
				'Versicherung',
				'Miete',
				'Dienst',
			],
			/* 4 */
			[
				'Öffentliche Verkehrsmittel',
				'Taxi',
				'Dienstreisen',
				'Langstrecke',
			],
			/* 5 */
			[
				'Kraftstoff',
				'Parken',
				'Leasing',
				'Autovermietung',
				'Autoversicherung',
				'Service des Autos',
			],
			/* 6 */
			[
				'Schönheit',
				'Aktivsport, Fitness',
				'Alkohol, Tabakwaren',
				'Bücher, Audio',
				'Geschenke, Wohltätigkeit',
				'Kultur, Veranstaltungen',
				'Ausbildung, Entwicklung',
				'Gesundheit, Arzt',
				'Interessen, Hobbys',
				'Freizeit, Reisen, Hotels',
				'Lebensereignisse',
				'Lotterie, Glücksspiel',
				'Fernsehen',
			],
			/* 7 */
			[
				'Telefonkommunikation',
				'Internet',
				'Abonnements, Software, Apps, Spiele',
				'Postdienste',
			],
			/* 8 */
			[
				'Beratungen',
				'Einziehung',
				'Abgaben',
				'Bußgelder',
				'Versicherung',
				'Kredit',
			],
			/* 9 */
			[
				'Finanzielle Investitionen',
				'Liegenschaft',
				'Ersparnisse',
			],
			/* 10 */
			[
				'abwesend',
				'andere',
				'Überwisungen'
			]
		];
	else if (lang === LANG_ENUM.ru)
		return [
			/* 1 */
			[
				'Продукты',
				'Ресторан, фаст-фуд',
				'Кафе, бар',
			],
			/* 2 */
			[
				'Одежда и обувь',
				'Аптека',
				'Электроника, аксессуары',
				'Подарки, радость',
				'Здоровье, красота',
				'Дом, сад',
				'Драгоценности, аксессуары',
				'Дети',
				'Домашние животные, животные',
				'Канцтовары, инструменты',
			],
			/* 3 */
			[
				'Коммунальные услуги',
				'Обслуживание, ремонт',
				'Ипотека',
				'Страхование собственности',
				'Аренда',
				'Услуги',
			],
			/* 4 */
			[
				'Общественный транспорт',
				'Такси',
				'Командировки',
				'Длинная дистанция',
			],
			/* 5 */
			[
				'Топливо',
				'Парковка',
				'Лизинг',
				'Аренда авто',
				'Страхование авто',
				'Обслуживание авто',
			],
			/* 6 */
			[
				'Красота',
				'Активный спорт, фитнес',
				'Алкоголь, табак',
				'Книги, аудио',
				'Подарки, благотворительность',
				'Культура, события',
				'Обучение, развитие',
				'Здравоохранение, врач',
				'Увлечения, хобби',
				'Отдых, поездки, отели',
				'Жизненные события',
				'Лотерея, азартные игры',
				'Телевидение'
			],
			/* 7 */
			[
				'Телефонная связь',
				'Интернет',
				'Подписки, программное обеспечение, приложения, игры',
				'Почтовые услуги',
			],
			/* 8 */
			[
				'Консультации',
				'Сборы',
				'Налоги',
				'Штрафы',
				'Страхование',
				'Кредит, проценты',
			],
			/* 9 */
			[
				'Финансовые вложения',
				'Недвижимость',
				'Сбережения',
			],
			/* 10 */
			[
				'Недостающее',
				'Другое',
				'Переводы'
			]
		];
	else if (lang === LANG_ENUM.ua)
		return [
			/* 1 */
			[
				'Бакалія, продукты',
				'Ресторан, фаст-фуд',
				'Кафе, бар',
			],
			/* 2 */
			[
				'Одяг і взуття',
				'Аптека',
				'Електроніка, аксесуари',
				'Подарунки, радість',
				'Здоров\'я і краса',
				'Дім, сад',
				'Коштовності, аксесуари',
				'Діти',
				'Домашні тварини, тварини',
				'Канцтовари, інструменти',
			],
			/* 3 */
			[
				'Комунальні послуги',
				'Технічне обслуговування, ремонт',
				'Іпотека',
				'Страхування майна',
				'Оренда житла',
				'Послуги (житло)',
			],
			/* 4 */
			[
				'Громадський транспорт',
				'Таксі',
				'Відрядження',
				'Довга відстань',
			],
			/* 5 */
			[
				'Паливо',
				'Паркінг',
				'Лізинг',
				'Оренда авто',
				'Страхування авто',
				'Обслуговування авто',
			],
			/* 6 */
			[
				'Здоров\'я, краса',
				'Активний спорт, фітнес',
				'Алкоголь, тютюн',
				'Книги, аудіо',
				'Подарунки, благодійність',
				'Культура, заходи',
				'Освіта, розвиток',
				'Охорона здоров\'я, лікар',
				'Хобі',
				'Відпочинок, подорожі, готелі',
				'Життєві події',
				'Лотерея, азартні ігри',
				'Телебачення',
			],
			/* 7 */
			[
				'Телефонний зв\'язок',
				'Інтернет',
				'Підписки, програмне забезпечення, ігри',
				'Поштові послуги',
			],
			/* 8 */
			[
				'Дорадчий, консультації',
				'Збори',
				'Податки',
				'Штрафи',
				'Страхування',
				'Кредит, проценти',
			],
			/* 9 */
			[
				'Фінансові інвестиції',
				'Нерухомість',
				'Заощадження',
			],
			/* 10 */
			[
				'Відсутнє, загублене',
				'Інше',
				'Перекази'
			]
		];
}

/**
 * Retrieves income category titles based on the specified language.
 *
 * @param {string} lang - The language code representing the selected language.
 *
 * @returns {string[]} An array containing income category titles.
 */
function getCategoriesIncomeTitlesByLanguage(lang) {

	if (lang === LANG_ENUM.en)
		return [
			/* 1 */ 'Salary',
			/* 2 */ 'Scholarship',
			/* 3 */ 'Sale',
			/* 4 */ 'Rent',
			/* 5 */ 'Investments',
			/* 6 */ 'Gifts',
			/* 7 */ 'Lottery',
			/* 8 */ 'Refund',
			/* 9 */ 'Transfers'
		  ];
	else if (lang === LANG_ENUM.cz)
		return [
			/* 1 */ 'Plat',
			/* 2 */ 'Stipendium',
			/* 3 */ 'Prodej',
			/* 4 */ 'Nájemné',
			/* 5 */ 'Investice',
			/* 6 */ 'Dárky',
			/* 7 */ 'Loterie',
			/* 8 */ 'Vrácení peněz',
			/* 9 */ 'Převody'
		];
	else if (lang === LANG_ENUM.de)
		return [
			/* 1 */ 'Gehalt',
			/* 2 */ 'Stipendium',
			/* 3 */ 'Verkauf',
			/* 4 */ 'Miete',
			/* 5 */ 'Investitionen',
			/* 6 */ 'Geschenke',
			/* 7 */ 'Lotterie',
			/* 8 */ 'Rückgabe',
			/* 9 */ 'Überwisungen'
		];
	else if (lang === LANG_ENUM.ru)
		return [
			/* 1 */ 'Зарплата',
			/* 2 */ 'Стипендия',
			/* 3 */ 'Продажа',
			/* 4 */ 'Аренда',
			/* 5 */ 'Вложения',
			/* 6 */ 'Подарки, дары',
			/* 7 */ 'Лотерея',
			/* 8 */ 'Возврат денег',
			/* 9 */ 'Переводы'
		  ];
	else if (lang === LANG_ENUM.ua)
		return [
			/* 1 */ 'Зарплата',
			/* 2 */ 'Стипендія',
			/* 3 */ 'Продаж',
			/* 4 */ 'Оренда',
			/* 5 */ 'Інвестиції',
			/* 6 */ 'Подарунки',
			/* 7 */ 'Лотерея',
			/* 8 */ 'Повернення коштів',
			/* 9 */ 'Перекази'
		  ];
}

/**
 * Retrieves titles for categories above expenses based on the specified language.
 *
 * @param {string} lang - The language code representing the selected language.
 *
 * @returns {string[]} An array containing titles for categories above expenses.
 */
function getAboveCategoriesExpenseTitlesByLanguage(lang) {

	if (lang === LANG_ENUM.en) {
		return [
			'Transfer'
		];
	} else if (lang === LANG_ENUM.cz) {
		return [
			'Převod'
		];
	} else if (lang === LANG_ENUM.de) {
		return [
			'Überweisung'
		];
	} else if (lang === LANG_ENUM.ru) {
		return [
			'Перевод'
		];
	} else if (lang === LANG_ENUM.ua) {
		return [
			'Переказ'
		];
	}
}

/**
 * Updates language for navigation bars in the history section.
 *
 * @param {string} lang - The language code representing the selected language.
 */
function uploadLanguageToHistoryNavBars(lang) {

	let els = id('history-period-nav').getElementsByTagName('button');
	els[0].innerText = getStrings(lang).this_month;
	els[1].innerText = getStrings(lang).last_month;
	els[2].innerText = getStrings(lang).other;

	els = id('history-type-nav').getElementsByTagName('button');
	els[0].innerText = getStrings(lang).expenses;
	els[1].innerText = getStrings(lang).income_plural;
	els[2].innerText = getStrings(lang).view_all;
}

/**
 * Updates language for widgets.
 *
 * @param {string} lang - The language code representing the selected language.
 */
function uploadLanguageToWidgets(lang) {

	let els = id('stats-column').getElementsByClassName('stats-column-title');
	els[0].firstElementChild.firstElementChild.innerHTML = getStrings(lang).income_plural;
	els[1].firstElementChild.firstElementChild.innerHTML = getStrings(lang).expenses;

	id('today-stats-title').innerText = getTodayStatsTitle(lang);

	id('incomes-expenses-total-title').innerText = getStrings(lang).total;
}

/**
 * Updates language for titles across the application.
 *
 * @param {string} lang - The language code representing the selected language.
 */
function uploadLanguageToTitles(lang) {

	id('update-details-title').innerText = getStrings(lang).whats_new_message + localStorage.getItem('V');

	id('settings-title').innerText = getStrings(lang).settings;
	id('settings-version-title').innerText = `${getStrings(lang).version} ${localStorage.getItem('V')}`;

	id("date-filter-menu-date-from-label").innerText = getStrings(lang).from;
	id("date-filter-menu-date-to-label").innerText = getStrings(lang).to_time_meaning;

	let els = id('make-record-window').getElementsByClassName('field-label');
	els[0].innerHTML = getStrings(lang).date;
	els[1].innerHTML = getStrings(lang).note;
	els[4].innerHTML = getStrings(lang).rate;
	els[5].innerHTML = getStrings(lang).amount;
	els[6].innerHTML = getStrings(lang).rate;
	els[7].innerHTML = getStrings(lang).final_amount;
	els[8].innerHTML = getStrings(lang).category;

	els = id('make-record-note');
	els.setAttribute('placeholder', getStrings(lang).note_field_placeholder);
	adaptInputLengthExplicitly(els);

	els = id('edit-account').getElementsByClassName('field');
	els[0].firstElementChild.innerText = getStrings(lang).currency;
	els[1].firstElementChild.innerText = getStrings(lang).balance;
	els[2].firstElementChild.innerText = getStrings(lang).color;

	els = id('edit-account').getElementsByClassName('switch-button-block');
	for (let element of els) {
		element.lastElementChild.firstElementChild.innerText = getStrings(lang).off_turn_off_meaning;
		element.lastElementChild.lastElementChild.innerText = getStrings(lang).on_turn_on_meaning;
	}
	els[0].firstElementChild.innerText = getStrings(lang).hide_account_from_top_bar;
	els[1].firstElementChild.innerText = getStrings(lang).account_without_balance;
	els[2].firstElementChild.innerText = getStrings(lang).do_not_show_balance;
}

/**
 * Updates language for buttons across the application.
 *
 * @param {string} lang - The language code representing the selected language.
 */
function uploadLanguageToButtons(lang) {

	id('notification-show-details-button').value = getStrings(lang).show_details;

	id('make-record-button').value = getStrings(lang).make_record;

	id('settings-button-desktop').value = getStrings(lang).settings;
	id('settings-button-cont-mobile').lastElementChild.innerText = getStrings(lang).settings;

	id('repeat-record').value = getStrings(lang).repeat;

	id('remove-record').value = getStrings(lang).remove;

	id('remove-account').value = getStrings(lang).remove_account;

	id('save-account').value = getStrings(lang).save_account;

	id('submit-date-filter').value = getStrings(lang).confirm;

	let els = id('record-types').getElementsByTagName('input');
	els[0].value = getStrings(lang).transfer;
	els[1].value = getStrings(lang).expense;
	els[2].value = getStrings(lang).income_singular;

	els = id('root').getElementsByClassName('back-button');
	for (let a = 0; a < els.length; a++)
		els[a].value = getStrings(lang).back;

	els = id('settings-categories').getElementsByTagName('button');
	els[0].innerText = getStrings(lang).other;
	els[1].innerText = getStrings(lang).reset_data;
	els[2].innerText = getStrings(lang).language;
	els[3].innerText = getStrings(lang).appearance;
	els[4].innerText = getStrings(lang).top_margin;
	els[5].innerText = getStrings(lang).accounts;

	els = id('root').getElementsByClassName('close-button');
	for (let a = 0; a < els.length; a++)
		els[a].innerText = getStrings(lang).close;

	els = id('date-filter-other').getElementsByTagName('button');
	els[0].innerText = getStrings(lang).this_week;
	els[1].innerText = getStrings(lang).seven_days;
	els[2].innerText = getStrings(lang).this_year;
	els[3].innerText = getStrings(lang).last_year;

	for (let input of id('date-filter-other').getElementsByTagName('input')) {
		adaptInputLengthExplicitly(input);
	}

	els = id('date-filter-months').getElementsByTagName('button');
	els[0].innerText = getStrings(lang).jan_month;
	els[1].innerText = getStrings(lang).feb_month;
	els[2].innerText = getStrings(lang).mar_month;
	els[3].innerText = getStrings(lang).apr_month;
	els[4].innerText = getStrings(lang).may_month;
	els[5].innerText = getStrings(lang).june_month;
	els[6].innerText = getStrings(lang).july_month;
	els[7].innerText = getStrings(lang).aug_month;
	els[8].innerText = getStrings(lang).sept_month;
	els[9].innerText = getStrings(lang).oct_month;
	els[10].innerText = getStrings(lang).nov_month;
	els[11].innerText = getStrings(lang).dec_month;

	id('enable-history-scroll-button').value = getStrings(lang).disable_scrolling;
	id('enable-categories-details-scroll-button').value = getStrings(lang).disable_scrolling;
}

/**
 * Updates the account field title at the make record window based on the specified record status
 * ("record" or "transfer").
 *
 * @param {string} status - The status indicating whether it's for a record or transfer.
 */
function uploadAccountFieldTitle(status) {
	let lang = localStorage.getItem('L');

	if (status === 'record') {
		id('make-record-account').previousElementSibling.innerText = getStrings(lang).account;
	} else if (status === 'transfer') {
		id('make-record-account').previousElementSibling.innerText = getStrings(lang).from_account;
		id('make-transfer-to-account').previousElementSibling.innerText = getStrings(lang).to_account;
	}
}





/**
 * Reapplies blur effect to specified elements based on the given blur status.
 *
 * @param {boolean} newStatus - Indicates whether to apply or remove the blur effect.
 */
function reapplyBlur(newStatus) {

	if (newStatus) {

		for (let el of document.getElementsByClassName('solid-background')) {

			if (el.id === 'notification') {
				el.classList.add('solid-blur');
				setTimeout(() => {
					el.classList.remove('solid-background');
				}, 1);
			} else {
				el.classList.add('blur');
				setTimeout(() => {
					el.classList.remove('solid-background');
				}, 1);
			}	
		}

	} else {

		operateElementsArrayClass(
			document.getElementsByClassName('blur'),
			'blur', 'solid-background'
		);

		operateElementsArrayClass(
			document.getElementsByClassName('solid-blur'),
			'solid-blur', 'solid-background'
		);
	}
}

/**
 * Operates on an array of elements to add and remove specified classes with a delay.
 *
 * @param {HTMLCollection} array - The array of elements to operate on.
 * @param {string} classToRemove - The class to be removed.
 * @param {string} classToAdd - The class to be added.
 */
function operateElementsArrayClass(array, classToRemove, classToAdd) {

	for (let el of array) {
		el.classList.add(classToAdd);
		setTimeout(() => {
			el.classList.remove(classToRemove);
		}, 1);
	}
}





/**
 * Applies the specified theme to the application and updates the preloader theme accordingly.
 *
 * @param {string} theme - The theme code ('l' for light, 'b' for dark blue, 'd' for dark).
 */
function applyTheme(theme) {

	if (Number(localStorage.getItem('TA')) === 1) {
		if (window.matchMedia('(prefers-color-scheme: dark)').matches)
			theme = 'd';
		else theme = 'l';

		localStorage.setItem('T', theme);
	}
	
	if (theme === 'l') {
		id('root').classList.remove('wallet-darkblue');
		id('root').classList.remove('wallet-dark');
		id('root').classList.add('wallet-light');
	} else if (theme === 'b') {
		id('root').classList.remove('wallet-light');
		id('root').classList.remove('wallet-dark');
		id('root').classList.add('wallet-darkblue');
	} else if (theme === 'd') {
		id('root').classList.remove('wallet-darkblue');
		id('root').classList.remove('wallet-light');
		id('root').classList.add('wallet-dark');
	}

	setTimeout(() => {
		applyThemeForPreloader(theme);
	}, 1);
}

/**
 * Applies the specified theme to the preloader element.
 *
 * @param {string} theme - The theme code ('l' for light, 'b' for dark blue, 'd' for dark).
 */
function applyThemeForPreloader(theme) {

	if (theme === 'l') {
		id('preloader').classList.add('light');
	} else if (theme === 'b') {
		id('preloader').classList.add('darkblue');
	} else if (theme === 'd') {
		id('preloader').classList.add('dark');
	}
}

/**
 * Applies the top margin to specified elements based on the value stored in local storage.
 */
function applyTopMargin() {
  id('accounts').style.paddingTop = `calc(15px + ${localStorage.getItem('TM')}px)`;
  id('settings').style.paddingTop = `calc(15px + ${localStorage.getItem('TM')}px)`;
  id('notification-cont').style.paddingTop = `calc(15px + ${localStorage.getItem('TM')}px`;
}



/**
 * Increments the account count and initializes default values for the new account.
 */
function addAccount() {
	localStorage.setItem("ACount", (Number(localStorage.getItem("ACount")) + 1).toString());
	let acc_count = localStorage.getItem("ACount");

	localStorage.setItem("AColor" + acc_count, "050505");
	localStorage.setItem("ACurrency" + acc_count, "USD");
	localStorage.setItem("ABalance" + acc_count, (0).toFixed(2));
	localStorage.setItem("AHT" + acc_count, "false");
	localStorage.setItem("AWB" + acc_count, "false");
	localStorage.setItem("AHB" + acc_count, "false");
}

/**
 * Uploads account information to the specified container, excluding hidden accounts.
 *
 * @param {number} accountNum - The account number.
 * @param {HTMLElement} container - The container to upload the account to.
 */
function uploadAccount(accountNum, container) {
	if (
		!(container === id('accounts') &&
		localStorage.getItem(`AHT${accountNum}`) === "true")
	) {
		container.insertAdjacentHTML('beforeend', constructAccountEl(accountNum));
	}
}



/**
 * Uploads category titles and icons to the specified container.
 *
 * @param {HTMLElement} container - The container to upload categories to.
 * @param {string[]} titlesArray - Array of category titles.
 * @param {string[]} iconsArray - Array of category icons.
 */
function uploadCategoriesToItsWindow(container, titlesArray, iconsArray) {

	container.insertAdjacentHTML(
		'afterbegin',
		category_list_el(titlesArray.length - 1, iconsArray, titlesArray)
	);

	for (let a = titlesArray.length - 2; a >= 0; a--) {
		container.insertAdjacentHTML('afterbegin', category_list_hr);
		container.insertAdjacentHTML(
			'afterbegin',
			category_list_el(a, iconsArray, titlesArray)
		);
	}
}

/**
 * Uploads subcategories to the subcategories window.
 */
function uploadSubcategoriesToItsWindow() {
	
	for (let a = subcategories_titles.length - 1; a >= 0; a--) {

		id('subcategories').insertAdjacentHTML(
			'afterbegin',
			`<div class="subcategory-cont"></div>`
		);
		
		for (let b = subcategories_titles[a].length - 1; b >= 0; b--) {

			id('subcategories').firstElementChild.insertAdjacentHTML(
				'afterbegin',
				subcategory_list_el(
					b,
					SUBCATEGORY_ICONS, subcategories_titles,
					a, b
					)
					);
			id('subcategories').firstElementChild.insertAdjacentHTML('afterbegin', category_list_hr);
			
		}

		id('subcategories').firstElementChild.firstElementChild.remove();

	}
}



/**
 * Updates widgets data based on the specified parameters.
 *
 * @param {number} all - Update all widgets.
 * @param {number} today - Update today widget.
 * @param {number} expensesIncomes - Update expenses/incomes widget.
 * @param {[number, number]} history - Array of 2 numbers: update history widget and update history widget animated.
 * @param {number} pieChart - Update pie chart widget.
 */
function updateWidgetsData(
	all, today, expensesIncomes, history, pieChart
) {

	if (all) {
		uploadTodayStats();
		uploadExpensesIncomesStats();
		if (history[0]) uploadRecordsToHistory();
		else if (history[1]) uploadRecordsToHistoryAnimated();
		updatePieChart();
		return;
	}
	if (today) {
		uploadTodayStats();
	}
	if (expensesIncomes) {
		uploadExpensesIncomesStats();
	}
	if (history[0]) {
		uploadRecordsToHistory();
	} else if (history[1]) {
		uploadRecordsToHistoryAnimated();
	}
	if (pieChart) {
		updatePieChart();
	}
}





/**
 * Formats the input date object into a string with the following format: 'YYYY-MM-DDTHH:mm:ss'.
 *
 * @param {Date} inputDate - The input date object to be formatted.
 *
 * @returns {string} The formatted date string.
 */
function getDateFormat(inputDate) {

	let date = inputDate;
	
	let year = date.getFullYear();
	let month = date.getMonth() + 1;
	if (Number(month) < 10) month = '0' + month;
	let day = date.getDate();
	if (Number(day) < 10) day = '0' + day;
	let hours = date.getHours();
	if (Number(hours) < 10) hours = '0' + hours;
	let minutes = date.getMinutes();
	if (Number(minutes) < 10) minutes = '0' + minutes;
	let seconds = date.getSeconds();
	if (Number(seconds) < 10) seconds = '0' + seconds;

	return (`${year}-${month}-${day}T${hours}:${minutes}:${seconds}`);
}

/**
 * Uploads records to the history section based on the selected date range.
 */
function uploadRecordsToHistory() {
	let period = uiState.date_range;

	id('history').innerHTML = null;
	id('history-empty').innerHTML = null;

	// upload records
	uploadRecordsByCustomPeriod();
	
	if (id('history').firstElementChild) {
		for (let record of id('history').getElementsByClassName('record'))
			record.onclick = function() {
				setUpClickOnRecord(this);
			}
	} else {
		id('history-empty').innerHTML = getShowMessageInEmptyHistoryByLang(period, localStorage.getItem('L'));
		id('history-empty').classList.add('visible');
	}	
}

/**
 * Changes the date period in the custom date menu based on the selected date range.
 *
 * @param {string} period - The selected date range.
 */
function changeDatePeriodInCustomDateMenu(period) {

	let date = new Date();
	let current_date = date;
	let date_top_border, date_bottom_border;

	if (period === DATE_RANGE_ENUM.this_month) {

		date = getMonthTopBorder(date, current_date, 0);
		date_top_border = getDateFormat(date);

		date = getMonthBottomBorder(date);
		date_bottom_border = getDateFormat(date);

	} else if (period === DATE_RANGE_ENUM.last_month) {

		date = getMonthTopBorder(date, current_date, -1);
		date_top_border = getDateFormat(date);

		date = getMonthBottomBorder(date);
		date_bottom_border = getDateFormat(date);

	} else if (period === DATE_RANGE_ENUM.custom) {
		if (!sessionStorage.getItem('custom-date-top-border')) {

			date = getMonthTopBorder(date, current_date, -2);
			date_top_border = getDateFormat(date);

			date = getMonthBottomBorder(date);
			date_bottom_border = getDateFormat(date);

			sessionStorage.setItem('custom-date-top-border', date_top_border);
			sessionStorage.setItem('custom-date-bottom-border', date_bottom_border);

		} else {
			date_top_border = sessionStorage.getItem('custom-date-top-border');
			date_bottom_border = sessionStorage.getItem('custom-date-bottom-border');
		}
	}

	uploadExactlyDatePeriodToCustomDateMenu(date_top_border, date_bottom_border);
}

/**
 * Retrieves the top border of the month based on the specified date and month difference.
 *
 * @param {Date} date - The base date.
 * @param {Date} currentDate - The current date.
 * @param {number} monthDifference - The difference in months.
 *
 * @returns {Date} The calculated top border date.
 */
function getMonthTopBorder(date, currentDate, monthDifference) {

	date.setSeconds(59);
	date.setMinutes(59);
	date.setHours(23);
	date.setMonth(currentDate.getMonth() + 1 + monthDifference);
	date.setDate(0);

	return date;
}

/**
 * Retrieves the bottom border of the month based on the specified date.
 *
 * @param {Date} date - The base date.
 *
 * @returns {Date} The calculated bottom border date.
 */
function getMonthBottomBorder(date) {

	date.setSeconds(0);
	date.setMinutes(0);
	date.setHours(0);
	date.setDate(1);

	return date;
}

/**
 * Uploads the exactly selected date period to the custom date menu.
 *
 * @param {string} dateTopBorder - The top border date string.
 * @param {string} dateBottomBorder - The bottom border date string.
 */
function uploadExactlyDatePeriodToCustomDateMenu(dateTopBorder, dateBottomBorder) {
	let inputs = id('date-filter-menu').getElementsByClassName('field-date');

	inputs[0].value = dateTopBorder;
	inputs[1].value = dateBottomBorder;
}

/**
 * Displays the custom date filter menu.
 */
function showCustomDateFilterMenu() {

	id('date-filter-menu-cont').classList.add('show');
	
	let inputs = id('date-filter-menu-cont').getElementsByClassName('field-date');
			
	id('submit-date-filter').onclick = () => {
		if ( (new Date(inputs[0].value)) > (new Date(inputs[1].value)) ) {

			sessionStorage.setItem('custom-date-top-border', inputs[0].value);
			sessionStorage.setItem('custom-date-bottom-border', inputs[1].value);

			hideCustomDateFilterMenu();

			// update data in expenses/incomes, history and pie chart widgets
			updateWidgetsData(0, 0, 1, [0, 1], 1);
			
		} else
			animateEmptyFieldError(inputs[1]);
	}
}

/**
 * Hides the custom date filter menu.
 */
function hideCustomDateFilterMenu() {
	id('date-filter-menu-cont').classList.remove('show');
}

/**
 * Uploads records based on the custom date period.
 */
function uploadRecordsByCustomPeriod() {
	let inputs = id('date-filter-menu').getElementsByClassName('field-date');
	
	let account = id('accounts').getAttribute('data-accountnum'),
		type = id('history-type-nav').getAttribute('data-history-type');
	let date_border_from = new Date(inputs[0].value),
		date_border_to = new Date(inputs[1].value),
		record_date;
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--) {

		record_date = new Date(getRecordDateFormat(record_num));
		
		if (record_date < date_border_from && record_date > date_border_to) {
			if (
				(type === 'all' || localStorage.getItem(`RP${record_num}`) === type) &&
				localStorage.getItem(`RA${record_num}`) === account
			)
				addRecordToHistory(record_num, localStorage.getItem(`RA${record_num}`), 'beforeend');
		} else if (record_date < date_border_to)
			break;
		
	}
}

/**
 * Uploads records to the history widget with an animated reload effect.
 */
function uploadRecordsToHistoryAnimated() {

	id('history-reloading-background').classList.add('history-reloading-background-show');
	if (id('history-empty').classList.contains('visible'))
		id('history-empty').classList.remove('visible');
	
	setTimeout(() => {
		id('history').innerHTML = null;
		uploadRecordsToHistory();
		id('history-reloading-background').classList.remove('history-reloading-background-show');
	}, 390);
}

/**
 * Retrieves the formatted date of a record based on its number.
 *
 * @param {number} n - The record number.
 *
 * @returns {string} The formatted date string.
 */
function getRecordDateFormat(n) {
	let date = localStorage.getItem(`RD${n}`);

	return date.charAt(0) + date.charAt(1) + date.charAt(2) + date.charAt(3) + '-' +
		date.charAt(4) + date.charAt(5) + '-' +
		date.charAt(6) + date.charAt(7) + 'T' +
		date.charAt(8) + date.charAt(9) + ':' +
		date.charAt(10) + date.charAt(11) + ':00';
}

/**
 * Sets up the click event on a record for editing.
 *
 * @param {HTMLElement} record - The record element to set up the click event for.
 */
function setUpClickOnRecord(record) {

	let record_num = Number(record.getAttribute('data-recordnum')),
		windowEl_cont = id('make-record-window-cont'),
		windowEl = id('make-record-window'),
		clickEl = record,
		record_above_category = Number(localStorage.getItem(`RB${record_num}`));
	
	disableScrolling();
	// upload record data to edit record window
	if ( !(localStorage.getItem(`RB${record_num}`)) || record_above_category !== 0 )
		prepareEditRecordWindow(record_num);
	else if (record_above_category === 0)
		prepareEditTransferWindow(record_num);

	let top_position = openFloatingWindow(clickEl, windowEl_cont, windowEl, calculateScaleX(clickEl, windowEl_cont));
	windowEl.setAttribute('data-top-position-x', top_position.x.toString());
	windowEl.setAttribute('data-top-position-y', top_position.y.toString());

	// set up click on remove record button
	setUpClickOnRepeatRecordButton(clickEl, windowEl_cont, windowEl);

	// set up click on remove record button
	id('remove-record').onclick = () => {
		if (!(localStorage.getItem(`RB${record_num}`)) || record_above_category !== 0)
			removeRecord(record_num, true);
		else if (record_above_category === 0)
			removeTransfer(record_num);
		closeEditRecordWindowByReconnectMethod (clickEl, windowEl_cont, windowEl);
	}

	// set up click on close area
	windowEl_cont.firstElementChild.onclick = () => {
		enableScrolling();
		closeFloatingWindow(clickEl, windowEl_cont, windowEl);
		setTimeout(resetMakeTransferWindowData, 390);
		setTimeout(resetMakeRecordWindowData, 390);
	}

}

/**
 * Prepares the edit record window with data from the specified record number.
 *
 * @param {number} recordNum - The record number to edit.
 */
function prepareEditRecordWindow(recordNum) {

	// set 'old' attribute, set record number as attribute
	id('make-record-window').setAttribute('data-status', 'old');
	id('make-record-window').setAttribute('data-recordnum', recordNum.toString());
	// upload record type to change record type bar
	id('record-types').setAttribute('data-record-type', localStorage.getItem(`RP${recordNum}`));
	// hide fields for make record window and make transfer window
	id('make-record-window').classList.remove('make-record-status');
	id('make-record-window').classList.add('edit-record-status');
	// upload record date
	id('make-record-date').value = getRecordDateFormat(recordNum);
	// upload record note
	let note = localStorage.getItem(`RT${recordNum}`);
	if (note) {
		id('make-record-note').value = note;
		adaptInputLengthExplicitly(id('make-record-note'));
	}
	// upload record account
	let account_num = Number(localStorage.getItem(`RA${recordNum}`));
	id('make-record-account').innerHTML = constructAccountEl(account_num);
	id('make-record-account').setAttribute('data-accountnum', account_num.toString());
	// upload record amount
	id('make-record-amount').value = localStorage.getItem(`RU${recordNum}`);
	adaptInputLengthExplicitly(id('make-record-amount'));
	// upload category to edit record window
	uploadCategoryToEditRecordWindow(recordNum);
	// upload save record button title
	id('make-record-save-button').value = getStrings(localStorage.getItem('L')).save;
}

/**
 * Prepares the edit transfer window with data from the specified record number.
 *
 * @param {number} recordNum - The record number to edit.
 */
function prepareEditTransferWindow(recordNum) {
	let transfer_pair = getTransfersPairNums(recordNum);

	// set 'old' attribute, set record number as attribute
	id('make-record-window').setAttribute('data-status', 'old');
	id('make-record-window').setAttribute('data-recordnum', recordNum.toString());
	// upload record type to change record type bar
	id('record-types').setAttribute('data-record-type', localStorage.getItem(`RP${recordNum}`));
	// hide fields for make record window and make transfer window
	id('make-record-window').classList.remove('make-record-status');
	id('make-record-window').classList.add('edit-transfer-status');

	// upload record date
	id('make-record-date').value = getRecordDateFormat(recordNum);
	// upload 'transfer to account' field's title
	uploadAccountFieldTitle('transfer');
	// upload accounts
	uploadAccountsToEditTransferWindow(transfer_pair);
	
	// upload amount
	id('make-record-amount').value = localStorage.getItem(`RU${transfer_pair.from}`);
	adaptInputLengthExplicitly(id('make-record-amount'));
	// upload final amount
	id('make-transfer-final-amount').value = localStorage.getItem(`RU${transfer_pair.to}`);
	adaptInputLengthExplicitly(id('make-transfer-final-amount'));
	// upload rate to start rate and final rate fields
	id('make-transfer-start-rate').value = localStorage.getItem(`RR${transfer_pair.from}`);
	adaptInputLengthExplicitly(id('make-transfer-start-rate'));
	id('make-transfer-final-rate').value = localStorage.getItem(`RR${transfer_pair.to}`);
	adaptInputLengthExplicitly(id('make-transfer-final-rate'));
	// set up listener to adapt final amount by rate
	setUpListenerToAdaptFinalAmountByRate();
	adaptFinalAmountByRate();
	// upload transfer button title
	id('make-transfer-button').value = getStrings(localStorage.getItem('L')).save;
}

/**
 * Gets the pair of record numbers for transfer records.
 *
 * @param {number} recordNum - The record number of the transfer.
 *
 * @returns {object} An object containing 'from' and 'to' record numbers.
 */
function getTransfersPairNums(recordNum) {
	let record_num_pair = {
		from: 0,
		to: 0
	};

	// decide which account is 'from' and which is 'to'
	if (localStorage.getItem(`RP${recordNum}`) === '-') {
		record_num_pair.from = recordNum;
		record_num_pair.to = recordNum + 1;
	} else {
		record_num_pair.from = recordNum - 1;
		record_num_pair.to = recordNum;
	}

	return record_num_pair;
}

/**
 * Uploads accounts to the edit transfer window based on the record numbers pair.
 *
 * @param {object} recordNumPair - An object containing 'from' and 'to' record numbers.
 */
function uploadAccountsToEditTransferWindow(recordNumPair) {
	let account_from_num = localStorage.getItem(`RA${recordNumPair.from}`),
		account_to_num = localStorage.getItem(`RA${recordNumPair.to}`);
	
	// upload account to 'from account' field
	id('make-record-account').innerHTML = constructAccountEl(Number(account_from_num));
	id('make-record-account').setAttribute('data-accountnum', account_from_num);
		
	// upload account to 'to account' field
	id('make-transfer-to-account').innerHTML = constructAccountEl(Number(account_to_num));
	id('make-transfer-to-account').setAttribute('data-accountnum', account_to_num);
}

/**
 * Uploads category data to the edit record window based on the specified record number.
 *
 * @param {number} recordNum - The record number to edit.
 */
function uploadCategoryToEditRecordWindow(recordNum) {
	let category_button = id('make-record-category');

	if (localStorage.getItem(`RP${recordNum}`) === '-') {
		
		id('record-type-expense').classList.add('active-input-cont');
		id('record-type-income').classList.remove('active-input-cont');
		
		category_button.firstElementChild.innerHTML = SUBCATEGORY_ICONS[localStorage.getItem(`RC${recordNum}`)][localStorage.getItem(`RS${recordNum}`)];
		category_button.lastElementChild.value = subcategories_titles[localStorage.getItem(`RC${recordNum}`)][localStorage.getItem(`RS${recordNum}`)];
		
	} else if (localStorage.getItem(`RP${recordNum}`) === '+') {
		
		id('record-type-expense').classList.remove('active-input-cont');
		id('record-type-income').classList.add('active-input-cont');
		
		category_button.firstElementChild.innerHTML = CATEGORY_INCOME_ICONS[localStorage.getItem(`RC${recordNum}`)];
		category_button.lastElementChild.value = categories_income_titles[localStorage.getItem(`RC${recordNum}`)];
		
	}
	
	category_button.setAttribute('data-categorynum', localStorage.getItem(`RC${recordNum}`));
	category_button.setAttribute('data-subcategorynum', localStorage.getItem(`RS${recordNum}`));
}


/**
 * Sets up the click event on the repeat record button.
 *
 * @param {HTMLElement} clickEl - Make record button element.
 * @param {HTMLElement} windowElCont - The container of the edit record window.
 * @param {HTMLElement} windowEl - The edit record window element.
 */
function setUpClickOnRepeatRecordButton(
	clickEl, windowElCont, windowEl
) {
	id('repeat-record').onclick = () => {

		// add attribute 'new' and 'record number' attribute to make record window
		windowEl.setAttribute('data-status', 'repeat');
		windowEl.setAttribute('data-recordnum', (Number(localStorage.getItem('RCount')) + 1).toString());
		// upload current date
		id('make-record-date').value = getDateFormat(new Date());

		if (windowEl.classList.contains('edit-record-status'))
			onSaveRecordButton(clickEl, windowElCont, windowEl);
		else if (windowEl.classList.contains('edit-transfer-status'))
			saveTransfer(clickEl, windowElCont, windowEl);
	}	
}


/**
 * Removes a record from storage based on its record number and updates the records.
 *
 * @param {number} recordNum - The record number to remove.
 * @param {boolean} returnRecordAmountToAccount - Whether to return the record amount to balance.
 */
function removeRecord(recordNum, returnRecordAmountToAccount) {
	
	if (returnRecordAmountToAccount) returnRecordAmountToBalance(recordNum);

	for (let a = recordNum; a <= Number(localStorage.getItem('RCount')); a++)
	
		if ( a < Number(localStorage.getItem('RCount')) )
			// move record from to
			moveRecord(a + 1, a);

		else if ( a === Number(localStorage.getItem('RCount')) ) {

			if (!localStorage.getItem(`RR${a}`))
				removeRecordFromStorage(a);
			else removeTransferFromStorage(a);
		}
}

/**
 * Removes a transfer record from storage based on its record number and updates the records.
 *
 * @param {number} recordNum - The record number of the transfer to remove.
 */
function removeTransfer(recordNum) {
	let transfer_pair = getTransfersPairNums(recordNum);
	
	returnRecordAmountToBalance(transfer_pair.from);
	returnRecordAmountToBalance(transfer_pair.to);

	for (let a = transfer_pair.from; a < Number(localStorage.getItem('RCount')); a++)

		if ( a + 1 < Number(localStorage.getItem('RCount')) )
			// move record from to
			moveRecord(a + 2, a);

		else if ( a + 1 === Number(localStorage.getItem('RCount')) ) {

			if (!localStorage.getItem(`RR${a + 1}`))
				removeRecordFromStorage(a + 1);
			else removeTransferFromStorage(a + 1);

			if (!localStorage.getItem(`RR${a}`))
				removeRecordFromStorage(a);
			else removeTransferFromStorage(a);
		}
}

/**
 * Returns the record amount to the account balance based on the record number.
 *
 * @param {number} recordNum - The record number.
 */
function returnRecordAmountToBalance(recordNum) {

	let type = localStorage.getItem(`RP${recordNum}`);
	let amount = Number(localStorage.getItem(`RU${recordNum}`));
	let accountId = Number(localStorage.getItem(`RA${recordNum}`));
	let balance = Number(localStorage.getItem(`ABalance${accountId}`));

	if (type === '-') localStorage.setItem(`ABalance${accountId}`, (balance + amount).toString());
	else if (type === '+') localStorage.setItem(`ABalance${accountId}`, (balance - amount).toString());

	setTimeout(() => {
		updateAccountInfoInCont(accountId, 'Balance', id('accounts'));
	}, 400);
}

/**
 * Gets the message to show in an empty history based on the period and language.
 *
 * @param {string} period - The date range period.
 * @param {string} lang - The language.
 *
 * @returns {string} The message to display.
 */
function getShowMessageInEmptyHistoryByLang(period, lang) {
	if (period === DATE_RANGE_ENUM.this_month) {
		return getStrings(lang).no_records_this_month_message;
	} else if (period === DATE_RANGE_ENUM.last_month) {
		return getStrings(lang).no_records_last_month_message;
	} else if (period === DATE_RANGE_ENUM.custom) {
		return getStrings(lang).no_records_this_period_message;
	}
}


/**
 * Closes the edit record window with the reconnecting animation.
 *
 * @param {HTMLElement} clickEl - The element triggering the click event.
 * @param {HTMLElement} windowElCont - The container of the edit record window.
 * @param {HTMLElement} windowEl - The edit record window element.
 */
function closeEditRecordWindowByReconnectMethod(
	clickEl, windowElCont, windowEl
) {

	reconnectFloatingWindow(clickEl, id('history'), windowElCont, windowEl);
	closeReconnectedFloatingWindow(windowElCont, windowEl);
	uploadRecordsToHistoryAnimated();

	setTimeout(() => {
		resetMakeTransferWindowData();
		resetMakeRecordWindowData();
		// update all widgets
		updateWidgetsData(0, 1, 1, [0, 0], 1);
		enableScrolling();
	}, 390);
}





id('enable-history-scroll-button').onclick = function() {

	changeChangeScrollButtonStatus(this);
	changeWidgetScroll(id('history'));
}
id('enable-categories-details-scroll-button').onclick = function() {

	changeChangeScrollButtonStatus(this);
	changeWidgetScroll(id('pie-chart-categories-details'));
}

/**
 * Changes the status of the scroll button, enabling or disabling scrolling.
 *
 * @param {HTMLElement} el - The HTML element representing the scroll button.
 */
function changeChangeScrollButtonStatus(el) {

	let holding_el = freezeWidthOfEl(el);

	setTimeout(() => {
		
		if (el.classList.contains('active')) {
			el.classList.remove('active');
			el.value = getStrings(localStorage.getItem('L')).disable_scrolling;
		} else {
			el.classList.add('active');
			el.value = getStrings(localStorage.getItem('L')).enable_scrolling;
		}

		updateWidthOfEl(el, holding_el);
	}, 200);
}

/**
 * Changes the scroll status of a widget.
 *
 * @param {HTMLElement} el - The HTML element representing the widget.
 */
function changeWidgetScroll(el) {

	animateClickOnHistory(el);

	setTimeout(() => {
		if (el.classList.contains('widget-scroll'))
			el.classList.remove('widget-scroll');
		else el.classList.add('widget-scroll');
	}, 200);
}

/**
 * Animates a click effect on the history element.
 *
 * @param {HTMLElement} el - The history widget html element.
 */
function animateClickOnHistory(el) {
	el.style.transform = 'scale(0.99)';
	setTimeout(() => { el.style.transform = 'scale(1)'; }, 100);
}





/**
 * Freezes the width of the element to maintain its width during animation.
 *
 * @param {HTMLElement} el - The HTML element to freeze the width.
 *
 * @returns {HTMLElement} The placeholder element used to hold the width.
 */
function freezeWidthOfEl(el) {
	let	holding_el = id('test-p');

	el.style.width = el.clientWidth + 'px';
	el.style.paddingLeft = '0';
	el.style.paddingRight = '0';
	el.style.color = 'rgba(0, 0, 0, 0)';

	holding_el.style.display = 'flex';
	holding_el.style.fontSize = window.getComputedStyle(el, null).getPropertyValue('font-size');
	holding_el.style.fontWeight = window.getComputedStyle(el, null).getPropertyValue('font-weight');

	return holding_el;
}

/**
 * Updates the width of the element after animation to the original size.
 *
 * @param {HTMLInputElement} el - The HTML element to update the width.
 * @param {HTMLElement} holderEl - The placeholder element holding the width.
 */
function updateWidthOfEl(el, holderEl) {

	if (el.value) {
		holderEl.innerText = el.value;
	} else {
		holderEl.innerText = el.innerText;
	}

	el.style.width = holderEl.clientWidth + 'px';
	el.style.color = null;
	el.style.paddingLeft = null;
	el.style.paddingRight = null;

	holderEl.style.display = 'none';
}





/**
 * Uploads today's statistics to the today stats widget.
 */
function uploadTodayStats() {
	
	let descriptionEl = id('today-stats-description'),
		account_num = id('accounts').getAttribute('data-accountnum');

	descriptionEl.style.opacity = '0';
	
	setTimeout(() => {

		uploadTodayStatsData(
			descriptionEl,
			localStorage.getItem('L'),
			account_num,
			getTodayStatsAmount(account_num),
			localStorage.getItem('ACurrency' + account_num)
		);
			
		descriptionEl.style.opacity = '1';
	}, 300);
}

/**
 * Uploads today's statistics data to the specified element.
 *
 * @param {HTMLElement} descriptionEl - The HTML element to display the statistics description.
 * @param {string} lang - The language code.
 * @param {string} accountNum - The account number.
 * @param {number} todayAmount - The amount spent today.
 * @param {string} accountCurrency - The currency of the account.
 */
function uploadTodayStatsData(
	descriptionEl, lang, accountNum, todayAmount, accountCurrency
) {
	if (todayAmount === 0) {
		descriptionEl.innerText = getStrings(lang).greetings_no_expenses_message;
	} else if (
		!Number(localStorage.getItem(`AWB${accountNum}`)) &&
		Number(localStorage.getItem(`ABalance${accountNum}`)) >= 0
	) {
		let default_account_balance = todayAmount + Number(localStorage.getItem(`ABalance${accountNum}`));
		if (default_account_balance === 0) default_account_balance = 1;

		let today_percent_amount = Number(
			( (100 / default_account_balance) * todayAmount ).toFixed(2)
		);

		showTodayStatsMessageSomeExpenses(
			descriptionEl, lang, getReadableNumber(Number(todayAmount.toFixed(2))),
			accountCurrency, today_percent_amount, default_account_balance.toFixed(2)
		);
	} else {
		showTodayStatsMessageSomeExpenses(
			descriptionEl, lang, getReadableNumber(Number(todayAmount.toFixed(2))),
			accountCurrency, 0, ""
		);
	}
}

/**
 * Retrieves the amount spent today for the specified account.
 *
 * @param {string} account - The account number.
 *
 * @returns {number} The amount spent today.
 */
function getTodayStatsAmount(account) {

	let amount = 0,
		compare_date = new Date();

	compare_date.setHours(0);
	compare_date.setMinutes(0);
	compare_date.setSeconds(0);
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--)
		if ( (getRecordDateFormat(record_num)) >= getDateFormat(compare_date) ) {
			if (
				(localStorage.getItem(`RP${record_num}`) === '-') &&
				localStorage.getItem(`RA${record_num}`) === account
			)
				amount += Number(localStorage.getItem(`RU${record_num}`));
		} else break;

	return Number(amount.toFixed(2));
}

/**
 * Retrieves the title for today's statistics based on the current time.
 *
 * @param {string} lang - The language code.
 *
 * @returns {string} The appropriate greeting based on the time of the day.
 */
function getTodayStatsTitle(lang) {
	let time = (new Date()).getHours();

	if (6 <= time && time <= 12) {
		return getStrings(lang).good_morning;
	} else if (13 <= time && time <= 17) {
		return getStrings(lang).good_afternoon;
	} else {
		return getStrings(lang).good_evening;
	}
}

/**
 * Displays the message for today's statistics with some expenses.
 *
 * @param {HTMLElement} el - The HTML element to display the message.
 * @param {string} lang - The language code.
 * @param {string} todayFormattedAmount - The amount spent today.
 * @param {string} accountCurrency - The currency of the account.
 * @param {number} todayPercentAmount - The percentage of today's amount relative to the total balance.
 * @param {string} defaultBalance - The default balance.
 */
function showTodayStatsMessageSomeExpenses(
	el, lang, todayFormattedAmount,
	accountCurrency, todayPercentAmount, defaultBalance
) {

	let today_amount_by_percent = "";
	if (todayPercentAmount) {
		if (lang === LANG_ENUM.en)
			today_amount_by_percent = `, or <span class="underlined-text">${todayPercentAmount}%</span> of the total balance of this account (${defaultBalance} ${accountCurrency})`;
		else if (lang === LANG_ENUM.cz)
			today_amount_by_percent = `, was <span class="underlined-text">${todayPercentAmount}%</span> des Gesamtsaldos dieses Kontos entspricht (${defaultBalance} ${accountCurrency})`;
		else if (lang === LANG_ENUM.de)
			today_amount_by_percent = `, neboli <span class="underlined-text">${todayPercentAmount}%</span> od celkového zůstatku tohoto účtu (${defaultBalance} ${accountCurrency})`;
		else if (lang === LANG_ENUM.ru)
			today_amount_by_percent = `, или же <span class="underlined-text">${todayPercentAmount}%</span> от общего баланса этого счёта (${defaultBalance} ${accountCurrency})`;
		else if (lang === LANG_ENUM.ua)
			today_amount_by_percent = `, або ж <span class="underlined-text">${todayPercentAmount}%</span> від загального балансу цього рахунку (${defaultBalance} ${accountCurrency})`;
	}

	if (lang === LANG_ENUM.en)
		el.innerHTML = `Today you spent <span class="underlined-text">${todayFormattedAmount} ${accountCurrency}</span>${today_amount_by_percent}`;
	else if (lang === LANG_ENUM.cz)
		el.innerHTML = `Dnes jste utratil(-a) <span class="underlined-text">${todayFormattedAmount} ${accountCurrency}</span>${today_amount_by_percent}`;
	else if (lang === LANG_ENUM.de)
		el.innerHTML = `Heute Sie haben bereits <span class="underlined-text">${todayFormattedAmount} ${accountCurrency}</span> ausgegeben${today_amount_by_percent}`;
	else if (lang === LANG_ENUM.ru)
		el.innerHTML = `Сегодня вы потратили <span class="underlined-text">${todayFormattedAmount} ${accountCurrency}</span>${today_amount_by_percent}`;
	else if (lang === LANG_ENUM.ua)
		el.innerHTML = `Сьогодні ви витратили <span class="underlined-text">${todayFormattedAmount} ${accountCurrency}</span>${today_amount_by_percent}`;
}





/**
 * Uploads expenses and income statistics for the specified period and language.
 */
function uploadExpensesIncomesStats() {

	// upload title
	uploadExpensesIncomesStatsTitle(
		id('incomes-expenses-month-title'),
		uiState.date_range,
		localStorage.getItem('L')
	);

	// upload incomes and expenses statistic
	
	let incomes_amount = getTotalAmountOfExactlyTypeByCustomPeriod(
		'+', id('accounts').getAttribute('data-accountnum'), 0
	);
	let expenses_amount = getTotalAmountOfExactlyTypeByCustomPeriod(
		'-', id('accounts').getAttribute('data-accountnum'), 0
	);

	let total_amount = incomes_amount + expenses_amount;

	if (total_amount === 0) total_amount = 1;
	let incomes_percent = (100 / total_amount) * incomes_amount;
	let expenses_percent = (100 / total_amount) * expenses_amount;
	
	visualizeExpensesIncomesDataInWidget(
		incomes_percent, expenses_percent,
		incomes_amount.toFixed(2), expenses_amount.toFixed(2)
	);
}

/**
 * Uploads the title for expenses and income statistics based on the specified period and language.
 *
 * @param {HTMLElement} el - The HTML element to display the title.
 * @param {string} period - The period for which statistics are displayed.
 * @param {string} lang - The language code.
 */
function uploadExpensesIncomesStatsTitle(el, period, lang) {

	el.style.opacity = '0';
	
	setTimeout(() => {
		if (period === DATE_RANGE_ENUM.this_month) {
			el.innerText = getStrings(lang).this_month_title;
		} else if (period === DATE_RANGE_ENUM.last_month) {
			el.innerText = getStrings(lang).last_month_title;
		} else if (period === DATE_RANGE_ENUM.custom) {
			let inputs = id('date-filter-menu').getElementsByClassName('field-date');
			el.innerText = `${getStrings(lang).from} ${getReadableDateByFormatDayMonthYear(inputs[0].value)}
				${getStrings(lang).to_time_meaning} ${getReadableDateByFormatDayMonthYear(inputs[1].value)}`;
		}
		el.style.opacity = '1';
	}, 300);
}

/**
 * Converts a date to a readable format (day.month.year).
 *
 * @param {string} date - The date to be converted. Date has to be in format, accessible for the new Date() method.
 *
 * @returns {string} The readable date format.
 */
function getReadableDateByFormatDayMonthYear(date) {
	let formattedDate = new Date(date);
	return `${formattedDate.getDate()}.${formattedDate.getMonth() + 1}.${formattedDate.getFullYear()}`;
}

/**
 * Retrieves the total amount of the specified type for the custom period and account.
 *
 * @param {string} type - The type of record ('+' for income, '-' for expense).
 * @param {string} account - The account number.
 * @param {number} amount - The initial amount (accumulative).
 *
 * @returns {number} The total amount of records of the specified type.
 */
function getTotalAmountOfExactlyTypeByCustomPeriod(type, account, amount) {

	let inputs = id('date-filter-menu').getElementsByClassName('field-date');
	
	let date_border_from = new Date(inputs[0].value),
		date_border_to = new Date(inputs[1].value),
		record_date;
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--) {

		record_date = new Date(getRecordDateFormat(record_num));
		
		if (record_date < date_border_from && record_date > date_border_to) {
			if (
				localStorage.getItem(`RP${record_num}`) === type &&
				localStorage.getItem(`RA${record_num}`) === account
			)
				amount += Number(localStorage.getItem(`RU${record_num}`));
		} else if (record_date < date_border_to)
			break;
		
	}

	return amount;
}

/**
 * Visualizes expenses and income data in the widget.
 *
 * @param {number} incomesPercent - The percentage of income relative to the total amount.
 * @param {number} expensesPercent - The percentage of expenses relative to the total amount.
 * @param {string} incomesAmount - The total amount of incomes.
 * @param {string} expensesAmount - The total amount of expenses.
 */
function visualizeExpensesIncomesDataInWidget(
	incomesPercent, expensesPercent, incomesAmount, expensesAmount
) {

	id('incomes-column').style.width = incomesPercent + '%';
	id('expenses-column').style.width = expensesPercent + '%';
	
	let titles = id('stats-column').getElementsByClassName('stats-column-title');
	
	titles[0].style.opacity = '0';
	titles[1].style.opacity = '0';
	id('incomes-expenses-total-cont').style.opacity = '0';
	
	let total = incomesAmount - expensesAmount;
	let currency = localStorage.getItem('ACurrency' + id('accounts').getAttribute('data-accountnum'));
	setTimeout(() => {

		id('incomes-column-percent').innerText = incomesPercent.toFixed(2) + '%';
		id('expenses-column-percent').innerText = expensesPercent.toFixed(2) + '%';
		
		id('incomes-column-amount').innerText = `+ ${getReadableNumber(Number(incomesAmount))} ${currency}`;
		id('expenses-column-amount').innerText = `- ${getReadableNumber(Number(expensesAmount))} ${currency}`;

		if (total < 0)
			id('incomes-expenses-total').innerText = `- ${getReadableNumber( Number((Math.abs(total)).toFixed(2)) )} ${currency}`;
		else
			id('incomes-expenses-total').innerText = `+ ${getReadableNumber( Number(total.toFixed(2)) )} ${currency}`;
		
		titles[0].style.opacity = '1';
		titles[1].style.opacity = '1';
		id('incomes-expenses-total-cont').style.opacity = '1';
	}, 300);
}





/**
 * Calculates the inner scale based on the parent and child elements.
 *
 * @param {HTMLElement} parent - The parent element.
 * @param {HTMLElement} child - The child element.
 *
 * @returns {number} The calculated inner scale.
 */
function calculateInnerScale(parent, child) {
	return ( (parent.clientWidth - ((parseInt(window.getComputedStyle(parent).paddingLeft)) * 2)) / child.clientWidth );
}

/**
 * Fits the size of the pie chart based on the inner scale.
 */
function fitPieChartSize() {

	let scaleX = calculateInnerScale(id('pie-chart-cont'), id('pie-chart'));
	id('pie-chart').setAttribute('scaleX', scaleX.toString());
	id('pie-chart').style.transform = `scale(${scaleX})`;
}

/**
 * Updates the pie chart.
 */
function updatePieChart() {
	
	id('pie-chart').style.transform = `scale(0)`;
	let scaleX = id('pie-chart').getAttribute('scaleX');
	
	setTimeout(() => {
		uploadDataToPieChart();
		if(id('pie-chart-categories-details').firstElementChild)
			id('pie-chart').style.transform = `scale(${scaleX})`;
	}, 350);
}

/**
 * Uploads data to the pie chart.
 */
function uploadDataToPieChart() {

	let results = getCategoriesStats();

	let type = id('history-type-nav').getAttribute('data-history-type');
	if (type === 'all') type = '-';
	uploadCategoriesToDetailPieChartPreview(
		type,
		id('accounts').getAttribute('data-accountnum'),
		results
	);
	if (type === '-')
		setUpClickOnDetailCategoriesPreview();

	drawPieChart(results);
	uploadAmountToPieChart();
}

/**
 * Retrieves categories statistics based on the selected type and account.
 *
 * @returns {Array} Array containing the statistics for each category.
 */
function getCategoriesStats() {

	let account = id('accounts').getAttribute('data-accountnum'),
		type = id('history-type-nav').getAttribute('data-history-type');
	if (type === 'all') type = '-';
	
	return getCategoriesStatsByCustomPeriod(type, account, getArrayForStatsResults(type));
}

/**
 * Generates an array to store the statistics results for each category.
 *
 * @param {string} type - The type of history ('+' for income, '-' for expense).
 *
 * @returns {Array} The array for storing statistics results.
 */
function getArrayForStatsResults(type) {
	let results,
		theme = localStorage.getItem('T');

	if (type === '-') {
		if (theme === 'l')
			results = [
				/* 1 */ {total: 0, color: "#97a97c"},
				/* 2 */ {total: 0, color: "#9a8c98"},
				/* 3 */ {total: 0, color: "#f2e9e4"},
				/* 4 */ {total: 0, color: "#a26769"},
				/* 5 */ {total: 0, color: "#6d2e46"},
				/* 6 */ {total: 0, color: "#4a4e69"},
				/* 7 */ {total: 0, color: "#006494"},
				/* 8 */ {total: 0, color: "#c9ada7"},
				// /* 9 */ {total: 0, color: "#709775"},
				/* 9 */ {total: 0, color: "#db924d"},
				/* 10 */ {total: 0, color: "#22223b"}
			];
		else if (theme === 'b' || theme === 'd')
			results = [
				/* 1 */ {total: 0, color: "#798763"},
				/* 2 */ {total: 0, color: "#7c717a"},
				/* 3 */ {total: 0, color: "#c2bbb6"},
				/* 4 */ {total: 0, color: "#825354"},
				/* 5 */ {total: 0, color: "#572538"},
				/* 6 */ {total: 0, color: "#3c3e54"},
				/* 7 */ {total: 0, color: "#075076"},
				/* 8 */ {total: 0, color: "#a28a85"},
				// /* 9 */ {total: 0, color: "#59795e"},
				/* 9 */ {total: 0, color: "#db924d"},
				/* 10 */ {total: 0, color: "#1b1b2f"}
			];
	}
	else if (type === '+') {
		if (theme === 'l')
			results = [
				/* 1 */ {total: 0, color: "#97a97c"},
				/* 2 */ {total: 0, color: "#4a4e69"},
				/* 3 */ {total: 0, color: "#9a8c98"},
				/* 4 */ {total: 0, color: "#ece2d0"},
				/* 5 */ {total: 0, color: "#c9ada7"},
				/* 6 */ {total: 0, color: "#006494"},
				/* 7 */ {total: 0, color: "#6d2e46"},
				/* 8 */ {total: 0, color: "#a26769"},
				// /* 9 */ {total: 0, color: "#709775"}
				/* 9 */ {total: 0, color: "#db924d"}
			];
		else if (theme === 'b' || theme === 'd')
			results = [
				/* 1 */ {total: 0, color: "#798763"},
				/* 2 */ {total: 0, color: "#3b3d52"},
				/* 3 */ {total: 0, color: "#796e77"},
				/* 4 */ {total: 0, color: "#bdb6a6"},
				/* 5 */ {total: 0, color: "#a28a85"},
				/* 6 */ {total: 0, color: "#075076"},
				/* 7 */ {total: 0, color: "#572538"},
				/* 8 */ {total: 0, color: "#825354"},
				// /* 9 */ {total: 0, color: "#59795e"}
				/* 9 */ {total: 0, color: "#db924d"}
			];
	}

	return results;
}

/**
 * Retrieves category statistics for the custom period based on type and account.
 *
 * @param {string} type - The type of records to consider ('-', '+').
 * @param {string} account - The account number.
 * @param {Array} results - The array to store the category statistics.
 *
 * @returns {Array} The updated array of category statistics.
 */
function getCategoriesStatsByCustomPeriod(type, account, results) {

	let inputs = id('date-filter-menu').getElementsByClassName('field-date');
	
	let date_border_from = new Date(inputs[0].value),
		date_border_to = new Date(inputs[1].value),
		record_date;
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--) {

		record_date = new Date(getRecordDateFormat(record_num));
		
		if (record_date < date_border_from && record_date > date_border_to) {
			if (
				localStorage.getItem(`RP${record_num}`) === type &&
				localStorage.getItem(`RA${record_num}`) === account
			)
				results[localStorage.getItem(`RC${record_num}`)].total += Number(localStorage.getItem(`RU${record_num}`));
		} else if (record_date < date_border_to)
			break;
		
	}

	return results;
}

/**
 * Uploads categories to the detailed pie chart preview along with their details.
 *
 * @param {string} type - The type of records to consider ('-', '+').
 * @param {string} account - The account number.
 * @param {Array} results - The array of category statistics.
 */
function uploadCategoriesToDetailPieChartPreview(type, account, results) {

	id('pie-chart-categories-details').innerHTML = null;

	for (let a = 0; results[a]; a++)
		if (results[a].total !== 0)
			uploadCategoryToDetailPieChartPreview(a, results[a].total, results[a].color, type, account);

	if (!(id('pie-chart-categories-details').firstElementChild))
		id('pie-chart-categories-details').classList.add('hide');
	else if (id('pie-chart-categories-details').classList.contains('hide'))
		id('pie-chart-categories-details').classList.remove('hide');
}

/**
 * Uploads a single category to the detailed pie chart preview.
 *
 * @param {number} unitNum - The category unit number.
 * @param {number} amount - The total amount for the category.
 * @param {string} color - The color associated with the category.
 * @param {string} type - The type of records to consider ('-', '+').
 * @param {string} account - The account number.
 */
function uploadCategoryToDetailPieChartPreview(
	unitNum, amount, color, type, account
) {
	let el;
	
	if (type === '-')
		el = constructCategoryPreviewEl(
			CATEGORY_EXPENSE_ICONS[unitNum],
			categories_expense_titles[unitNum],
			unitNum, type, amount,
			localStorage.getItem(`ACurrency${account}`)
		);
	else if (type === '+')
		el = constructCategoryPreviewEl(
			CATEGORY_INCOME_ICONS[unitNum],
			categories_income_titles[unitNum],
			unitNum, type, amount,
			localStorage.getItem(`ACurrency${account}`)
		);

	id('pie-chart-categories-details').insertAdjacentHTML('beforeend', el);
	id('pie-chart-categories-details').lastElementChild.style.borderLeft = `4px solid ${color}`;
	id('pie-chart-categories-details').lastElementChild.style.borderRight = `4px solid ${color}`;
}

/**
 * Constructs HTML code for a category preview element.
 *
 * @param {string} icon - The icon for the category.
 * @param {string} title - The title of the category.
 * @param {number} categoryNum - The category number.
 * @param {string} type - The type of records to consider ('-', '+').
 * @param {number} amount - The total amount for the category.
 * @param {string} accountCurrency - The currency associated with the account.
 *
 * @returns {string} The HTML code for the category preview element.
 */
function constructCategoryPreviewEl(
	icon, title, categoryNum, type, amount, accountCurrency
) {
	return `<div class="category-details" data-categorynum="${categoryNum}">
				<div class="category">
					<div>${icon}</div>
					<h3>${title}</h3>
				</div>
				<div class="category-amount">
					<h3>${type}</h3>
					<h3>${getReadableNumber( Number(amount.toFixed(2)) )}</h3>
					<h3>${accountCurrency}</h3>
				</div>
			</div>`;
}

/**
 * Sets up click functionality for detailed categories preview.
 */
function setUpClickOnDetailCategoriesPreview() {

	for (let el of id('pie-chart-categories-details').getElementsByClassName('category-details')) {
		el.onclick = function() {

			let windowEl_cont = id('subcategories-detail-view-cont'),
				windowEl = id('subcategories-detail-view-cont').lastElementChild,
				clickEl = this;
			
			windowEl.firstElementChild.firstElementChild.innerHTML = clickEl.firstElementChild.innerHTML;
				
			windowEl.lastElementChild.innerHTML = null;
			uploadSubcategoriesToDetailCategoryPreview(clickEl.getAttribute('data-categorynum'), windowEl.lastElementChild);

			disableScrolling();
			openFloatingWindow(clickEl, windowEl_cont, windowEl, calculateScaleX(clickEl, windowEl_cont));

			windowEl_cont.firstElementChild.onclick = () => {
				closeFloatingWindow(clickEl, windowEl_cont, windowEl);
				enableScrolling();
			}
			
		}
	}
}

/**
 * Uploads subcategories to the detailed category preview.
 *
 * @param {number} categoryNum - The category number.
 * @param {HTMLElement} container - The container for subcategories.
 */
function uploadSubcategoriesToDetailCategoryPreview(categoryNum, container) {

	let account = id('accounts').getAttribute('data-accountnum'),
		type = id('history-type-nav').getAttribute('data-history-type');
	if (type === 'all') type = '-';

	let results = getArrayForSubcategoriesStatsResult();
	
	results = getSubcategoriesStatsByCustomPeriod(type, account, results);
	
	for (let a = 0; results[categoryNum][a]; a++)
		if (results[categoryNum][a].total !== 0) {
			container.insertAdjacentHTML(
				'beforeend',
				constructCategoryPreviewEl(
					SUBCATEGORY_ICONS[categoryNum][a],
					subcategories_titles[categoryNum][a],
					a, '-', results[categoryNum][a].total,
					localStorage.getItem(`ACurrency${id('accounts').getAttribute('data-accountnum')}`)
				)
			);
		}
}

/**
 * Gets an array initialized with objects for subcategory statistics results.
 *
 * @returns {Array} An array of objects for subcategory statistics results.
 */
function getArrayForSubcategoriesStatsResult() {
	return ([
		/* 1 */
		[ {total: 0}, {total: 0}, {total: 0} ],
		/* 2 */
		[ {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0},
			{total: 0}, {total: 0}, {total: 0}, {total: 0} ],
		/* 3 */
		[ {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0} ],
		/* 4 */
		[ {total: 0}, {total: 0}, {total: 0}, {total: 0} ],
		/* 5 */
		[ {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0} ],
		/* 6 */
		[ {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0},
			{total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0},
			{total: 0} ],
		/* 7 */
		[ {total: 0}, {total: 0}, {total: 0}, {total: 0} ],
		/* 8 */
		[ {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0} ],
		/* 9 */
		[ {total: 0}, {total: 0}, {total: 0} ],
		/* 10 */
		[ {total: 0}, {total: 0}, {total: 0} ]
	]);
}

/**
 * Retrieves subcategory statistics for the custom period based on type and account.
 *
 * @param {string} type - The type of records to consider ('-', '+').
 * @param {string} account - The account number.
 * @param {Array} results - The array to store the subcategory statistics.
 * @returns {Array} The updated array of subcategory statistics.
 */
function getSubcategoriesStatsByCustomPeriod(type, account, results) {

	let inputs = id('date-filter-menu').getElementsByClassName('field-date');
	
	let date_border_from = new Date(inputs[0].value),
		date_border_to = new Date(inputs[1].value),
		record_date;
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--) {

		record_date = new Date(getRecordDateFormat(record_num));
		
		if (record_date < date_border_from && record_date > date_border_to) {
			if (
				localStorage.getItem(`RP${record_num}`) === type &&
				localStorage.getItem(`RA${record_num}`) === account
			)
				results[
					localStorage.getItem(`RC${record_num}`)
				][
					localStorage.getItem(`RS${record_num}`)
				].total += Number(localStorage.getItem(`RU${record_num}`));
		} else if (record_date < date_border_to)
			break;
		
	}

	return results;
}

/**
 * Draws the pie chart on the canvas based on the provided results.
 *
 * @param {Array} results - The array of category statistics.
 */
function drawPieChart(results) {

	let ctx = id('pie-chart').getContext('2d');
	ctx.clearRect(0, 0, id('pie-chart').width, id('pie-chart').height);

	let currentAngle = 0,
		totalNumberOfPeople = results.reduce((sum, {total}) => sum + total, 0);

    for (let unit of results) {
        //calculating the angle the slice (portion) will take in the chart
        let portionAngle = (unit.total / totalNumberOfPeople) * 2 * Math.PI;
        //drawing an arc and a line to the center to differentiate the slice from the rest
        ctx.beginPath();
        ctx.arc(400, 400, 400, currentAngle, currentAngle + portionAngle);
        currentAngle += portionAngle;
        ctx.lineTo(400, 400);
        //filling the slices with the corresponding mood's color
        ctx.fillStyle = unit.color;
        ctx.fill();
    }

	for (let a = 0; a < results.length - 1; a++)
		results[a].total = 0;
}

/**
 * Uploads the total amount to the pie chart based on the selected history type.
 */
function uploadAmountToPieChart() {

	let type = id('history-type-nav').getAttribute('data-history-type');
	if (type === 'all') type = '-';
	
	id('pie-chart-amount').classList.add('pie-chart-amount-hide');

	setTimeout(() => {
		if (type === '-')
			id('pie-chart-amount').innerHTML = id('expenses-column-amount').innerHTML;
		else if (type === '+')
			id('pie-chart-amount').innerHTML = id('incomes-column-amount').innerHTML;

		id('pie-chart-amount').classList.remove('pie-chart-amount-hide');
	}, 350);
}




/**
 * Places the date filter menu to the right side of the screen.
 */
function placeDateFilterMenu() {
	let x = window.innerWidth - id('date-filter-menu-cont').getBoundingClientRect().left;
	id('date-filter-menu-cont').style.transform = `translateX(calc(${x}px + 10vw))`;
}




/**
 * Fixes the current width of elements after a short delay.
 */
function fixCurrentWidthOfElements() {
	setTimeout(() => {
		let holding_el = freezeWidthOfEl(id('enable-history-scroll-button'));
		updateWidthOfEl(id('enable-history-scroll-button'), holding_el);

		holding_el = freezeWidthOfEl(id('enable-categories-details-scroll-button'));
		updateWidthOfEl(id('enable-categories-details-scroll-button'), holding_el);
	}, 1);
}





/**
 * Calculates the scaleX value for a floating window based on the click element and the window container.
 *
 * @param {HTMLElement} clickEl - The clicked element.
 * @param {HTMLElement} windowElCont - The window container.
 *
 * @returns {number} The calculated scaleX value.
 */
function calculateScaleX(clickEl, windowElCont) {
	return ( clickEl.offsetWidth / ( windowElCont.lastElementChild.offsetWidth ) );
}

/**
 * Opens a floating window with a scaling animation.
 *
 * @param {HTMLElement} clickEl - The clicked element.
 * @param {HTMLElement} windowElCont - The window container.
 * @param {HTMLElement} windowEl - The window element.
 * @param {number} scaleX - The scaleX value for the scaling transformation.
 *
 * @returns {object} The top position coordinates.
 */
function openFloatingWindow(
	clickEl, windowElCont, windowEl, scaleX
) {
	let transition = `opacity .4s, transform .4s .03s`;
	
	windowElCont.classList.add('floating-window-cont-visible');
	
	clickEl.style.transition = transition;
	let windowEl_full_height = windowEl.clientHeight;
	let scaleY = scaleX / ((windowEl_full_height * scaleX) / clickEl.offsetHeight);
	
	let clickEl_position_X = ( windowEl.getBoundingClientRect().left + (windowEl.offsetWidth / 2) - clickEl.getBoundingClientRect().left - (clickEl.offsetWidth / 2) ) * Math.max(scaleX, scaleY);
	let clickEl_position_Y = ( windowEl.getBoundingClientRect().top + (windowEl.offsetHeight / 2) - clickEl.getBoundingClientRect().top - (clickEl.offsetHeight / 2) ) * Math.max(scaleX, scaleY);

	windowEl.style.transform = `translate(0px, 0px) scale(${scaleX}, ${scaleY})`;

	let top_position = {
		x: clickEl.getBoundingClientRect().left - windowEl.getBoundingClientRect().left,
		y: clickEl.getBoundingClientRect().bottom - windowEl.getBoundingClientRect().bottom
	};
	
	windowEl.style.transform = `translate(${top_position.x}px, ${top_position.y}px) scale(${scaleX}, ${scaleY})`;

	setTimeout(() => {
		windowEl.style.transition = transition;
		windowElCont.classList.add('floating-window-cont-darker');

		clickEl.style.opacity = '0';
		clickEl.style.transform = `scale(${Math.min(1 / scaleX, 1 / scaleY)}) translate(${clickEl_position_X}px, ${clickEl_position_Y}px)`;
	}, 1);

	return top_position;
}

/**
 * Closes a floating window with a scaling animation.
 *
 * @param {HTMLElement} clickEl - The clicked element.
 * @param {HTMLElement} windowElCont - The window container.
 * @param {HTMLElement} windowEl - The window element.
 */
function closeFloatingWindow(clickEl, windowElCont, windowEl) {
	
	clickEl.style.transition = `opacity .5s, transform .4s`;
	clickEl.style.opacity = '1';
	clickEl.style.transform = 'scale(1) translateY(0px)';

	windowEl.style.transition = `opacity .35s .15s, transform .4s`;
	windowElCont.classList.remove('floating-window-cont-darker');
	
	setTimeout(() => {
		windowElCont.classList.remove('floating-window-cont-visible');
		windowEl.style.transform = 'translateY(0px) scale(1)';
		windowEl.style.transition = 'all 0s';

		clickEl.style.transition = null;
		clickEl.style.transform = null;
		clickEl.style.opacity = null;
	}, 390);
}

/**
 * Changes the transformation of a floating window.
 *
 * @param {HTMLElement} clickEl - The clicked element.
 * @param {HTMLElement} windowElCont - The window container.
 * @param {HTMLElement} windowEl - The window element.
 *
 * @returns {string} The transition property value of the clicked element.
 */
function changeFloatingWindowTransformation(clickEl, windowElCont, windowEl) {

	let clickEL_transition = clickEl.style.transition;
	clickEl.style.transition = 'transform 0s';
	clickEl.style.transform = 'scale(1) translateY(0px)';
	
	let scaleX = calculateScaleX(clickEl, windowElCont);
	let scaleY = scaleX / ((windowEl.clientHeight * scaleX) / clickEl.clientHeight);
	let top_position_X = windowEl.getAttribute('data-top-position-x');
	let top_position_Y = windowEl.getAttribute('data-top-position-y');

	windowEl.style.transform = `translate(${top_position_X}px, ${top_position_Y}px) scale(${scaleX}, ${scaleY})`;

	let clickEl_position_X = (
			windowEl.getBoundingClientRect().left + (windowEl.offsetWidth / 2) -
			clickEl.getBoundingClientRect().left - (clickEl.offsetWidth / 2)
		) * Math.max(scaleX, scaleY);
	let clickEl_position_Y = (
			windowEl.getBoundingClientRect().top + (windowEl.clientHeight / 2) -
			clickEl.getBoundingClientRect().top + ((clickEl.clientHeight / 2))
		) * Math.max(scaleX, scaleY);
	clickEl.style.transform = `scale(${1 / scaleX}) translate(${clickEl_position_X}px, ${clickEl_position_Y}px)`;

	return clickEL_transition;
}

/**
 * Reconnects a floating window by hiding the previous clicked element and updating the transformation.
 *
 * @param {HTMLElement} previousClickEl - The previously clicked element.
 * @param {HTMLElement} clickEl - The current clicked element.
 * @param {HTMLElement} windowElCont - The window container.
 * @param {HTMLElement} windowEl - The window element.
 */
function reconnectFloatingWindow(previousClickEl, clickEl, windowElCont, windowEl) {

	previousClickEl.style.display = 'none';
	let scaleX = calculateScaleX(clickEl, windowElCont);
	let scaleY = scaleX / ((windowEl.clientHeight * scaleX) / clickEl.clientHeight);

	let width_difference = windowEl.clientWidth - (windowEl.clientWidth * scaleX);
	let height_difference = windowEl.clientHeight - (windowEl.clientHeight * scaleY);
	let top_position_X = clickEl.getBoundingClientRect().left - ((width_difference / 2) + windowEl.getBoundingClientRect().left);
	let top_position_Y = clickEl.getBoundingClientRect().top - ((height_difference / 2) + windowEl.getBoundingClientRect().top);

	windowEl.style.transform = `translate(${top_position_X}px, ${top_position_Y}px) scale(${scaleX}, ${scaleY})`;
}

/**
 * Closes a reconnected floating window with a scaling animation.
 *
 * @param {HTMLElement} windowElCont - The window container.
 * @param {HTMLElement} windowEl - The window element.
 */
function closeReconnectedFloatingWindow(windowElCont, windowEl) {

  windowEl.style.transition = `opacity .35s .15s, transform .4s`;
  windowElCont.classList.remove('floating-window-cont-darker');
  
  setTimeout(() => {
    windowElCont.classList.remove('floating-window-cont-visible');
    windowEl.style.transform = 'translateY(0px) scale(1)';
    windowEl.style.transition = 'all 0s';
  }, 390);
}

/**
 * Closes a floating window using the disappear method.
 *
 * @param {HTMLElement} clickEl - The clicked element.
 * @param {HTMLElement} windowElCont - The window container.
 * @param {HTMLElement} windowEl - The window element.
 */
function closeFloatingWindowByDisappearMethod(clickEl, windowElCont, windowEl) {

	clickEl.style.display = `none`;

	windowEl.style.transition = `opacity .4s, transform .4s`;
	windowEl.style.transform = `translateY(0px) scale(0.5)`;
	windowEl.style.opacity = `0`;
	windowElCont.classList.remove('floating-window-cont-darker');
	
	setTimeout(() => {
		windowElCont.classList.remove('floating-window-cont-visible');
		windowEl.style.transition = 'all 0s';

		clickEl.style.transition = null;
		clickEl.style.transform = null;
		clickEl.style.opacity = null;
	}, 390);
}





/**
 * Displays a popup notification for a connected action.
 *
 * @param {string} notificationCommand - The notification command.
 * @param {HTMLElement} notificationContEl - The container element for the notification.
 * @param {HTMLElement} connectedWindow - The connected window element.
 *
 * @returns {number} The timeout ID for hiding the notification.
 */
function showPopUpConnectedNotification(notificationCommand, notificationContEl, connectedWindow) {

	let notificationEl = notificationContEl.firstElementChild,
		hide_popup_notification;

	notificationEl.lastElementChild.firstElementChild.innerText =
		getStrings(localStorage.getItem('L')).account_removing_message;

	notificationContEl.style.top = (connectedWindow.getBoundingClientRect().top + 20) + 'px';
	notificationContEl.classList.add('show');

	notificationEl.style.transform = `scale(1.02) translateY(calc(${-(notificationEl.clientHeight)}px - 46px))`;
	
	setTimeout(() => {
		notificationEl.style.transform = `scale(1) translateY(calc(${-(notificationEl.clientHeight)}px - 40px))`;
	}, 400);
	
	hide_popup_notification = setTimeout(() => {
		hidePopUpConnectedNotificationAfterTimer (notificationContEl);
	}, 5000);

	notificationEl.onclick = () => {
		clearTimeout(hide_popup_notification);
		hidePopUpConnectedNotificationAfterTimer(notificationContEl);
	}

	return hide_popup_notification;
}

/**
 * Hides the popup notification after a timer.
 *
 * @param {HTMLElement} notificationContEl - The container element for the notification.
 */
function hidePopUpConnectedNotificationAfterTimer(notificationContEl) {
	let notificationEl = notificationContEl.firstElementChild;

	notificationEl.style.transform = null;
	
	setTimeout(() => {
		notificationContEl.classList.remove('show');
		notificationEl.lastElementChild.firstElementChild.innerHTML = null;
	}, 400);
}

/**
 * Hides the popup notification.
 *
 * @param {HTMLElement} notificationContEl - The container element for the notification.
 * @param {number} hidePopupNotification - The timeout ID for hiding the notification.
 */
function hidePopUpConnectedNotification(notificationContEl, hidePopupNotification) {
	let notificationEl = notificationContEl.firstElementChild;

	clearTimeout(hidePopupNotification);
	
	notificationEl.style.opacity = 0;
	
	setTimeout(() => {
		notificationContEl.classList.remove('show');
		notificationEl.style = null;
		notificationEl.lastElementChild.firstElementChild.innerHTML = null;
	}, 400);
}





/**
 * Opens a window block with a dark overlay.
 *
 * @param {HTMLElement} windowElCont - The window container element.
 * @param {HTMLElement} windowEl - The window element.
 */
function openWindowBlock(windowElCont, windowEl) {

  windowElCont.classList.add('window-block-cont-visible');

  setTimeout(() => {
    windowElCont.classList.add('window-block-cont-darker');
    
    setTimeout(() => {
      windowEl.classList.add('window-block-transform');
    }, 300);
  }, 1);
}

/**
 * Closes a window block.
 *
 * @param {HTMLElement} windowElCont - The window container element.
 * @param {HTMLElement} windowEl - The window element.
 */
function closeWindowBlock(windowElCont, windowEl) {

	windowEl.style = null;
	windowEl.classList.remove('window-block-transform');
	windowElCont.classList.remove('window-block-cont-darker');

	setTimeout(() => {
		windowElCont.classList.remove('window-block-cont-visible');
	}, 300);
}





/**
 * Opens a window using a bubble queue method.
 *
 * @param {HTMLElement} clickEl - The click element.
 * @param {HTMLElement} windowElCont - The window container element.
 * @param {HTMLElement} closeButton - The close button element.
 * @param {HTMLCollectionOf<HTMLElementTagNameMap[string]>} bubbleElsArray - The array of elements to show.
 */
function openWindowByBubbleQueueMethod(
	clickEl, windowElCont, closeButton, bubbleElsArray
) {

	// hide click element
	clickEl.style.transition = '.5s transform, .5s opacity';
	clickEl.classList.add('bubble-hide');

	// show elements' container 
	windowElCont.classList.add('visible');
	
	let len = bubbleElsArray.length,
		delay = 80;
	
	// show elements one by one
	for (let a = len; a > 0; a--) {
		
		setTimeout(() => {
			bubbleElsArray[a - 1].style.transition = '.15s transform, .15s opacity';
			bubbleElsArray[a - 1].classList.add('show');
		}, delay * (len - a));

		if (a === 1)
			setTimeout(() => {
				closeButton.style.transition = '.15s transform, .15s opacity';
				closeButton.classList.add('show');
			}, delay * len);
	}
}

/**
 * Closes a window using a bubble queue method.
 *
 * @param {HTMLElement} clickEl - The click element.
 * @param {HTMLElement} windowElCont - The window container element.
 * @param {HTMLElement} closeButton - The close button element.
 * @param {HTMLCollectionOf<HTMLElementTagNameMap[string]>} bubbleElsArray - The array of elements to hide.
 */
function closeWindowByBubbleQueueMethod(
	clickEl, windowElCont, closeButton, bubbleElsArray
) {

	clickEl.style.transition = '.15s transform, .15s opacity';

	let len = bubbleElsArray.length,
		delay = 40;

	// hide elements one by one
	for (let a = len - 1; a >= 0; a--) {

		if (a === len - 1) {
			closeButton.style.transition = '.15s transform, .15s opacity';
			closeButton.classList.remove('show');
		}
		
		setTimeout(() => {
			bubbleElsArray[a].style.transition = '.15s transform, .15s opacity';
			bubbleElsArray[a].classList.remove('show');
		}, delay * (len - a + 1));

		if (a === 0) {
			setTimeout(() => {
				// show click element
				clickEl.classList.remove('bubble-hide');
			}, delay * len);
			setTimeout(() => {
				// hide elements' container 
				windowElCont.classList.remove('visible');
			}, delay * len);
		}
	}
}





let accountTapTime = (new Date()).getTime();
/**
 * Sets up click event handling on accounts in the top bar.
 */
function setUpClickOnAccountsInTopBar() {

	for (let account of id('accounts').getElementsByClassName('account')) {
		account.onclick = function(e) {

			if (!(account.classList.contains('active-account'))) {
				// change active account
				for (let account of id('accounts').getElementsByClassName('account'))
					if (account === this) {
						
						setTimeout(() => { account.classList.add('active-account'); }, 100);
						id('accounts').setAttribute('data-accountnum', account.getAttribute('data-accountnum'));
						
					} else if (account.classList.contains('active-account'))
						account.classList.remove('active-account');
	
				// update data in all widgets
				updateWidgetsData(1, 0, 0, [0, 1], 0);
			}
			
			listenDoubleClickOnAccount(account, e);
		}
		updateAccountInfo(account, Number(account.getAttribute('data-accountnum')), 'Balance');
	}

	id('accounts').firstElementChild.classList.add('active-account');
	id('accounts').setAttribute('data-accountnum', id('accounts').firstElementChild.getAttribute('data-accountnum'));
	// update data in all widgets
	updateWidgetsData(1, 0, 0, [1, 0], 0);
}

/**
 * Listens for double-clicks on an account.
 *
 * @param {HTMLElement} account - The account element.
 * @param {Event} event - The click event.
 */
function listenDoubleClickOnAccount(account, event) {
	let account_num = Number(account.getAttribute('data-accountnum'));

	// prevent zoom by double tap
	event.preventDefault();

	let tap_time = (new Date()).getTime();
	
	// if it was double tap
	if (tap_time - accountTapTime < 400 && localStorage.getItem(`AWB${account_num}`) === "false") {
		localStorage.setItem(
			`AHB${account_num}`,
			localStorage.getItem(`AHB${account_num}`) === "true" ? "false" : "true"
		);
		updateAccountInfo(account, account_num, 'Balance');
	}

	accountTapTime = tap_time;
}

const HISTORY_PERIOD_NAV_BUTTONS = id('history-period-nav').getElementsByTagName('div');
/**
 * Handles the click event on history period navigation buttons.
 */
for (let button of HISTORY_PERIOD_NAV_BUTTONS) {
	button.onclick = function() {

		if ( !(button.classList.contains('active-input-cont')) ) {
			// change active button
			for (let button of HISTORY_PERIOD_NAV_BUTTONS)
				if (button === this) {
					button.classList.add('active-input-cont');
					uiState.date_range = getDateRangeEnumByNavPeriodButtonId(button.id);
				} else if (button.classList.contains('active-input-cont')) {
					button.classList.remove('active-input-cont');
				}

			// apply new period to custom date menu
			changeDatePeriodInCustomDateMenu(uiState.date_range);
			// update data in all widgets
			updateWidgetsData(0, 0, 1, [0, 1], 1);
		}

		// show or hide custom date filter menu
		if (
			button.id === 'custom-period' &&
			!(id('date-filter-menu-cont').classList.contains('show'))
		)
			showCustomDateFilterMenu();
		else if (id('date-filter-menu-cont').classList.contains('show'))
			hideCustomDateFilterMenu();
		
	}
}

/**
 * Gets the date range enumeration based on the ID of the history period button.
 *
 * @param {string} id - The ID of the history period button.
 * @returns {DATE_RANGE_ENUM} - The corresponding date range enumeration.
 */
function getDateRangeEnumByNavPeriodButtonId(id) {
	if (id === "this-month-period") {
		return DATE_RANGE_ENUM.this_month
	} else if (id === "last-month-period") {
		return DATE_RANGE_ENUM.last_month
	} else {
		return DATE_RANGE_ENUM.custom
	}
}

id('date-filter-menu-cont').firstElementChild.onclick = () => {
	hideCustomDateFilterMenu();
}

for (let button of id('date-filter-other').getElementsByTagName('button')) {
	button.onclick = function() {
		applyOtherDateToDateFieldsOfDateFilterMenu(this);
	}
}

/**
 * Applies other date filters to the date fields of the date filter menu.
 *
 * @param {HTMLElement} button - The button element representing the selected date filter.
 */
function applyOtherDateToDateFieldsOfDateFilterMenu(button) {

	let inputs = id('date-filter-menu').getElementsByClassName('field-date');
	let border1 = new Date(), border2 = new Date();

	if (button.id === "date-filter-other-this-week") {
		
		border1 = getDateBySunday(border1);
		border2 = getDateByMonday(border2);

		border1 = getDateBorderByInput(59, 59, 23, border1.getDate(), border1.getMonth(), border1.getFullYear());
		border2 = getDateBorderByInput(0, 0, 0, border2.getDate(), border2.getMonth(), border2.getFullYear());
		
	} else if (button.id === "date-filter-other-seven-days") {

		border2.setDate(Number((new Date()).getDate()) - 6);

		border1 = getDateBorderByInput(59, 59, 23, border1.getDate(), border1.getMonth(), border1.getFullYear());
		border2 = getDateBorderByInput(0, 0, 0, border2.getDate(), border2.getMonth(), border2.getFullYear());
		
	} else if (button.id === "date-filter-other-this-year") {

		border1 = getDateBorderByInput(59, 59, 23, 31, 11, border1.getFullYear());
		border2 = getDateBorderByInput(0, 0, 0, 1, 0, border2.getFullYear());

	} else if (button.id === "date-filter-other-last-year") {

		border1.setFullYear((new Date()).getFullYear() - 1);
		border2.setFullYear((new Date()).getFullYear() - 1);

		border1 = getDateBorderByInput(59, 59, 23, 31, 11, border1.getFullYear());
		border2 = getDateBorderByInput(0, 0, 0, 1, 0, border2.getFullYear());
		
	}
		
	inputs[0].value = getDateFormat(border1);
	inputs[1].value = getDateFormat(border2);
}

/**
 * Gets the date by Monday for the given date.
 *
 * @param {Date} date - The input date.
 *
 * @returns {Date} - The date adjusted to the nearest Monday.
 */
function getDateByMonday(date) {

	while (date.getDay() !== 1)
		date.setDate(Number(date.getDate()) - 1);

	return date;
}

/**
 * Gets the date by Sunday for the given date.
 *
 * @param {Date} date - The input date.
 *
 * @returns {Date} - The date adjusted to the nearest Sunday.
 */
function getDateBySunday(date) {

	while (date.getDay() !== 0)
		date.setDate(Number(date.getDate()) + 1);
	
	return date;
}

/**
 * Handles the click event on month selection buttons in the date filter menu.
 */
for (let button of id('date-filter-months').getElementsByTagName('button')) {
	button.onclick = function() {

		let inputs = id('date-filter-menu').getElementsByClassName('field-date');
	
		let border_year = (new Date(inputs[0].value)).getFullYear();
		let border1 = getDateBorderByInput(
			59, 59, 23, 0,
			Number(button.getAttribute('data-num')) + 1, border_year
		);
		let border2 = getDateBorderByInput(
			0, 0, 0, 1,
			Number(button.getAttribute('data-num')), border_year
		);
		
		inputs[0].value = getDateFormat(border1);
		inputs[1].value = getDateFormat(border2);
		
	}
}

/**
 * Gets the date border based on input parameters.
 *
 * @param {number} seconds - The seconds component.
 * @param {number} minutes - The minutes component.
 * @param {number} hours - The hours component.
 * @param {number} day - The day component.
 * @param {number} month - The month component.
 * @param {number} year - The year component.
 *
 * @returns {Date} - The constructed date object.
 */
function getDateBorderByInput(
	seconds, minutes, hours, day, month, year
) {
	let date = new Date();
	
	date.setSeconds(seconds);
	date.setMinutes(minutes);
	date.setHours(hours);
	date.setMonth(month, day);
	date.setFullYear(year);

	return date;
}

// set up clicks on history type nav buttons
const history_type_nav_buttons = id('history-type-nav').getElementsByTagName('div');
/**
 * Handles click events on history type navigation buttons.
 */
for (let button of history_type_nav_buttons) {
	button.onclick = function() {

		if (!(button.classList.contains('active-input-cont'))) {
			// change active button
			for (let button of history_type_nav_buttons)
				if (button === this) {
					button.classList.add('active-input-cont');
					id('history-type-nav').setAttribute('data-history-type', button.getAttribute('data-history-type'));
				} else if (button.classList.contains('active-input-cont'))
					button.classList.remove('active-input-cont');
	
			// upload records to history
			uploadRecordsToHistoryAnimated();
			updatePieChart();
		}
		
	}
}





const MAKE_RECORD_TYPE_BUTTONS = id('record-types').getElementsByTagName('div');
/**
 * Handles the click event on the "Make Record" button.
 */
id('make-record-button').onclick = () => {

	let windowEl_cont = id('make-record-window-cont'),
		windowEl = id('make-record-window'),
		clickEl = id('make-record-button');
	
	disableScrolling();
	prepareMakeRecordWindow();

	openFloatingWindow(clickEl, windowEl_cont, windowEl, calculateScaleX(clickEl, windowEl_cont));

	windowEl_cont.firstElementChild.onclick = () => {
		enableScrolling();
		closeFloatingWindow(clickEl, windowEl_cont, windowEl);
		setTimeout(resetMakeTransferWindowData, 390);
		setTimeout(resetMakeRecordWindowData, 390);
	}
}

/**
 * Prepares the "Make Record" window for opening by uploading data to fields.
 */
function prepareMakeRecordWindow() {
	let account_num = id('accounts').getAttribute('data-accountnum');

	// hide fields for transfer window and edit record window
	id('make-record-window').classList.add('make-record-status');
	// add attribute 'new' and 'record number' attribute to make record window
	id('make-record-window').setAttribute('data-status', 'new');
	id('make-record-window').setAttribute(
		'data-recordnum',
		(Number(localStorage.getItem('RCount')) + 1).toString()
	);
	// upload current date
	id('make-record-date').value = getDateFormat(new Date());
	// automatic adjust length of input record amount while typing
	adaptInputLengthExplicitly(id('make-record-amount'));
	// upload account to change account button
	uploadAccountFieldTitle('record');
	id('make-record-account').innerHTML = constructAccountEl(Number(account_num));
	id('make-record-account').setAttribute('data-accountnum', account_num);

	// hide transfer button if account's count is less for 2
	if (Number(localStorage.getItem('ACount')) < 2)
		id('record-type-transfer').classList.add('element-hide');
	
	// upload category to change category button
	uploadCategoryToMakeRecordCategoryField(
		'-', id('make-record-category'),
		id('make-record-category').firstElementChild,
		id('make-record-category').lastElementChild
	);
	// upload save button title
	id('make-record-save-button').value = getStrings(localStorage.getItem('L')).save_record;
}

/**
 * Uploads the category to the "Make Record" category field.
 *
 * @param {string} type - The type of the record.
 * @param {HTMLElement} field - The category field.
 * @param {HTMLElement} fieldIcon - The icon element in the category field.
 * @param {HTMLElement} fieldName - The name element in the category field.
 */
function uploadCategoryToMakeRecordCategoryField(type, field, fieldIcon, fieldName) {

	let category_num, subcategory_num,
		record_num = Number(localStorage.getItem('RCount'));

	for (let num = record_num; num > 0; num--) {

		if (
			localStorage.getItem(`RP${num}`) === type && type === '-' &&
			localStorage.getItem(`RC${num}`) !== '>'
		) {
			
			category_num = localStorage.getItem(`RC${num}`);
			subcategory_num = localStorage.getItem(`RS${num}`);
			field.setAttribute('data-categorynum', category_num);
			field.setAttribute('data-subcategorynum', subcategory_num);

			fieldIcon.innerHTML = SUBCATEGORY_ICONS[category_num][subcategory_num];
			fieldName.value = subcategories_titles[category_num][subcategory_num];

			return;

		} else if (
			localStorage.getItem(`RP${num}`) === type && type === '+' &&
			localStorage.getItem(`RC${num}`) !== '>'
		) {

			category_num = localStorage.getItem(`RC${num}`);
			field.setAttribute('data-categorynum', category_num);

			fieldIcon.innerHTML = CATEGORY_INCOME_ICONS[category_num];
			fieldName.value = categories_income_titles[category_num];

			return;
		}
	}

	if (type === '-') {

		category_num = SUBCATEGORY_ICONS.length - 1;
		subcategory_num = SUBCATEGORY_ICONS[SUBCATEGORY_ICONS.length - 1].length - 2;
		field.setAttribute('data-categorynum', category_num);
		field.setAttribute('data-subcategorynum', subcategory_num);

		fieldIcon.innerHTML = SUBCATEGORY_ICONS[category_num][subcategory_num];
		fieldName.value = subcategories_titles[category_num][subcategory_num];

	} else if (type === '+') {
		
		category_num = CATEGORY_INCOME_ICONS.length - 1;
		field.setAttribute('data-categorynum', category_num);

		fieldIcon.innerHTML = CATEGORY_INCOME_ICONS[category_num];
		fieldName.value = categories_income_titles[category_num];

	}
}

/**
 * Resets the data in the "Make Record" window data.
 */
function resetMakeRecordWindowData() {

	// remove class to hide fields for transfer window and edit record window
	if (id('make-record-window').classList.contains('make-record-status'))
		id('make-record-window').classList.remove('make-record-status');
	else id('make-record-window').classList.remove('edit-record-status');
		
	// reset type of record
	
	if (id('record-type-transfer').classList.contains('element-hide'))
		id('record-type-transfer').classList.remove('element-hide');

	id('record-types').setAttribute('data-record-type', id('record-type-expense').getAttribute('data-record-type'));
  	for (let button of MAKE_RECORD_TYPE_BUTTONS)
		if (button.id === 'record-type-expense')
			button.classList.add('active-input-cont');
		else button.classList.remove('active-input-cont');

	// reset note
	id('make-record-note').value = null;
	setTypingListenerForInput(id('make-record-note'));
	// reset amount
  	id('make-record-amount').value = null;
	setTypingListenerForInput(id('make-record-amount'));
	// reset category
  	id('make-record-category-cont').classList.remove('make-record-category-cont-hide');
}





/**
 * Handles click events on record type buttons.
 */
for (let button of MAKE_RECORD_TYPE_BUTTONS) {
	button.onclick = function() {
		if (!button.classList.contains('active-input-cont')) {
			for (let button of MAKE_RECORD_TYPE_BUTTONS) {

				if (button === this) {
					button.classList.add('active-input-cont');
			
					id('record-types').setAttribute('data-record-type', button.getAttribute('data-record-type'));
			
					if (button.id !== 'record-type-transfer')
						changeMakeRecordCategoryType_ExpenseOrIncome().then();
					else if (button.id === 'record-type-transfer')
						uploadDataDuringHidingWindow(prepareMakeTransferWindow, function(){});
			
				} else if (button.classList.contains('active-input-cont'))
					button.classList.remove('active-input-cont');	
			
			}
    	}
  	}
}

/**
 * Changes the category type for the "Make Record" window between Expense and Income.
 */
async function changeMakeRecordCategoryType_ExpenseOrIncome() {
	let field = id('make-record-category');

	// reset 'make transfer' window data and upload 'make record' window data
	if( id('make-record-window').classList.contains('make-transfer-status') )
		uploadDataDuringHidingWindow(resetMakeTransferWindowData, prepareMakeRecordWindow);

	// hide field
	await hideFieldByHideSlideMethod(field);
	
	// upload data to field
	uploadCategoryToMakeRecordCategoryField(
		getRecordTypeAsSing(), field, field.firstElementChild, field.lastElementChild
	);
		
	// show field
	await showFieldByHideSlideMethod(field);
}

/**
 * Uploads data while hiding the window.
 *
 * @param {function} passedFunction1 - The function to be executed before uploading.
 * @param {function} passedFunction2 - The function to be executed after uploading.
 */
function uploadDataDuringHidingWindow(passedFunction1, passedFunction2) {
	let window = id('make-record-window'),
		el_transition = window.style.transition;

	window.style.transition = '.15s transform, .15s opacity .05s';
	window.classList.add('bubble-hide-el-secondary');

	setTimeout(() => {
		if (passedFunction1) passedFunction1();
		if (passedFunction2) passedFunction2();

		window.classList.remove('bubble-hide-el-secondary');
		setTimeout(() => {
			window.style.transition = el_transition;
		}, 200);
	}, 200);
}

/**
 * Hides a field using the hide slide method animation.
 *
 * @param {HTMLElement} field - The field to be hidden.
 */
async function hideFieldByHideSlideMethod(field) {

	field.style.transition = '.2s transform, .2s opacity';
	field.classList.add('category-button-changing-hide');

	await makeDelay(300);
}

/**
 * Shows a field using the hide slide method animation.
 *
 * @param {HTMLElement} field - The field to be shown.
 */
async function showFieldByHideSlideMethod(field) {

	field.style.transition = 'transform 0s';
	field.classList.remove('category-button-changing-hide');
	field.classList.add('category-type-changed-hide');

	await makeDelay(50);

	field.style.transition = null;
	field.classList.remove('category-type-changed-hide');
}

/**
 * Gets the record type as a single character.
 *
 * @returns {string} - The record type as a single character: "-" for expense, "+" for income, "t" for transfer.
 */
function getRecordTypeAsSing() {

	if (id('record-type-expense').classList.contains('active-input-cont'))
		return ('-');
	else if (id('record-type-income').classList.contains('active-input-cont'))
		return ('+');
	else if (id('record-type-transfer').classList.contains('active-input-cont'))
		return ('t');
}



/**
 * Prepares the "Make Transfer" window data for opening.
 */
function prepareMakeTransferWindow() {

	// upload account to 'transfer to account' field
	uploadAnotherAccountToExactlyField(id('make-transfer-to-account'), undefined);
	
	// hide fields of make record window and edit record window
	id('make-record-window').classList.remove('make-record-status');
	id('make-record-window').classList.add('make-transfer-status');
	// upload 'transfer to account' field's title
	uploadAccountFieldTitle('transfer');
	// upload default rate to start rate and final rate fields
	id('make-transfer-start-rate').value = 1;
	id('make-transfer-final-rate').value = 1;
	// set up listener to adapt final amount by rate
	setUpListenerToAdaptFinalAmountByRate();
	adaptFinalAmountByRate();
	// upload transfer button title
	id('make-transfer-button').value = getStrings(localStorage.getItem('L')).make_transfer;
}

/**
 * Sets up listeners to adapt the final amount by rate.
 */
function setUpListenerToAdaptFinalAmountByRate() {
	
	id('make-record-amount').addEventListener('input', adaptFinalAmountByRate);
	id('make-transfer-start-rate').addEventListener('input', adaptFinalAmountByRate);
	id('make-transfer-final-rate').addEventListener('input', adaptFinalAmountByRate);
	id('make-transfer-final-amount').addEventListener('input', adaptStartRateByAmount);
}

/**
 * Adapts the final amount based on the rates.
 */
function adaptFinalAmountByRate() {

	if (id('make-transfer-start-rate').value === 0 || id('make-transfer-final-rate').value === 0) {
		id('make-transfer-final-amount').value = 0;	
		return;
	}

	id('make-transfer-final-amount').value = (
			(id('make-record-amount').value) /
			(id('make-transfer-start-rate').value) *
			(id('make-transfer-final-rate').value)
		).toFixed(2);

	adaptInputLengthExplicitly(id('make-transfer-final-amount'));
}

/**
 * Adapts the start rate based on the amount.
 */
function adaptStartRateByAmount() {

	if (
		id('make-transfer-start-rate').value === 0 ||
		id('make-transfer-final-amount').value === 0 ||
		id('make-record-amount').value === 0
	) {
		id('make-transfer-final-rate').value = 0;
		return;
	}

	id('make-transfer-final-rate').value = (
			(id('make-transfer-final-amount').value) *
			(id('make-transfer-start-rate').value) /
			(id('make-record-amount').value)
		).toFixed(2);

	adaptInputLengthExplicitly(id('make-transfer-final-amount'));
}

/**
 * Resets the data in the "Make Transfer" window.
 */
function resetMakeTransferWindowData() {

	// remove class to hide fields of make record window and edit record window
	if (id('make-record-window').classList.contains('make-transfer-status'))
		id('make-record-window').classList.remove('make-transfer-status');
	if (id('make-record-window').classList.contains('edit-transfer-status'))
		id('make-record-window').classList.remove('edit-transfer-status');
	if (id('make-record-window').classList.contains('edit-record-status'))
		id('make-record-window').classList.remove('edit-record-status');

	id('make-record-window').classList.add('make-record-status');
	// reset final amount field
	id('make-transfer-final-amount').value = null;
}





/**
 * Sets up a click event on the 'Make Record' account field.
 * Initiates the process of changing the account or opening the account selection window.
 */
id('make-record-account').onclick = function() {
	changeAccountOrOpenWindowToChoose(this).then();
}
/**
 * Sets up a click event on the 'Transfer To Account' field in the 'Make Transfer' window.
 * Initiates the process of changing the account or opening the account selection window.
 */
id('make-transfer-to-account').onclick = function() {
	changeAccountOrOpenWindowToChoose(this).then();
}

/**
 * Determines whether to change the account or open the account selection window based on the number of accounts.
 * If there are only two accounts, directly changes the account; otherwise, opens the account selection window.
 *
 * @param {HTMLElement} clickEl - The clicked element triggering the account change or selection.
 */
async function changeAccountOrOpenWindowToChoose(clickEl) {
	let accounts_count = Number(localStorage.getItem('ACount'));

	if (accounts_count === 2) {
		let account_num = await uploadAnotherAccountToSameField(clickEl, accounts_count);
		await checkAccountInOtherFieldThanThisForRepeating(clickEl, account_num);
	} else if (accounts_count > 2)
		openChooseAccountWindow(clickEl);
}

/**
 * Uploads another account to the same field and animates the change.
 *
 * @param {HTMLElement} field - The field to change the account.
 * @param {number} accounts_count - The total number of accounts.
 *
 * @returns {Promise<number>} - A promise with the new account number.
 */
async function uploadAnotherAccountToSameField(field, accounts_count) {
	
	let account_num = Number(field.getAttribute('data-accountnum'));
	account_num = account_num % accounts_count + 1;

	await hideFieldByHideSlideMethod(field);
	uploadAnotherAccountToExactlyField(field, account_num);
	await showFieldByHideSlideMethod(field);

	return account_num;
}

/**
 * Opens the window for choosing an account.
 *
 * @param {HTMLElement} clickEl - The clicked element triggering the account selection window.
 */
function openChooseAccountWindow(clickEl) {

	let windowEl_cont = id('accounts-window-cont'),
		windowEl = id('accounts-window');

	// upload account to change account button
	windowEl.firstElementChild.innerHTML = null;
	for (let acc_num = 1; acc_num <= localStorage.getItem('ACount'); acc_num++)
		uploadAccount(acc_num, windowEl.firstElementChild);

	// open 'choose account' window
	let top_position = openFloatingWindow(
		clickEl, windowEl_cont, windowEl,
		calculateScaleX(clickEl, windowEl_cont)
	);
	windowEl.setAttribute('data-top-position-x', (top_position.x).toString());
	windowEl.setAttribute('data-top-position-y', (top_position.y).toString());

	// set up click on accounts
	setUpChoosingAccount(clickEl, windowEl_cont, windowEl);

	// set up closing 'choose account' window
	windowEl_cont.firstElementChild.onclick = function() {
		closeFloatingWindow(clickEl, windowEl_cont, windowEl);
	}
}

/**
 * Sets up click events on account selection in the 'Choose Account' window.
 *
 * @param {HTMLElement} clickEl - The clicked element triggering the account selection.
 * @param {HTMLElement} windowElCont - The container of the account selection window.
 * @param {HTMLElement} windowEl - The account selection window.
 */
function setUpChoosingAccount(clickEl, windowElCont, windowEl) {

	for (let account of windowEl.getElementsByClassName('account')) {
		account.onclick = function() {

			let accountNum = Number(account.getAttribute('data-accountnum')),
				accountClickEl = clickEl.firstElementChild;
			clickEl.setAttribute('data-accountnum', accountNum.toString());

			// upload chosen accounts data to change account button
			accountClickEl.classList.add('account-block-animation');
			accountClickEl.style.background = '#' + localStorage.getItem(`AColor${accountNum}`);
			checkAccountColor(accountClickEl);
			accountClickEl.firstElementChild.innerText = localStorage.getItem(`ACurrency${accountNum}`);
			accountClickEl.lastElementChild.innerText = getAccountBalance(accountNum);

			// animate closing 'choose account' window
			let clickEL_transition = changeFloatingWindowTransformation(clickEl, windowElCont, windowEl);
			setTimeout(() => {
				clickEl.classList.remove('account-block-animation');
				clickEl.style.transition = clickEL_transition;
				closeFloatingWindow(clickEl, windowElCont, windowEl);
			}, 1);
			
			// upload account to 'transfer to account' field other than chosen 'from account'
			checkAccountInOtherFieldThanThisForRepeating(clickEl, accountNum).then();
			
		}
	}
}

/**
 * Checks if the chosen account is already used in the other field, if so, updates the other field.
 *
 * @param {HTMLElement} clickEl - The clicked element triggering the check.
 * @param {number} chosenAccountNum - The chosen account number.
 */
async function checkAccountInOtherFieldThanThisForRepeating(clickEl, chosenAccountNum) {

	let fromAccountEl = id('make-record-account'),
		toAccountEl = id('make-transfer-to-account');

	if (
		id('make-record-window').classList.contains('make-transfer-status') ||
		id('make-record-window').classList.contains('edit-transfer-status')
	) {
		if (
			clickEl === fromAccountEl &&
			chosenAccountNum === Number(toAccountEl.getAttribute('data-accountnum'))
		) {
			await hideFieldByHideSlideMethod(toAccountEl);
			uploadAnotherAccountToExactlyField(toAccountEl, undefined);
			await showFieldByHideSlideMethod(toAccountEl);
		}
			
		else if (
			clickEl === toAccountEl &&
			chosenAccountNum === Number(fromAccountEl.getAttribute('data-accountnum'))
		) {
			await hideFieldByHideSlideMethod(fromAccountEl);
			uploadAnotherAccountToExactlyField(fromAccountEl, undefined);
			await showFieldByHideSlideMethod(fromAccountEl);
		}
	}
}

/**
 * Uploads another account to the specified field.
 *
 * @param {HTMLElement} field - The field to upload the new account.
 * @param {number} accountNum - The new account number to upload.
 */
function uploadAnotherAccountToExactlyField(field, accountNum) {

	// get chosen 'from account' number
	if (!accountNum) {
		if (field === id('make-record-account')) {
			accountNum = Number(id('make-transfer-to-account').getAttribute('data-accountnum'));
		} else if (field === id('make-transfer-to-account')) {
			accountNum = Number(id('make-record-account').getAttribute('data-accountnum'));
		}

		// define another account number
		if ( accountNum + 1 <= Number(localStorage.getItem('ACount')) ) {
			accountNum += 1;
		} else {
			accountNum -= 1;
		}
	}

	// upload account to passed field
	field.innerHTML = constructAccountEl(accountNum);
	field.setAttribute('data-accountnum', accountNum.toString());
}




/**
 * Sets up a click event on the 'Make Record' category field to open the category selection window.
 */
id('make-record-category').onclick = () => {
	
	let clickEl = id('make-record-category'),
		windowElCont, windowEl, categories;
	
	if (id('record-type-expense').classList.contains('active-input-cont')) {

		windowElCont = id('categories-expense-cont');
		windowEl = id('categories-expense');
		categories = id('subcategories').getElementsByClassName('subcategory');

	} else if (id('record-type-income').classList.contains('active-input-cont')) {
		
		windowElCont = id('categories-income-cont');
		windowEl = id('categories-income');
		categories = id('categories-income').getElementsByClassName('category');

	}

	openCategoryWindow(clickEl, windowElCont, windowEl);
	setUpClickOnSubcategory(clickEl, windowElCont, windowEl, categories);
}

/**
 * Opens the category selection window and sets up the click event to close the window.
 *
 * @param {HTMLElement} clickEl - The clicked element triggering the category selection window.
 * @param {HTMLElement} windowElCont - The container of the category selection window.
 * @param {HTMLElement} windowEl - The category selection window.
 */
function openCategoryWindow(clickEl, windowElCont, windowEl) {
	
	let topPosition = openFloatingWindow(clickEl, windowElCont, windowEl, calculateScaleX(clickEl, windowElCont));
	windowEl.setAttribute('data-top-position-x', topPosition.x.toString());
	windowEl.setAttribute('data-top-position-y', topPosition.y.toString());
	
	windowElCont.firstElementChild.onclick = () => {
		closeFloatingWindow(clickEl, windowElCont, windowEl);

		if (id('subcategories-cont').classList.contains('subcategories-cont-visible'))
			setTimeout(() => {
				resetCategoryWindowData(id('subcategories').getElementsByClassName('subcategory-cont'))
			}, 325);
	}
}

/**
 * Resets the data and visibility of the category selection window.
 *
 * @param {HTMLCollection} subcategoriesElsArr - The collection of subcategory elements.
 */
function resetCategoryWindowData(subcategoriesElsArr) {

	id('categories-expense').classList.remove('categories-overflow');
	id('subcategories-title').innerHTML = null;
	id('subcategories-cont').classList.remove('subcategories-cont-visible');
	subcategoriesElsArr[id('subcategories').getAttribute('data-categorynum')].classList.remove('subcategory-cont-visible');
}

/**
 * Sets up the click events on category selection to open the subcategory list.
 *
 * @param {HTMLElement} categoriesBlock - The block containing category elements.
 * @param {HTMLCollection} categories - The collection of category elements.
 * @param {HTMLCollection} subcategories - The collection of subcategory elements.
 */
function setUpOpeningSubcategoryList(categoriesBlock, categories, subcategories) {
	
	for (let category of categories) {
		category.onclick = function() {

			let category_num = this.getAttribute('data-categorynum');
			id('subcategories').setAttribute('data-categorynum', category_num);

			categoriesBlock.classList.add('categories-overflow');
			id('subcategories-title').innerHTML = this.lastElementChild.innerHTML;
			subcategories[category_num].classList.add('subcategory-cont-visible');
				
			id('subcategories-cont').classList.add('subcategories-cont-visible');

			id('subcategories-back-button').onclick = function() {
				closeSubcategoriesWindow(categoriesBlock, subcategories, category_num);
			}

		}
	}
}

/**
 * Closes the subcategories window, resets data, and hides the window.
 *
 * @param {HTMLElement} categoriesBlock - The block containing category elements.
 * @param {HTMLCollection} subcategories - The collection of subcategory elements.
 * @param {number} categoryId - The ID of the selected category.
 */
function closeSubcategoriesWindow(categoriesBlock, subcategories, categoryId) {

	categoriesBlock.classList.remove('categories-overflow');
	id('subcategories-cont').classList.remove('subcategories-cont-visible');

	setTimeout(() => {
		id('subcategories-title').innerHTML = null;
		subcategories[categoryId].classList.remove('subcategory-cont-visible');
	}, 300);
}

/**
 * Add onClick to a category list element.
 *
 * @param {HTMLElement} clickEl - Category field html element.
 * @param {HTMLElement} windowElCont - Categories window container html element.
 * @param {HTMLElement} windowEl - Categories window html element.
 * @param {HTMLElement} categories - Categories in the categories window.
 */
function setUpClickOnSubcategory(
	clickEl, windowElCont, windowEl, categories
) {
  	for (let category of categories) {
		category.onclick = function() {
      
			clickEl.firstElementChild.innerHTML = this.firstElementChild.innerHTML;
			clickEl.lastElementChild.value = this.lastElementChild.innerHTML;

			if (windowEl.id === 'categories-expense') {
				clickEl.setAttribute(
					'data-categorynum',
					id('subcategories').getAttribute('data-categorynum')
				);
				clickEl.setAttribute(
					'data-subcategorynum',
					this.getAttribute('data-subcategorynum')
				);
			} else {
				clickEl.setAttribute(
					'data-categorynum',
					this.getAttribute('data-categorynum')
				);
			}

			closeCategoriesWindow(clickEl, windowElCont, windowEl);

    	}
	}
}

/**
 * Change categories window target transformation and close it with animation. Then call resetCategoryWindowData()
 * function toreset subcategories window data.
 *
 * @param {HTMLElement} clickEl - Category button field.
 * @param {HTMLElement} windowElCont - Categories window container.
 * @param {HTMLElement} windowEl - Categories window.
 */
function closeCategoriesWindow(clickEl, windowElCont, windowEl) {
	
	let clickEL_transition = changeFloatingWindowTransformation(clickEl, windowElCont, windowEl);
	
	setTimeout(() => {
		clickEl.style.transition = clickEL_transition;
		closeFloatingWindow(clickEl, windowElCont, windowEl);
	}, 1);

	if (id('subcategories-cont').classList.contains('subcategories-cont-visible'))
		setTimeout(() => {
			resetCategoryWindowData(id('subcategories').getElementsByClassName('subcategory-cont'))
		}, 325);
}





/**
 * Sets up a click event on the 'Save' button for making a record.
 * Checks if the 'make-record-amount' field is not empty before saving the record.
 */
id('make-record-save-button').onclick = () => {
	if (id('make-record-amount').value !== 0) {
		onSaveRecordButton(id('make-record-button'), id('make-record-window-cont'), id('make-record-window'));
	} else {
		animateEmptyFieldError(id('make-record-amount'));
	}
}

/**
 * Save record to the local storage, update account balance, update widgets statistics, close make record window.
 *
 * @param {HTMLElement} clickEl - Make record button HtmlElement.
 * @param {HTMLElement} windowEl_cont - Make record window container HtmlElement.
 * @param {HTMLElement} windowEl - Make record window HtmlElement.
 */
function onSaveRecordButton(clickEl, windowEl_cont, windowEl) {
	let record = getStorageDefaultRecordObject(),
		record_status = id('make-record-window').getAttribute('data-status');

	// update account balance
	updateStorageAccountBalance(record.num, record.type, record.accountId, record.amount, record_status);
	updateAccountInfoInCont(record.accountId, 'Balance', id('accounts'));

	// save record to storage
	localStorage.setItem(`RP${record.num}`, record.type);
	saveDefaultRecordToStorage(record);
	saveRecordDateToStorage(record.num);

	// add or update record in history widget
	operateWidgetsAfterRecord(record, record_status, clickEl, windowEl_cont, windowEl);

	// update data in widgets and reset make record and make transfer window data
	updateDataAfterClosingMakeRecordWindow();
}

/**
 * Sets up a click event on the 'Transfer' button for making a transfer record.
 * Checks if both 'make-record-amount' and 'make-transfer-final-amount' fields are not empty before saving the transfer.
 * Animates an empty field error for each empty field.
 */
id('make-transfer-button').onclick = () => {
	
	if (id('make-record-amount').value !== 0 && id('make-transfer-final-amount').value !== 0) {
		saveTransfer(id('make-record-button'), id('make-record-window-cont'), id('make-record-window'));
	} else {
		if (id('make-record-amount').value === 0) {
			animateEmptyFieldError(id('make-record-amount'));
		}
		if (id('make-transfer-final-amount').value === 0) {
			animateEmptyFieldError(id('make-transfer-final-amount'));
		}
	}
}

/**
 * Save transfer to the local storage, update accounts balance, update widgets statistics, close make record window.
 *
 * @param {HTMLElement} clickEl - Make record button HtmlElement.
 * @param {HTMLElement} windowEl_cont - Make record window container HtmlElement.
 * @param {HTMLElement} windowEl - Make record window HtmlElement.
 */
function saveTransfer(clickEl, windowEl_cont, windowEl) {
	let transfer = getStorageTransferRecordObject(),
		accounts_cont = id('accounts'),
		record_status = id('make-record-window').getAttribute('data-status');

	// decrease balance of 'from account'
	updateStorageAccountBalance(transfer.num, '-', transfer.fromAccountId, transfer.startAmount, record_status);
	updateAccountInfoInCont(transfer.fromAccountId, 'Balance', accounts_cont);
	// increase balance of 'to account'
	updateStorageAccountBalance(transfer.num + 1, '+', transfer.toAccountId, transfer.finalAmount, record_status);
	updateAccountInfoInCont(transfer.toAccountId, 'Balance', accounts_cont);

	saveTransferRecordToStorage(transfer);

	operateWidgetsAfterTransfer(transfer, record_status, clickEl, windowEl_cont, windowEl);

	updateDataAfterClosingMakeRecordWindow();
}


/**
 * Represents record data that can be saved to the local storage.
 *
 * @class StorageDefaultRecord
 *
 * @param {number} num - Record number.
 * @param {string} type - Record type. "-" for expense and "+" for income.
 * @param {string} note - Record note.
 * @param {number} accountId - Account id that holds this record.
 * @param {number} amount - Record amount.
 * @param {number} categoryId - Category ID to which record belongs.
 * @param {number} subcategoryId - Subcategory ID to which record belongs. Has to be connected with the category.
 */
class StorageDefaultRecord {

	num;
	type;
	note;
	accountId;
	amount;
	categoryId;
	subcategoryId;

	constructor(num, type, note, accountId, amount, categoryId, subcategoryId) {
		this.num = num;
		this.type = type;
		this.note = note;
		this.accountId = accountId;
		this.amount = amount;
		this.categoryId = categoryId;
		this.subcategoryId = subcategoryId;
	}
}

/**
 * Get record storage object with fill out data.
 *
 * @return {StorageDefaultRecord} - StorageDefaultRecord object with fill out data from the make record window.
 */
function getStorageDefaultRecordObject() {

	let record = new StorageDefaultRecord(
		Number(id('make-record-window').getAttribute('data-recordnum')),
		id('record-types').getAttribute('data-record-type'),
		id('make-record-note').value,
		id('make-record-account').getAttribute('data-accountnum'),
		Math.abs(id('make-record-amount').value),
		id('make-record-category').getAttribute('data-categorynum'),
		id('make-record-category').getAttribute('data-subcategorynum')
	);

	if (record.type === '+') record.subcategoryId = null;

	return record;
}

/**
 * Represents transfer data that can be saved to the local storage as two separate records - expense record and income.
 *
 * @class StorageTransferRecord
 *
 * @param {number} num - Record number for the first of two record.
 * @param {number} fromAccountId - Account id of the first expense record.
 * @param {number} toAccountId - Account id of the second income record.
 * @param {number} startAmount - Amount of the first expense record.
 * @param {number} finalAmount - Amount of the second income record.
 * @param {number} startRate - Start rate. Start amount and final amount will have ratio [start rate] x [final rate].
 * @param {number} finalRate - Final rate. Start amount and final amount will have ratio [start rate] x [final rate].
 */
class StorageTransferRecord {

	num;
	fromAccountId;
	toAccountId;
	startAmount;
	finalAmount;
	startRate;
	finalRate;

	constructor(num, fromAccountId, toAccountId, startAmount, finalAmount, startRate, finalRate) {
		this.num = num;
		this.fromAccountId = fromAccountId;
		this.toAccountId = toAccountId;
		this.startAmount = startAmount;
		this.finalAmount = finalAmount;
		this.startRate = startRate;
		this.finalRate = finalRate;
	}
}

/**
 * Get transfer storage object with fill out data.
 *
 * @return {StorageTransferRecord} - StorageTransferRecord object with fill out data from the make record window.
 */
function getStorageTransferRecordObject() {

	let transfer = new StorageTransferRecord(
		Number(id('make-record-window').getAttribute('data-recordnum')),
		id('make-record-account').getAttribute('data-accountnum'),
		id('make-transfer-to-account').getAttribute('data-accountnum'),
		Math.abs(id('make-record-amount').value),
		Math.abs(id('make-transfer-final-amount').value),
		Math.abs(id('make-transfer-start-rate').value),
		Math.abs(id('make-transfer-final-rate').value)
	);

	if (
		id('make-record-window').getAttribute('data-status') === 'old' &&
		id('record-types').getAttribute('data-record-type') === '+'
	) {
		transfer.num -= 1;
	}

	return transfer;
}

/**
 * Save default record to local storage.
 *
 * @param {StorageDefaultRecord} record - Record, to save data in the local storage.
 */
function saveDefaultRecordToStorage(record) {

	// save or delete note
	if ((record.note).length !== 0) {
		localStorage.setItem(`RT${record.num}`, record.note);
	} else if (record.note.length === 0 && localStorage.getItem(`RT${record.num}`)) {
		localStorage.removeItem(`RT${record.num}`);
	}
	// account and amount
	localStorage.setItem(`RA${record.num}`, record.accountId);
	localStorage.setItem(`RU${record.num}`, record.amount);
	// category (and subcategory)
	localStorage.setItem(`RC${record.num}`, record.categoryId);
	if (record.subcategoryId) {
		localStorage.setItem(`RS${record.num}`, record.subcategoryId);
	}
}

/**
 * Save transfer record to local storage.
 *
 * @param {StorageTransferRecord} transfer - Record, to save data in the local storage.
 */
function saveTransferRecordToStorage(transfer) {

	// account, amount, rate, category (and subcategory)
	localStorage.setItem(`RP${transfer.num}`, '-');
	localStorage.setItem(`RA${transfer.num}`, transfer.fromAccountId);
	localStorage.setItem(`RU${transfer.num}`, transfer.startAmount);
	localStorage.setItem(`RR${transfer.num}`, transfer.startRate);
	localStorage.setItem(`RC${transfer.num}`, (subcategories_titles.length - 1).toString());
	localStorage.setItem(`RS${transfer.num}`, (subcategories_titles[subcategories_titles.length - 1].length - 1).toString());
	localStorage.setItem(`RB${transfer.num}`, (0).toString());
	saveRecordDateToStorage(transfer.num);
	checkRecordsOrderByDate(transfer.num);

	localStorage.setItem(`RP${transfer.num + 1}`, '+');
	localStorage.setItem(`RA${transfer.num + 1}`, transfer.toAccountId);
	localStorage.setItem(`RU${transfer.num + 1}`, transfer.finalAmount);
	localStorage.setItem(`RR${transfer.num + 1}`, transfer.finalRate);
	localStorage.setItem(`RC${transfer.num + 1}`, (categories_income_titles.length - 1).toString());
	localStorage.setItem(`RB${transfer.num + 1}`, (0).toString());
	saveRecordDateToStorage(transfer.num + 1);
	checkRecordsOrderByDate(transfer.num + 1);
}

/**
 * Save record date to local storage in format ddMMyyyyHHmm.
 *
 * @param {number} recordNum - Number of a record so the date of this record can be found in the local storage.
 */
function saveRecordDateToStorage(recordNum) {
	let inputDate = id('make-record-date').value + '';
	let storageDate =
		inputDate.charAt(0) + inputDate.charAt(1) + inputDate.charAt(2) + inputDate.charAt(3) +
		inputDate.charAt(5) + inputDate.charAt(6) +
		inputDate.charAt(8) + inputDate.charAt(9) +
		inputDate.charAt(11) + inputDate.charAt(12) +
		inputDate.charAt(14) + inputDate.charAt(15);

	localStorage.setItem(`RD${recordNum}`, storageDate);
}


/**
 * Update account balance based on what record status it is. If it is "new" or "repeat", it will increase or decrease
 * account balance based on the passed record type and passed amount.
 * If it is "edit" record status, it will return back old record amount to the account balance (past amount and past
 * account are taken from the local storage by passed record num) and then increase or decrease balance based on the
 * passed record type and passed amount.
 *
 * @param {number} recordNum - Record number.
 * @param {string} recordType - Type of this record - "-" for expense and "+" for income.
 * @param {number} accountId - ID of the account currently connected with this record.
 * @param {number} recordAmount - New amount of this record.
 * @param {string} recordStatus - Status of this record - "new", "repeat" or "edit".
 */
function updateStorageAccountBalance(
	recordNum, recordType, accountId, recordAmount, recordStatus
) {
	let signNumber = Number(recordType + '1');
	let recordAccountBalance = Number(localStorage.getItem(`ABalance${accountId}`));

	if (recordStatus === 'new' || recordStatus === 'repeat') {
		localStorage.setItem(
			`ABalance${accountId}`,
			(recordAccountBalance + (recordAmount * signNumber)).toFixed(2)
		);
	} else {
		if (id('make-record-window').classList.contains('edit-record-status')) {
			updateStorageAccountBalance_EditedRecord(recordNum, signNumber, accountId, recordAmount);
		} else if (id('make-record-window').classList.contains('edit-transfer-status')) {
			updateStorageAccountBalance_EditedTransfer(recordNum, signNumber, accountId, recordAmount);
		}
	}
}

/**
 * Update account balance after record editing.
 *
 * @param {number} recordNum - Number of a record.
 * @param {number} signNumber - Pass 1 if the record is of type income and -1 if it was expense.
 * @param {number} accountId - ID of an account.
 * @param {number} amount - Amount of this record.
 */
function updateStorageAccountBalance_EditedRecord(
	recordNum, signNumber, accountId, amount
) {
	let storageAccountId = Number(localStorage.getItem(`RA${recordNum}`));
	let storageAccountBalance = Number(
			localStorage.getItem(`ABalance${storageAccountId}`)
		).toFixed(2);
	let storageAmount = Number(localStorage.getItem(`RU${recordNum}`));

	localStorage.setItem(
		`ABalance${storageAccountId}`,
		(storageAccountBalance - (storageAmount * signNumber)).toFixed(2)
	);

	let recordAccountBalance = Number(localStorage.getItem(`ABalance${accountId}`));
	localStorage.setItem(
		`ABalance${accountId}`,
		(recordAccountBalance + (amount * signNumber)).toFixed(2)
	);

	for (let account of id('accounts').getElementsByClassName('account')) {
		if (Number(account.getAttribute('data-accountnum')) === storageAccountId) {
			updateAccountInfoInCont(storageAccountId, 'Balance', id('accounts'));
		}
	}
}

/**
 * Update account balance after transfer editing.
 *
 * @param {number} recordNum - Number of a record.
 * @param {number} signNumber - Pass 1 if the record is of type income and -1 if it was expense.
 * @param {number} accountId - ID of an account.
 * @param {number} amount - Amount of this record.
 */
function updateStorageAccountBalance_EditedTransfer(
	recordNum, signNumber, accountId, amount
) {
	let storageAccountId = Number(localStorage.getItem(`RA${recordNum}`));
	let storageAccountBalance = Number(
		Number(localStorage.getItem(`ABalance${storageAccountId}`)).toFixed(2)
	);
	let	storageAmount = Number(localStorage.getItem(`RU${recordNum}`));

	alert(`storageAccountBalance{${storageAccountBalance}} - (storageAmount * signNumber){${storageAmount * signNumber}}`);
	localStorage.setItem(
		`ABalance${storageAccountId}`,
		(storageAccountBalance - (storageAmount * signNumber)).toFixed(2)
	);

	let recordAccountBalance = Number(localStorage.getItem(`ABalance${accountId}`));
	alert(`recordAccountBalance{${recordAccountBalance}} + (amount * signNumber){${amount * signNumber}}`);
	localStorage.setItem(
		`ABalance${accountId}`,
		(recordAccountBalance + (amount * signNumber)).toFixed(2)
	);

	for (let account of id('accounts').getElementsByClassName('account')) {
		if (Number(account.getAttribute('data-accountnum')) === storageAccountId) {
			updateAccountInfoInCont(storageAccountId, 'Balance', id('accounts'));
		}
	}
}


/**
 * Calls updateAllAccountInfo() function withpassed accountId and for every data (color, balance and currency).
 *
 * @param {number} accountId - Account ID.
 */
function updateUIDataOfAccount(accountId) {
	updateAllAccountInfo(accountId, ACCOUNT_INFO.currency);
	updateAllAccountInfo(accountId, ACCOUNT_INFO.balance);
	updateAllAccountInfo(accountId, ACCOUNT_INFO.color);
}

/**
 * Calls updateAccountInfoInCont() function withpassed account info and accountId for all containers that contains
 * accounts (top-bar container and container in settings).
 *
 * @param {number} accountId - Account ID.
 * @param {string} info - Account info (in ACCOUNT_INFO) that has to be changed.
 */
function updateAllAccountInfo(accountId, info) {
	updateAccountInfoInCont(accountId, info, id('accounts'));
	updateAccountInfoInCont(accountId, info, id('settings-category-window-content'));
}

/**
 * Update account information at the passed container.
 *
 * @param {number} accountId - Account ID.
 * @param {string} info - Account info (in ACCOUNT_INFO) that has to be changed.
 * @param {HTMLElement} cont - Html container in which account info has to be changed.
 */
function updateAccountInfoInCont(accountId, info, cont) {
	let accounts = cont.getElementsByClassName('account');

	for (let account of accounts) {
		if (Number(account.getAttribute('data-accountnum')) === accountId) {
			updateAccountInfo(account, accountId, info);
		}
	}
}

/**
 * Update account information to the passed account Html element based on the local storage.
 *
 * @param {HTMLElement} account - Account Html element that has to be updated.
 * @param {number} accountId - Account ID.
 * @param {string} info - Account information (in ACCOUNT_INFO) that has to be updated.
 */
function updateAccountInfo(account, accountId, info) {

	if (info === ACCOUNT_INFO.currency) {

		account.firstElementChild.innerText = localStorage.getItem(`A${info}${accountId}`);

	} else if (info === ACCOUNT_INFO.balance) {

		let holding_el = freezeWidthOfEl(account.lastElementChild);
		account.lastElementChild.innerText = getAccountBalance(accountId);
		updateWidthOfEl(account.lastElementChild, holding_el);

	} else if (info === ACCOUNT_INFO.color) {

		let color = localStorage.getItem(`A${info}${accountId}`);
		account.style.background = '#' + color;
		if (color === '050505' && !account.classList.contains('account-dark-color')) {
			account.classList.add('account-dark-color');
		} else if (color !== '050505' && account.classList.contains('account-dark-color')) {
			account.classList.remove('account-dark-color');
		}

	}
}

/**
 * If passed account html element has black color, add account-dark-color class to it so if dark theme is applied,
 * its color will be inverted to the white one.
 */
function checkAccountColor(account) {
	let color = account.style.background;

	if (color === 'rgb(5, 5, 5)' && !account.classList.contains('account-dark-color')) {
		account.classList.add('account-dark-color');
	} else if (color !== 'rgb(5, 5, 5)' && account.classList.contains('account-dark-color')) {
		account.classList.remove('account-dark-color');
	}
}


/**
 * Update widgets data with animation based on the record status ("new", "old", "repeat") and close make record window.
 *
 * @param {StorageDefaultRecord} record - Record object to take data from.
 * @param {string} recordStatus - Status of this record ("new", "old", "repeat").
 * @param {HTMLElement} clickEl - Make record button HtmlElement.
 * @param {HTMLElement} windowElCont - Make record window container HtmlElement.
 * @param {HTMLElement} windowEl - Make record window HtmlElement.
 */
function operateWidgetsAfterRecord(
	record, recordStatus, clickEl, windowElCont, windowEl
) {

	if (recordStatus === 'new') {

		updateHistoryForNewRecord(record.num, record.type, record.accountId);
		closeFloatingWindow(clickEl, windowElCont, windowEl);

	} else if (recordStatus === 'old') {

		for (let recordEl of id('history').getElementsByClassName('record')) {
			if (Number(recordEl.getAttribute('data-recordnum')) === record.num) {
				updateHistoryForEditedRecord(record.num, recordEl);
				break;
			}
		}

	} else if (recordStatus === 'repeat') {

		// increase records count in storage
		localStorage.setItem('RCount', record.num);
		closeEditRecordWindowByReconnectMethod(clickEl, windowElCont, windowEl);

	}
}

/**
 * Update widgets data with animation based on the record status ("new", "old", "repeat") and close make record window.
 *
 * @param {StorageTransferRecord} record - Record transfer object to take data from.
 * @param {string} recordStatus - Status of this record ("new", "old", "repeat").
 * @param {HTMLElement} clickEl - Make record button HtmlElement.
 * @param {HTMLElement} windowElCont - Make record window container HtmlElement.
 * @param {HTMLElement} windowEl - Make record window HtmlElement.
 */
function operateWidgetsAfterTransfer(
	record, recordStatus, clickEl, windowElCont, windowEl
) {
	if (recordStatus === 'new') {

		localStorage.setItem('RCount', (record.num + 1).toString());
		uploadRecordsToHistoryAnimated();
		closeFloatingWindow(id('make-record-button'), id('make-record-window-cont'), id('make-record-window'));

	} else if (recordStatus === 'old') {

		if (
			id('make-record-window').getAttribute('data-status') === 'old' &&
			id('record-types').getAttribute('data-record-type') === '+'
		)
			record.num += 1;

		// close edit transfer window
		for (let recordEl of id('history').getElementsByClassName('record')) {
			if (Number(recordEl.getAttribute('data-recordnum')) === record.num) {
				closeEditRecordWindowByReconnectMethod(
					recordEl, id('make-record-window-cont'), id('make-record-window')
				);
				break;
			}
		}

	} else if (recordStatus === 'repeat') {

		localStorage.setItem('RCount', (record.num + 1).toString());
		closeEditRecordWindowByReconnectMethod (clickEl, windowElCont, windowEl);

	}
}

/**
 * Update data in every widget and reset data in make record fields.
 */
function updateDataAfterClosingMakeRecordWindow() {

	// update data in every widget
	updateWidgetsData(0, 1, 1, [0, 0], 1);

	// reset make record window data
	setTimeout(() => {
		resetMakeTransferWindowData();
		resetMakeRecordWindowData();
		enableScrolling();
	}, 390);
}


/**
 * Decide how exactly add new record to record history element based on record date, type, account number.
 *
 * @param record_num - Number of a record in local storage.
 * @param record_type - Type of record.
 * @param record_account - Account number saved in this record.
 */
function updateHistoryForNewRecord(record_num, record_type, record_account) {

	// increase records count in storage
	localStorage.setItem('RCount', record_num);

	let history_type = id('history-type-nav').getAttribute('data-history-type');

	if (
		(
			id('history').firstElementChild &&
			getRecordDateFormat(
				 Number(id('history').firstElementChild.getAttribute('data-recordnum'))
			) > getRecordDateFormat(record_num)
		) ||
		(history_type !== 'all' && record_type !== history_type) ||
		id('accounts').getAttribute('data-accountnum') !== record_account
	) {
		checkRecordsOrderByDate(Number(record_num));
		uploadRecordsToHistoryAnimated();
	} else {
		record_num = checkRecordsOrderByDate(Number(record_num));

		// hide history empty message
		if (id('history-empty').classList.contains('visible'))
			id('history-empty').classList.remove('visible');

		// add record to history
		addRecordToHistory(record_num, record_account, 'afterbegin');
		animateAddingRecord(id('history').firstElementChild);
		id('history').firstElementChild.onclick = function() {
			setUpClickOnRecord(this);
		};
	}

}

/**
 * Add a new record to record history container.
 *
 * @param record_num - Number of a record in local storage.
 * @param record_account - Account number saved in this record.
 * @param place - String to pass to insertAdjacentHtml function todefine where to place new record.
 */
function addRecordToHistory(record_num, record_account, place) {

	let history_cont = id('history');
	let recordEl = constructRecordEl(record_num, record_account);
	let hr = `<hr class="small-hr">`;
	
	if (history_cont.firstElementChild) {
		history_cont.insertAdjacentHTML(place, hr);
	}
	history_cont.insertAdjacentHTML(place, recordEl);
}

/**
 * Get either default record element or transfer record element as string.
 *
 * @param record_num - Number of a record in local storage.
 * @param record_account - Account saved in a record.
 *
 * @return string - Returns record HtmlDomElement as string.
 */
function constructRecordEl(record_num, record_account) {
	
	if ( !(localStorage.getItem(`RB${record_num}`)) || Number(localStorage.getItem(`RB${record_num}`)) !== 0 )
		return getDefaultRecordEl(record_num, record_account);
	else return getTransferRecordEl(record_num, record_account);
}

/**
 * Get default record element as string.
 *
 * @param record_num - Number of a record in local storage.
 * @param record_account - Account number saved in a record.
 *
 * @return string - Returns record HtmlDomElement as string.
 */
function getDefaultRecordEl(record_num, record_account) {
	
	let record_date = getRecordDate_DayMonth(record_num),
		category_num = localStorage.getItem(`RC${record_num}`),
		subcategory_num = localStorage.getItem(`RS${record_num}`),
		icon, title,
		record_note = '';

	if (localStorage.getItem(`RT${record_num}`))
		record_note = `<h4 class="note">${localStorage.getItem('RT' + record_num)}</h4>`;

	if (localStorage.getItem(`RP${record_num}`) === '-') {
		icon = SUBCATEGORY_ICONS[category_num][subcategory_num];
		title = subcategories_titles[category_num][subcategory_num];
	} else {
		icon = CATEGORY_INCOME_ICONS[category_num];
		title = categories_income_titles[category_num];
	}
	
	return (`
		<div class="record" data-recordnum="${record_num}">
			<h4 class="date">${record_date}</h4>
			${record_note}
			<div class="category" data-categorynum="${category_num}" data-subcategorynum="${subcategory_num}">
				<div>${icon}</div>
				<h3>${title}</h3>
			</div>
			<div class="amount">
				<h3>${localStorage.getItem('RP' + record_num)}</h3>
				<h3>${getReadableNumber(
					Number(
						Number(localStorage.getItem('RU' + record_num)).toFixed(2)
					)
				)}</h3>
				<h3>${localStorage.getItem('ACurrency' + record_account)}</h3>
			</div>
		</div>
	`);
}

/**
 * Get transfer record element as string.
 *
 * @param record_num - Number of a record in local storage.
 * @param record_account - Account number saved in a record.
 *
 * @return string - Returns record HtmlDomElement as string.
 */
function getTransferRecordEl(record_num, record_account) {

	let transfer_pair = getTransfersPairNums(record_num);
	let record_date = getRecordDate_DayMonth(record_num),
		account_num, account_field_title,
		from_account = localStorage.getItem(`RA${transfer_pair.from}`),
		above_category_num = localStorage.getItem(`RB${record_num}`),
		icon = ABOVE_CATEGORY_ICONS[above_category_num],
		title = above_categories_titles[above_category_num],
		account_dark_class = '';

	if (from_account === record_account) {
		account_num = localStorage.getItem(`RA${transfer_pair.to}`);
		account_field_title = getStrings(localStorage.getItem('L')).to_account;
	} else {
		account_num = from_account
		account_field_title = getStrings(localStorage.getItem('L')).from_account;
	}

	let account_color = localStorage.getItem(`AColor${account_num}`);

	if (account_color === '050505')
		account_dark_class = 'account-dark-color';
	account_color = "#" + account_color;
	
	return (`
		<div class="record" data-recordnum="${record_num}">
			<div class="above-category-cont">
				<h4 class="date">${record_date}</h4>
				<div class="above-category" data-categorynum="${above_category_num}" style="background: var(--primary-color); color: var(--opposite-color);">
					<div>${icon}</div>
					<h3>${title}</h3>
				</div>
			</div>
			<div class="transfer-accounts">
				<h4>${account_field_title}</h4>
				<span class="${account_dark_class}" style="color: #ddd; background: ${account_color};">
					${localStorage.getItem('ACurrency' + account_num)}
				</span>
			</div>
			<div class="amount">
				<h3>${localStorage.getItem('RP' + record_num)}</h3>
				<h3>${getReadableNumber( Number(Number(localStorage.getItem('RU' + record_num)).toFixed(2)) )}</h3>
				<h3>${localStorage.getItem('ACurrency' + record_account)}</h3>
			</div>
		</div>
	`);
}

/**
 * Get date as string in format dd.MM.
 *
 * @param record_num - Number of a record in local storage.
 *
 * @return string - Returns record HtmlDomElement as string.
 */
function getRecordDate_DayMonth(record_num) {
	let storage_date = localStorage.getItem(`RD${record_num}`);

	let day = storage_date.charAt(6) + storage_date.charAt(7),
		month = storage_date.charAt(4) + storage_date.charAt(5);

	return (Number(day) + '.' + Number(month));
}

/**
 * Run animation of displaying a new record in record history container.
 *
 * @param record - Record HtmlDomElement to run animation on.
 */
function animateAddingRecord(record) {

	// .history has padding-block and gap set up on 15px, and small-hr has height 3px: 15 * 2 - 3 = 27
	let margin_top = 27 + record.clientHeight;

	record.style.marginTop = `-${margin_top}px`;

	setTimeout(() => {
		record.style.transition = 'margin-top .4s .4s';
		record.style.marginTop = '0px';

		setTimeout(() => {
			record.style.transition = null;
		}, 800);
	}, 1);
}


/**
 * Decide how exactly update record data and which animation to use based on this record note and date.
 *
 * @param record_num - Number of a record in local storage.
 * @param record - Record HtmlDomElement.
 */
function updateHistoryForEditedRecord(record_num, record) {

	updateRecordInHistory(record_num, record);

	let compare_date = new Date(getRecordDateFormat(record_num));
	let make_record_note_len = id('make-record-note').value.length,
		record_note_classname = record.firstElementChild.nextElementSibling.className;

	if (
		checkRecordsOrderByDate(Number(record_num)) !== record_num ||
		getRecordDateFormat(record_num) < getDateFormat(compare_date) ||
		id('make-record-account').getAttribute('data-accountnum') !==
			id('make-record-account').firstElementChild.getAttribute('data-accountnum') ||
		( make_record_note_len !== 0 && record_note_classname !== 'note' ||
			make_record_note_len === 0 && record_note_classname === 'note' )
	) {
		reconnectFloatingWindow(record, id('history'), id('make-record-window-cont'), id('make-record-window'));
		closeReconnectedFloatingWindow(id('make-record-window-cont'), id('make-record-window'));
		uploadRecordsToHistoryAnimated();
	} else {
		changeFloatingWindowTransformation(record, id('make-record-window-cont'), id('make-record-window'));
		closeFloatingWindow(record, id('make-record-window-cont'), id('make-record-window'));
	}
}

/**
 * Update record data in a record history container.
 *
 * @param record_num - Number of a record in local storage.
 * @param recordEl - Record HtmlDomElement.
 */
function updateRecordInHistory(record_num, recordEl) {

	let record_date = getRecordDate_DayMonth(record_num),
		category_num = localStorage.getItem(`RC${record_num}`),
		subcategory_num = localStorage.getItem(`RS${record_num}`),
		icon, title;

	if (localStorage.getItem(`RP${record_num}`) === '-') {
		icon = SUBCATEGORY_ICONS[category_num][subcategory_num];
		title = subcategories_titles[category_num][subcategory_num];
	} else {
		icon = CATEGORY_INCOME_ICONS[category_num];
		title = categories_income_titles[category_num];
	}

	// update date
	recordEl.firstElementChild.innerHTML = record_date;
	// update note
	let record_noteEl = updateRecordNoteInHistory(record_num, recordEl);
	// update category
	updateRecordCategoryInHistory(record_num, recordEl, record_noteEl, icon, title);
	// update amount
	recordEl.lastElementChild.firstElementChild.nextElementSibling.innerHTML = getReadableNumber(
		Number(
			Number(localStorage.getItem(`RU${record_num}`)).toFixed(2)
		)
	);
	// update currency
	recordEl.lastElementChild.lastElementChild.innerHTML = localStorage.getItem(`ACurrency${ localStorage.getItem('RA' + record_num) }`);
}

/**
 * Update record note in the record history container.
 *
 * @param record_num - Number of a record in local storage.
 * @param recordEl - Record HtmlDomElement.
 *
 * @return HtmlElement - Note html element of a record html element.
 */
function updateRecordNoteInHistory(record_num, recordEl) {
	let record_noteEl = null;
		
	if (recordEl.firstElementChild.nextElementSibling.className === 'note')
		record_noteEl = recordEl.firstElementChild.nextElementSibling;
		
	if (record_noteEl != null) {
		record_noteEl.innerText = localStorage.getItem(`RT${record_num}`);
	}

	return record_noteEl;
}

/**
 * Update record category in the record history container.
 *
 * @param record_num - Number of a record in local storage.
 * @param recordEl - Record HtmlDomElement.
 * @param record_noteEl - Note html element of a record html element.
 * @param icon - Category svg icon.
 * @param name - Category name.
 */
function updateRecordCategoryInHistory(record_num, recordEl, record_noteEl, icon, name) {
	
	let categoryEl;
	if (record_noteEl != null) categoryEl = record_noteEl.nextElementSibling;
	else categoryEl = recordEl.lastElementChild.previousElementSibling;

	categoryEl.setAttribute('data-categorynum', localStorage.getItem(`RC${record_num}`));
	categoryEl.setAttribute('data-subcategorynum', localStorage.getItem(`RS${record_num}`));
	categoryEl.firstElementChild.innerHTML = icon;
	categoryEl.lastElementChild.innerHTML = name;
}

/**
 * Check order of all records in local storage by passed order number. Order based on records date.
 *
 * @param record_num - Number of a record in local storage.
 *
 * @return number - Based on a record order number passed to this function returnnew number if the order was changed
 * and the same number if the order was kept.
 */
function checkRecordsOrderByDate(record_num) {

	for (;
		localStorage.getItem(`RD${record_num - 1}`) &&
		getRecordDateFormat(record_num - 1) > getRecordDateFormat(record_num);
		record_num--
	)			
		swapRecords(record_num, record_num - 1);
		
	for (;
		localStorage.getItem(`RD${record_num + 1}`) &&
		getRecordDateFormat(record_num + 1) < getRecordDateFormat(record_num);
		record_num++
	)			
		swapRecords(record_num, record_num + 1);

	return record_num;
}

/**
 * Swap two records in the local storage.
 *
 * @param a - Number of the first record.
 * @param b - Number of the second record.
 */
function swapRecords(a, b) {

	let arr = [
		// tyPe, amoUnt, Account, Category
		'P', 'U', 'A', 'C',
		// Minute, Hour, Day, Month, Year
		'M', 'H', 'D', 'N', 'Y'
	];

	for (let i = 0; i < arr.length; i++) {
		let temp = localStorage.getItem(`R${arr[i]}${a}`);
		localStorage.setItem(`R${arr[i]}${a}`, localStorage.getItem(`R${arr[i]}${b}`));
		localStorage.setItem(`R${arr[i]}${b}`, temp);
	}
	
	// Subcategory and noTe (if exist)
	swapRecordsPartsByArray (['S', 'T'], a, b);
	
	// swap 'rate' and 'above category' if it is transfer
	if (localStorage.getItem(`RR${a}`) || localStorage.getItem(`RR${b}`))
		swapRecordsPartsByArray (['R', 'B'], a, b);
}

/**
 * Swap only part of two records.
 *
 * @param arr - Array of two chars. Each one represents a data that has to be swapped.
 * @param a - Number of the first record.
 * @param b - Number of the second record.
 */
function swapRecordsPartsByArray(arr, a, b) {

	for (let i = 0; i < arr.length; i++) {
		if (localStorage.getItem(`R${arr[i]}${a}`) && localStorage.getItem(`R${arr[i]}${b}`)) {

			let temp = localStorage.getItem(`R${arr[i]}${a}`);
			localStorage.setItem(`R${arr[i]}${a}`, localStorage.getItem(`R${arr[i]}${b}`));
			localStorage.setItem(`R${arr[i]}${b}`, temp);

		} else if (localStorage.getItem(`R${arr[i]}${a}`) || localStorage.getItem(`R${arr[i]}${b}`)) {
			if (localStorage.getItem(`R${arr[i]}${a}`)) {

				localStorage.setItem(`R${arr[i]}${b}`, localStorage.getItem(`R${arr[i]}${a}`));
				localStorage.removeItem(`R${arr[i]}${a}`);

			} else if (localStorage.getItem(`R${arr[i]}${b}`)) {

				localStorage.setItem(`R${arr[i]}${a}`, localStorage.getItem(`R${arr[i]}${b}`));
				localStorage.removeItem(`R${arr[i]}${b}`);

			}
		}
	}
}





const SETTINGS_CATEGORIES = id('settings-categories').getElementsByTagName('div');

id('settings-button-cont-mobile').onclick = function() {
	openSettings(this);
}
id('settings-button-desktop').onclick = function() {
	openSettings(this);
}

/**
 * Open the settings modal for user configuration triggered by a click event on the specified element.
 *
 * @param {HTMLElement} clickEl - The HTML element triggering the settings modal.
 */
function openSettings(clickEl) {

	let windowEl_cont = id('settings-cont'),
		close_button = windowEl_cont.lastElementChild.lastElementChild;
	
	disableScrolling();

	openWindowByBubbleQueueMethod(
		clickEl, windowEl_cont, close_button,
		id('settings-categories').getElementsByTagName('div')
	);

	close_button.onclick = () => {
		enableScrolling();
		closeWindowByBubbleQueueMethod(
			clickEl, windowEl_cont, close_button,
			id('settings-categories').getElementsByTagName('div')
		);
	}
}

// set up click on settings categories
for (let category of SETTINGS_CATEGORIES) {
	category.onclick = function() {
		
		// open settings category window

		let settings_transition = id('settings').style.transition;
		prepareSettingsCategoryWindow(id('settings-category-window-cont'), this.lastElementChild.getAttribute('data-category-name'), this);
		
		openWindowBlock(id('settings-category-window-cont'), id('settings-category-window-cont').lastElementChild);

		// set up closing settings category window
		id('settings-category-window-cont').firstElementChild.onclick = () => {
			
			id('settings').style.transition = settings_transition;
			closeSettingsCategoryWindow();

			if (id('top-margin-preview-window').classList.contains('top-margin-preview-window-visible'))
				closeTopMarginPreviewWindow();
		}

	}
}

/**
 * Prepares the settings category window with content based on the selected category.
 *
 * @param {HTMLElement} windowElCont - The container for the settings category window.
 * @param {string} category - The selected category.
 * @param {HTMLElement} clickEl - The HTML element triggering the settings category window.
 */
function prepareSettingsCategoryWindow(windowElCont, category, clickEl) {
	let content_cont = id('settings-category-window-content');
	let button_cont = id('settings-category-window-button');

	windowElCont.lastElementChild.firstElementChild.firstElementChild.innerHTML = clickEl.lastElementChild.innerText;

	if (category === 'Other') uploadSettingsCategoryData_Other(content_cont, button_cont);
	else if (category === 'Reset data') uploadSettingsCategoryData_Reset(content_cont, button_cont);
	else if (category === 'Language') uploadSettingsCategoryData_Language(content_cont, button_cont);
	else if (category === 'Appearance') uploadSettingsCategoryData_Appearance(content_cont, button_cont);
	else if (category === 'Top margin') uploadSettingsCategoryData_Margin(content_cont, button_cont);
	else if (category === 'Accounts') uploadSettingsCategoryData_Accounts(content_cont, button_cont);
}

/**
 * Closes the settings category window, clearing its content.
 */
function closeSettingsCategoryWindow() {

	closeWindowBlock(id('settings-category-window-cont'), id('settings-category-window-cont').lastElementChild);

	setTimeout(() => {
		id('settings-category-window-content').innerHTML = null;
		id('settings-category-window-button').innerHTML = null;
		id('settings-category-window-button').classList.remove('button-block-hide');
	}, 300);
}



/* Other */
/**
 * Uploads content for the 'Other' category in the settings modal.
 *
 * @param {HTMLElement} contentCont - The container for the content in the 'Other' category.
 * @param {HTMLElement} buttonCont - The container for the buttons in the 'Other' category.
 */
function uploadSettingsCategoryData_Other(contentCont, buttonCont) {
	let lang = localStorage.getItem('L');

	contentCont.insertAdjacentHTML('afterbegin', `
		<p class="description">
			${getStrings(lang).notification_sound_setting_description}
		</p>
		<label class="radio-button-label">
			<input type="radio" name="notification-sound" data-ntf-num="1">
			<audio controls>
				<source src="Main/sounds/notification_1.mp3" type="audio/mpeg">
			</audio>
		</label>
		<label class="radio-button-label">
			<input type="radio" name="notification-sound" data-ntf-num="2">
			<audio controls>
				<source src="Main/sounds/notification_2.mp3" type="audio/mpeg">
			</audio>
		</label>
		<label class="radio-button-label">
			<input type="radio" name="notification-sound" data-ntf-num="3">
			<audio controls>
				<source src="Main/sounds/notification_3.mp3" type="audio/mpeg">
			</audio>
		</label>
		<label class="radio-button-label">
			<input type="radio" name="notification-sound" data-ntf-num="0">
			${getStrings(lang).without_sound}
		</label>
	`);
	buttonCont.insertAdjacentHTML('afterbegin',
		`<hr class="big-hr">
		<input type="button" value="Save" class="clickable-button" id="save-notification-sound-button">`
	);

	let soundNum = uploadSelectedNtfSoundToOtherSettingsWindow(contentCont);
	id('save-notification-sound-button').setAttribute('data-ntf-num', soundNum);

	setClickOnNftRadioButtonsInOtherSettingsWindow(contentCont);
	setUpClickOnSaveNtfSoundButton();
}

/**
 * Uploads the selected notification sound to the 'Change notification sound' window.
 *
 * @param {HTMLElement} contentCont - The container for the content in the 'Other' category.
 *
 * @return {string} - Notification sound number saved in the local storage.
 */
function uploadSelectedNtfSoundToOtherSettingsWindow(contentCont) {
	let soundNum = localStorage.getItem('NS');

	for (let el of contentCont.getElementsByTagName('input'))
		if (el.getAttribute('data-ntf-num') === soundNum)
			el.setAttribute('checked', '');

	return soundNum;
}

/**
 * Sets up click events on radio buttons in the "Other settings" window to update the selected sound for saving.
 *
 * @param {HTMLElement} container - The container for the content in the 'Other' category.
 */
function setClickOnNftRadioButtonsInOtherSettingsWindow(container) {

	for (let button of container.getElementsByTagName('input')) {
		button.onclick = function () {
			id('save-notification-sound-button').setAttribute(
				"data-ntf-num",
				this.getAttribute("data-ntf-num")
			);
		}
	}
}

/**
 * Sets up the click event for the 'Save' button in the 'Other' category.
 */
function setUpClickOnSaveNtfSoundButton() {
	id('save-notification-sound-button').onclick = function() {
		localStorage.setItem('NS', this.getAttribute("data-ntf-num"));
		closeSettingsCategoryWindow();
	}
}



/* Reset data */
/**
 * Uploads content for the 'Reset data' category in the settings modal.
 *
 * @param {HTMLElement} contentCont - The container for the content in the 'Reset data' category.
 * @param {HTMLElement} buttonCont - The container for the buttons in the 'Reset data' category.
 */
function uploadSettingsCategoryData_Reset(contentCont, buttonCont) {
	let lang = localStorage.getItem('L');
	
	contentCont.insertAdjacentHTML('afterbegin',
		`<p class="description">
			${getStrings(lang).reset_data_message}
		</p>
		<input type="button" value="" class="clickable-button" id="reset-data-button">`
	);
	buttonCont.classList.add('button-block-hide');
	id('reset-data-button').value = getStrings(lang).reset_data;

	id('reset-data-button').onclick = () => {
		localStorage.clear();
		enableScrolling();
		window.scrollTo(0, 0);
		window.location.reload();
	}
}



/* Language */
/**
 * Uploads content for the 'Language' category in the settings modal.
 *
 * @param {HTMLElement} contentCont - The container for the content in the 'Language' category.
 * @param {HTMLElement} buttonCont - The container for the buttons in the 'Language' category.
 */
function uploadSettingsCategoryData_Language(contentCont, buttonCont) {
	let lang = localStorage.getItem('L');

	contentCont.insertAdjacentHTML('afterbegin',
		`<p class="description">
			${getStrings(lang).language_setting_description}
		</p>
		<label class="radio-button-label">
			<input type="radio" name="radio-language" lang="en">
			${getStrings(lang).english}
		</label>
		<label class="radio-button-label">
			<input type="radio" name="radio-language" lang="cz">
			${getStrings(lang).czech}
		</label>
		<label class="radio-button-label">
			<input type="radio" name="radio-language" lang="de">
			${getStrings(lang).german}
		</label>
		<label class="radio-button-label">
			<input type="radio" name="radio-language" lang="ru">
			${getStrings(lang).russian}
		</label>
		<label class="radio-button-label">
			<input type="radio" name="radio-language" lang="ua">
			${getStrings(lang).ukrainian}
		</label>`
	);
	buttonCont.insertAdjacentHTML('afterbegin',
		`<hr class="big-hr">
		<input type="button" value="${getStrings(lang).save}" class="clickable-button" id="save-language-button">`
	);

	uploadSelectedLanguageToChangeLanguageWindow(contentCont);
	id('save-language-button').setAttribute('lang', lang);
	
	setClickOnLanguageButtons(contentCont);
	setUpClickOnSaveLanguageButton();
}

/**
 * Uploads the selected language to the 'Change Language' window.
 *
 * @param {HTMLElement} contentCont - The container for the content in the 'Language' category.
 */
function uploadSelectedLanguageToChangeLanguageWindow(contentCont) {
	let lang = localStorage.getItem('L');

	for (let el of contentCont.getElementsByTagName('input'))
		if (el.getAttribute('lang') === lang)
			el.setAttribute('checked', '');
}

/**
 * Sets up click events on language buttons to update the selected language for saving.
 *
 * @param {HTMLElement} container - The container for the content in the 'Language' category.
 */
function setClickOnLanguageButtons(container) {

	for (let button of container.getElementsByTagName('input')) {
		button.onclick = function () {
			id('save-language-button').setAttribute('lang', this.getAttribute('lang'));
		}
	}
}

/**
 * Sets up the click event for the 'Save' button in the 'Language' category.
 */
function setUpClickOnSaveLanguageButton() {
	let saveButton = id('save-language-button');

	saveButton.onclick = function() {
		if (localStorage.getItem('L') !== saveButton.getAttribute("lang")) {
			localStorage.setItem('L', saveButton.getAttribute("lang"));
			window.location.reload();
		} else {
			closeSettingsCategoryWindow();
		}
	}
}



/* Appearance */
/**
 * Uploads content for the 'Appearance' category in the settings modal.
 *
 * @param {HTMLElement} contentCont - The container for the content in the 'Appearance' category.
 * @param {HTMLElement} buttonCont - The container for the buttons in the 'Appearance' category.
 */
function uploadSettingsCategoryData_Appearance(contentCont, buttonCont) {

	let lang = localStorage.getItem('L'),
		off_word = getStrings(lang).off_turn_off_meaning,
		on_word = getStrings(lang).on_turn_on_meaning;
	
	contentCont.insertAdjacentHTML('afterbegin',
		`<div class="switch-button-block">
			<p class="description">
				${getStrings(lang).enable_blurring}
			</p>
			<div class="switch-cont">
				<p>${off_word}</p>
				<div class="switch">
					${getSwitchInput(Number(localStorage.getItem('B')))}
					<span class="switch-slider"></span>
				</div>
				<p>${on_word}</p>
			</div>
		</div>
		<div class="switch-button-block">
			<p class="description">
				${getStrings(lang).run_animation_on_start}
			</p>
			<div class="switch-cont">
				<p>${off_word}</p>
				<div class="switch">
					${getSwitchInput(Number(localStorage.getItem('SA')))}
					<span class="switch-slider"></span>
				</div>
				<p>${on_word}</p>
			</div>
		</div>
		<hr class="small-hr">
		<div class="switch-button-block">
			<p class="description">
				${getStrings(lang).auto_adjust_theme}
			</p>
			<div class="switch-cont">
				<p>${off_word}</p>
				<div class="switch">
					${getSwitchInput(Number(localStorage.getItem('TA')))}
					<span class="switch-slider"></span>
				</div>
				<p>${on_word}</p>
			</div>
		</div>
		<div class="themes-cont">
			<div theme="l" class="theme-cont" style="background: #ededed;" id="theme-button-light">
				<div class="theme-account"></div>
				<div class="theme-widget"></div>
				<div class="theme-button"></div>
			</div>
			<div theme="d" class="theme-cont" style="background: #121212;" id="theme-button-dark">
				<div class="theme-account"></div>
				<div class="theme-widget"></div>
				<div class="theme-button"></div>
			</div>
			<div theme="b" class="theme-cont" style="background: #1B252F;" id="theme-button-darkblue">
				<div class="theme-account"></div>
				<div class="theme-widget"></div>
				<div class="theme-button"></div>
			</div>
		</div>`
	);
	buttonCont.classList.add('button-block-hide');
	
	let switch_buttons = contentCont.getElementsByClassName('switch');
	// blurring
	switch_buttons[0].firstElementChild.onclick = function() {
		localStorage.setItem('B', (this.checked === true).toString());
		reapplyBlur(localStorage.getItem('B') === "true");
	}
	// start animation
	switch_buttons[1].firstElementChild.onclick = function() {
		localStorage.setItem('SA', Number(this.checked).toString());
	}
	// auto theme
	switch_buttons[2].firstElementChild.onclick = function() {
		changeAutomaticThemeStatusInStorage(this);
		applyTheme(localStorage.getItem('T'));
	}
	// set up click on themes
	setUpClickOnThemes(contentCont, switch_buttons[2].firstElementChild);
}

/**
 * Gets the HTML input element for the switch, either checked or unchecked.
 *
 * @param {number} checked - The value indicating whether the switch is checked.
 *
 * @returns {string} - The HTML code for the switch input.
 */
function getSwitchInput(checked) {
	if (checked) return (`<input type="checkbox" checked>`);
	else return (`<input type="checkbox">`);
}

/**
 * Sets up the click event on theme elements within the 'Appearance' category.
 *
 * @param {HTMLElement} container - The container for the content in the 'Appearance' category.
 * @param {HTMLInputElement} switchButton - The switch button for the 'Auto Adjust Theme' option.
 */
function setUpClickOnThemes(container, switchButton) {

	for ( let el of container.lastElementChild.getElementsByClassName('theme-cont') )
		el.onclick = () => {
			if (el.getAttribute('theme') !== localStorage.getItem('T')) {

				if (switchButton.checked) {
					switchButton.checked = false;
					changeAutomaticThemeStatusInStorage(switchButton);
				}

				id('settings-category-window-cont').classList.add('dark');
				id('settings').style.transition = '0s background';
				updatePieChart();

				setTimeout(() => {
					changeTheme(el.getAttribute('theme'));
					setTimeout(() => {
						id('settings-category-window-cont').classList.remove('dark');
					}, 150);
				}, 300);
				
			}
		}
}

/**
 * Changes the automatic theme status in the storage based on the switch button.
 *
 * @param {HTMLInputElement} switchButton - The switch button for the 'Auto Adjust Theme' option.
 */
function changeAutomaticThemeStatusInStorage(switchButton) {
	localStorage.setItem('TA', Number(switchButton.checked).toString());
}

/**
 * Changes the theme in the storage and applies the theme.
 *
 * @param {string} theme - The theme identifier.
 */
function changeTheme(theme) {
	localStorage.setItem('T', theme);
	applyTheme(theme);
}



/* Top margin */
/**
 * Uploads content for the 'Top Margin' category in the settings modal.
 *
 * @param {HTMLElement} contentCont - The container for the content in the 'Top Margin' category.
 * @param {HTMLElement} buttonCont - The container for the buttons in the 'Top Margin' category.
 */
function uploadSettingsCategoryData_Margin(contentCont, buttonCont) {
	let lang = localStorage.getItem('L');
	
	contentCont.insertAdjacentHTML('afterbegin',
		`<p class="description">${getStrings(lang).top_margin_setting_description}</p>
		<input topmargin="" type="range" class="top-margin-range interactive-field" id="top-margin-range" value="0" min="0" max="25" step="1">`
	);
	buttonCont.insertAdjacentHTML('afterbegin',
		`<hr class="big-hr">
		<input type="button" value="Save" class="clickable-button" id="top-margin-save-button">`
	);
	id('top-margin-save-button').value = getStrings(lang).save;

	prepareTopMarginSettingsCategory();

	id('top-margin-save-button').onclick = () => {
		localStorage.setItem('TM', (Number(id('top-margin-range').value) * 2).toString());
		applyTopMargin();
		closeTopMarginPreviewWindow();
		closeSettingsCategoryWindow();
	}

	openTopMarginPreviewWindow();
}

/**
 * Prepares the top margin settings category, including the preview window and range slider.
 */
function prepareTopMarginSettingsCategory() {
	let preview_window = id('top-margin-preview-window');

	// upload account to preview top margin window
	preview_window.innerHTML = constructAccountEl(1);

	setUpListenerOnTopMarginRange();
	
	id('top-margin-range').setAttribute(
		'value',
		(Number(localStorage.getItem('TM')) / 2).toString()
	);
	preview_window.firstElementChild.style.transition = 'transform .2s';
	preview_window.firstElementChild.style.transform = `translateY(${Number(localStorage.getItem('TM'))}px)`;
}

/**
 * Opens the top margin preview window with animation.
 */
function openTopMarginPreviewWindow() {

  id('top-margin-preview-window').classList.add('top-margin-preview-window-visible');

  setTimeout(() => {
    id('top-margin-preview-window').classList.add('top-margin-preview-window-transform');
  }, 300);
}

/**
 * Closes the top margin preview window with animation.
 */
function closeTopMarginPreviewWindow() {
  id('top-margin-preview-window').classList.remove('top-margin-preview-window-visible');
  id('top-margin-preview-window').classList.remove('top-margin-preview-window-transform');
}

/**
 * Sets up an event listener on the top margin range slider.
 */
function setUpListenerOnTopMarginRange() {
  id('top-margin-range').addEventListener('input', readTopMarginRange);
  readTopMarginRange.call(id('top-margin-range'));
}

/**
 * Reads the value from the top margin range slider and updates the preview window accordingly.
 */
function readTopMarginRange() {
  id('top-margin-preview-window').firstElementChild.style.transform = `translateY(${Number(id('top-margin-range').value) * 2}px)`;
}



/* Accounts */
/**
 * Uploads content for the 'Accounts' category in the settings modal.
 *
 * @param {HTMLElement} contentCont - The container for the content in the 'Accounts' category.
 * @param {HTMLElement} buttonCont - The container for the buttons in the 'Accounts' category.
 */
function uploadSettingsCategoryData_Accounts(contentCont, buttonCont) {

	buttonCont.insertAdjacentHTML('afterbegin',
		`<hr class="big-hr">
		<input type="button" value="Add account" class="clickable-button" id="add-account">`	
	);
	id('add-account').value = getStrings(localStorage.getItem('L')).add_account;

	uploadAccountsToSettingsWindow(contentCont);

	for (let account of contentCont.getElementsByClassName('account'))
		setUpClickOnAccount(account);

	setUpClickOnAddAccountButton(contentCont);
}

/**
 * Uploads accounts to the settings window.
 *
 * @param {HTMLElement} windowElCont - The container for the accounts in the settings window.
 */
function uploadAccountsToSettingsWindow(windowElCont) {

	for (let account_num = 1; account_num <= localStorage.getItem('ACount'); account_num++)
  		windowElCont.insertAdjacentHTML( 'beforeend', constructAccountEl(account_num) );
}

/**
 * Sets up click events on account elements.
 *
 * @param {HTMLElement} account - The account element to set up click events for.
 */
function setUpClickOnAccount(account) {
	account.onclick = function() {

		let clickEl = this,
			windowEl_cont = id('edit-account-cont'),
			windowEl = id('edit-account');
		let hidePopupNotification;
		
		enableScrolling();

		// upload account's data to edit account window
		prepareEditAccountWindow(clickEl.getAttribute('data-accountnum'));
		// open edit account window
		let top_position = openFloatingWindow(
			clickEl, windowEl_cont, windowEl, calculateScaleX(clickEl, windowEl_cont)
		);
		windowEl.setAttribute('data-top-position-x', (top_position.x).toString());
		windowEl.setAttribute('data-top-position-y', (top_position.y).toString());

		// set up closing edit account window
		id('edit-account-cont').firstElementChild.onclick = () => {
			let notification_cont = id('popup-connected-notification-cont');
			
			// hide remove notification if needed
			if (notification_cont.classList.contains('show'))
				hidePopUpConnectedNotification(notification_cont, hidePopupNotification);

			disableScrolling();
			closeFloatingWindow(clickEl, windowEl_cont, windowEl);
			setTimeout(resetEditAccountWindow, 390);
		}

		// set up click on remove account button
		hidePopupNotification = setUpClickOnRemoveAccountButton(clickEl, windowEl_cont, windowEl);

		// set up click on save account button
		setUpClickOnSaveAccountButton(hidePopupNotification, clickEl, windowEl_cont, windowEl);
	}
}

/**
 * Prepares the edit account window with data based on the account number.
 *
 * @param {number} accountNum - The account number.
 */
function prepareEditAccountWindow(accountNum) {

	id('edit-account').setAttribute('data-accountnum', accountNum.toString());

	if (id('settings-category-window-cont').getElementsByClassName('account').length === 1) {
		id('edit-account').classList.add('top-padding');
		id('edit-account').firstElementChild.classList.add('element-hide');
	}

	// upload currency
	id('edit-account-currency').value = localStorage.getItem(`ACurrency${accountNum}`);
	adaptInputLengthExplicitly(id('edit-account-currency'));
	// upload balance
	id('edit-account-balance').value = Number(localStorage.getItem(`ABalance${accountNum}`)).toFixed(2);
	adaptInputLengthExplicitly(id('edit-account-balance'));
	// upload color
	id('edit-account-color-button').style.background = '#' + localStorage.getItem(`AColor${accountNum}`);
	id('edit-account-color-button').setAttribute('color', localStorage.getItem(`AColor${accountNum}`));
	// check color if dark theme is on
	checkColorOfEditAccountColorButton();

	// upload status of 'hide account from top-bar'
	if (localStorage.getItem(`AHT${accountNum}`) === "true")
		id('hide-account-from-top-bar-switch').checked = true;
	// upload status of 'without account balance'
	if (localStorage.getItem(`AWB${accountNum}`) === "true")
		id('without-account-balance-switch').checked = true;
	// upload status of 'hide account balance'
	if (localStorage.getItem(`AHB${accountNum}`) === "true")
		id('hide-account-balance-switch').checked = true;
}

/**
 * Sets up click events on the 'without account balance' and 'hide account balance' switch buttons.
 */
id('without-account-balance-switch').onclick = function() {
	if (this.checked) {
		id('hide-account-balance-switch').checked = false;
	}
}
id('hide-account-balance-switch').onclick = function() {
	if (this.checked) {
		id('without-account-balance-switch').checked = false;
	}
}

/**
 * Checks the color of the edit account color button and adds or removes the 'invert-color' class accordingly.
 */
function checkColorOfEditAccountColorButton() {

	if (
		(localStorage.getItem('T') === 'b' || localStorage.getItem('T') === 'd') &&
		id('edit-account-color-button').style.background === 'rgb(5, 5, 5)'
	)
		id('edit-account-color-button').classList.add('invert-color');
	else
		id('edit-account-color-button').classList.remove('invert-color');
}

/**
 * Sets up click events on the 'remove account' button.
 *
 * @param {HTMLElement} clickEl - The element that was clicked.
 * @param {HTMLElement} windowElCont - The container for the edit account window.
 * @param {HTMLElement} windowEl - The edit account window.
 *
 * @returns {number} - SetTimeout process id for hiding account deleting warning.
 */
function setUpClickOnRemoveAccountButton(
	clickEl, windowElCont, windowEl
) {
	let hidePopupNotification;

	id('remove-account').onclick = () => {
		let notification_cont = id('popup-connected-notification-cont');

		if (notification_cont.classList.contains('show')) {
			hidePopUpConnectedNotification(notification_cont, hidePopupNotification);
			removeAccount(
				Number(clickEl.getAttribute('data-accountnum')), clickEl, windowElCont, windowEl
			);
			setTimeout(resetEditAccountWindow, 390);
		} else {
			hidePopupNotification = showPopUpConnectedNotification(
				'remove account', notification_cont, windowEl
			);
			playNotificationSound();
		}

	}

	return hidePopupNotification;
}

/**
 * Sets up click events on the 'save account' button.
 *
 * @param {number} hidePopupNotification - SetTimeout process id for hiding account deleting warning.
 * @param {HTMLElement} clickEl - The element that was clicked.
 * @param {HTMLElement} windowElCont - The container for the edit account window.
 * @param {HTMLElement} windowEl - The edit account window.
 */
function setUpClickOnSaveAccountButton(
	hidePopupNotification, clickEl, windowElCont, windowEl
) {
	id('save-account').onclick = () => {
		let notification_cont = id('popup-connected-notification-cont');

		// hide remove notification if needed
		if (notification_cont.classList.contains('show'))
			hidePopUpConnectedNotification(notification_cont, hidePopupNotification);
		// save account data
		saveEditedAccount(Number(clickEl.getAttribute('data-accountnum')), clickEl, windowElCont, windowEl);
		// reset edit account window data
		setTimeout(resetEditAccountWindow, 390);
	}
}

/**
 * Resets the edit account window to its initial state.
 */
function resetEditAccountWindow() {

	// show 'remove account' button
	if (id('edit-account').classList.contains('top-padding')) {
		id('edit-account').classList.remove('top-padding');
		id('edit-account').firstElementChild.classList.remove('element-hide');
	}
	// uncheck 'hide account from top-bar' switch button
	id('hide-account-from-top-bar-switch').checked = false;
	// uncheck 'without account balance' switch button
	id('without-account-balance-switch').checked = false;
	// uncheck 'hide account balance' switch button
	id('hide-account-balance-switch').checked = false;
}

/**
 * Sets up click events on the 'Add account' button.
 *
 * @param {HTMLElement} contentCont - The container for the content in the 'Accounts' category.
 */
function setUpClickOnAddAccountButton(contentCont) {

	id('add-account').onclick = () => {

		addAccount();

		let account_count = Number(localStorage.getItem('ACount'));
		uploadAccount(account_count, id('accounts'));
		setUpClickOnAccountsInTopBar();

		contentCont.insertAdjacentHTML( 'beforeend', constructAccountEl(account_count) );

		setUpClickOnAccount(contentCont.lastElementChild);

		animateAddingAccount(
			id('settings-category-window-cont').lastElementChild,
			contentCont.lastElementChild,
			id('settings-category-window-cont').lastElementChild.lastElementChild
		);

	}
}

/**
 * Animates the addition of an account to the settings category window.
 *
 * @param {HTMLElement} container - The container for the accounts in the settings category window.
 * @param {HTMLElement} account - The newly added account element.
 * @param {HTMLElement} buttonBlock - The container for buttons in the settings category window.
 */
function animateAddingAccount(container, account, buttonBlock) {
	let gap = account.getBoundingClientRect().top - account.previousElementSibling.getBoundingClientRect().top;
	
	container.style.transition = 'transform 0s';
	container.style.transform = `translateY(calc(${gap}px + 1vh))`;
	
	account.style.transition = 'transform 0s';
	account.style.transform = `translateY(${gap}px) scale(0)`;
	
	buttonBlock.style.transition = 'transform 0s';
	buttonBlock.style.transform = `translateY(-${gap}px)`;
	
	setTimeout(() => {
		container.style.transition = 'transform .3s';
		container.style.transform = `translateY(1vh)`;
		
		account.style.transition = 'transform .3s';
		account.style.transform = `translateY(0px) scale(1)`;
		
		buttonBlock.style.transition = 'transform .3s';
		buttonBlock.style.transform = `translateY(0px)`;
		
		setTimeout(() => {
			container.style = null;
			account.style.transition = null;
			buttonBlock.style = null;
		}, 300);
	}, 1);
}

/**
 * Gets the account element in the container by its account number.
 *
 * @param {HTMLElement} cont - The container containing account elements.
 * @param {number} num - The account number.
 * @returns {HTMLElement} - The found account element.
 */
function getAccountInContByNum(cont, num) {
	let searched_account;

	for (let potential_account of cont.getElementsByClassName('account'))
		if (Number(potential_account.getAttribute('data-accountnum')) === num) {
			searched_account = potential_account;
		}

	return searched_account;
}

/**
 * Removes an account from the settings and updates associated data.
 *
 * @param {number} accountNum - The account number to be removed.
 * @param {HTMLElement} clickEl - The clicked account element.
 * @param {HTMLElement} windowElCont - The container for the edit account window.
 * @param {HTMLElement} windowEl - The edit account window.
 */
function removeAccount(accountNum, clickEl, windowElCont, windowEl) {

	// remove all storage records connected with this account
	removeStorageRecordsOfAccount(accountNum);
	decreaseAccountNumInStorageRecords(accountNum);
		
	// get this accounts
	let account = getAccountInContByNum(id('settings-category-window-cont'), accountNum);
	
	let clickEL_transition = changeFloatingWindowTransformation(clickEl, windowElCont, windowEl);
	
	setTimeout(() => {

		// close edit account window
		clickEl.classList.remove('account-block-animation');
		clickEl.style.transition = clickEL_transition;
		closeFloatingWindow(clickEl, windowElCont, windowEl);
		
		// remove account
		setTimeout(() => {
			animateRemovingAccount(
				id('settings-category-window-cont').lastElementChild,
				account, accountNum,
				id('settings-category-window-cont').lastElementChild.lastElementChild
			);
			removeAccountFromStorage(accountNum);
			
			id('accounts').innerHTML = null;
			for (let a = 1; a <= Number(localStorage.getItem('ACount')); a++) uploadAccount(a, id('accounts'));
			setUpClickOnAccountsInTopBar();
			
			// update data in all widgets
			updateWidgetsData(1, 0, 0, [1, 0], 0);
		}, 390);

	}, 1);
}

/**
 * Removes storage records associated with an account.
 *
 * @param {number} accountNum - The account number.
 */
function removeStorageRecordsOfAccount(accountNum) {

	for (let a = 1; a <= Number(localStorage.getItem('RCount')); a++) {
		if (Number(localStorage.getItem(`RA${a}`)) === accountNum) {

			if (!localStorage.getItem(`RR${a}`))
				removeRecord(a, false);
			else removeTransfer(a);

			a--;

		}
	}
}

/**
 * Removes a record from storage.
 *
 * @param {number} recordNum - The record number.
 */
function removeRecordFromStorage(recordNum) {
	let arr = [
		// tyPe, amoUnt, Account, Category
		'P', 'U', 'A', 'C',
		// Minute, Hour, Day, Month, Year
		'M', 'H', 'D', 'N', 'Y'
	];

	for (let i = 0; i < arr.length; i++)
		localStorage.removeItem(`R${arr[i]}${recordNum}`);

	// Subcategory and noTe (if exist)
	arr = ['S', 'T'];

	for (let i = 0; i < arr.length; i++)
		if (localStorage.getItem(`R${arr[i]}${recordNum}`))
			localStorage.removeItem(`R${arr[i]}${recordNum}`);

	localStorage.setItem('RCount', (Number(localStorage.getItem('RCount')) - 1).toString());
}

/**
 * Removes a transfer record from storage.
 *
 * @param {number} recordNum - The record number.
 */
function removeTransferFromStorage(recordNum) {
	
	let arr = [
		// tyPe, amoUnt, Rate, Account, Category, aBove category
		'P', 'U', 'R', 'A', 'C', 'B',
		// Minute, Hour, Day, Month, Year
		'M', 'H', 'D', 'N', 'Y'
	];

	for (let i = 0; i < arr.length; i++)
		localStorage.removeItem(`R${arr[i]}${recordNum}`);

	// subcategory (if exist)
	if (localStorage.getItem(`RS${recordNum}`))
		localStorage.removeItem(`RS${recordNum}`);

	localStorage.setItem('RCount', (Number(localStorage.getItem('RCount')) - 1).toString());
}

/**
 * Moves a record in the local storage from one position to another.
 *
 * @param {number} from - The original position.
 * @param {number} to - The target position.
 */
function moveRecord(from, to) {

	let arr = [
		// tyPe, amoUnt, Account, Category
		'P', 'U', 'A', 'C',
		// Minute, Hour, Day, Month, Year
		'M', 'H', 'D', 'N', 'Y'
	];

	for (let i = 0; i < arr.length; i++)
		localStorage.setItem(`R${arr[i]}${to}`, localStorage.getItem(`R${arr[i]}${from}`));

	// Subcategory and noTe
	arr = ['S', 'T'];

	for (let i = 0; i < arr.length; i++) {
		if (localStorage.getItem(`R${arr[i]}${to}`))
			localStorage.removeItem(`R${arr[i]}${to}`);

		if (localStorage.getItem(`R${arr[i]}${from}`)) {
			localStorage.setItem(`R${arr[i]}${to}`, localStorage.getItem(`R${arr[i]}${from}`));
			localStorage.removeItem(`R${arr[i]}${from}`);
		}
	}

	arr = ['R', 'B'];

	if (localStorage.getItem(`RR${to}`))
		for (let i = 0; i < arr.length; i++)
			localStorage.removeItem(`R${arr[i]}${to}`);
			
	if (localStorage.getItem(`RR${from}`)) {
		for (let i = 0; i < arr.length; i++) {
			localStorage.setItem(`R${arr[i]}${to}`, localStorage.getItem(`R${arr[i]}${from}`));
			localStorage.removeItem(`R${arr[i]}${from}`);
		}
	}
			
}

/**
 * Changes the account number in storage records to (accountNum - 1) from accountNum.
 *
 * @param {number} accountNum - The account number.
 */
function decreaseAccountNumInStorageRecords(accountNum) {
// change account's number in storage records to (accountNum - 1) from accountNum

	for (let a = 1; a <= localStorage.getItem('RCount'); a++)
		if (localStorage.getItem(`RA${a}`) > accountNum)
			localStorage.setItem(`RA${a}`, (Number(localStorage.getItem(`RA${a}`)) - 1).toString());
}

/**
 * Animates the removal of an account from the settings category window.
 *
 * @param {HTMLElement} container - The container for the accounts in the settings category window.
 * @param {HTMLElement} account - The account element to be removed.
 * @param {number} accountNum - The account number.
 * @param {HTMLElement} buttonBlock - The container for buttons in the settings category window.
 */
function animateRemovingAccount(container, account, accountNum, buttonBlock) {
	let gap;

	if (account.previousElementSibling)
		gap = account.getBoundingClientRect().top - account.previousElementSibling.getBoundingClientRect().top;
	else gap =  account.nextElementSibling.getBoundingClientRect().top - account.getBoundingClientRect().top;

	container.style.transition = 'transform .3s';
	container.style.transform = `translateY(calc(${gap}px + 1vh))`;
	
	account.style.transition = 'transform .3s';
	account.style.transform = `scale(0)`;
	
	let accounts = container.getElementsByClassName('account');
	for (let a = Number(accountNum); a < accounts.length; a++) {
		accounts[a].style.transition = 'transform .3s';
		accounts[a].style.transform = `translateY(${-(gap)}px)`;
	}
	
	buttonBlock.style.transition = 'transform .3s';
	buttonBlock.style.transform = `translateY(-${gap}px)`;

	setTimeout(() => {
		container.style.transition = 'transform 0s';
		container.style.transform = `translateY(1vh)`;
		
		buttonBlock.style.transition = 'transform 0s';
		buttonBlock.style.transform = `translateY(0px)`;

		for (let a = Number(accountNum); a < accounts.length; a++) {
			accounts[a].style.transition = 'transform 0s';
			accounts[a].style.transform = `translateY(0px)`;
		}
		
		account.remove();
		
		// update accounts numbers attributes on accounts in settings
		updateAccountsNumbers();
	}, 300);
	
	
	// account.style.transition = 'transform .4s';
	// account.style.transform = 'scale(0)';
	// account.style.marginBottom = `-${accounts_gap}px`;
	
	// setTimeout(() => {
	// 	account.remove();
	// }, 402);
}

/**
 * Removes an account from storage and updates the account numbers.
 *
 * @param {number} accountNum - The account number to be removed.
 */
function removeAccountFromStorage(accountNum) {
	
	for (let a = Number(accountNum); a <= localStorage.getItem('ACount'); a++) {
		if ( a < Number(localStorage.getItem('ACount')) ) moveAccount(a + 1, a);
		else if ( a === Number(localStorage.getItem('ACount')) ) {
			localStorage.removeItem(`AColor${a}`);
			localStorage.removeItem(`ACurrency${a}`);
			localStorage.removeItem(`ABalance${a}`);
			localStorage.setItem('ACount', (Number(localStorage.getItem('ACount')) - 1).toString());
		}
	}
}

/**
 * Moves account data in the local storage from one position to another.
 *
 * @param {number} from - The original position.
 * @param {number} to - The target position.
 */
function moveAccount(from, to) {
	
	localStorage.setItem(`AColor${to}`, localStorage.getItem(`AColor${from}`));
	localStorage.setItem(`ACurrency${to}`, localStorage.getItem(`ACurrency${from}`));
	localStorage.setItem(`ABalance${to}`, localStorage.getItem(`ABalance${from}`));
}

/**
 * Updates the account numbers attribute on accounts in the settings.
 */
function updateAccountsNumbers() {
	let accounts = id('settings-category-window-cont').getElementsByClassName('account');

	for (let a = 1; a <= accounts.length; a++) accounts[a - 1].setAttribute('data-accountnum', a);
}

/**
 * Handles the click event on the account color button in the edit account window.
 */
id('edit-account-color-button').onclick = function() {

	let clickEl = this,
		windowEl_cont = id('edit-account-color-cont'),
		windowEl = id('edit-account-color');

	// check color if dark theme is on
	if (localStorage.getItem('T') === 'b' || localStorage.getItem('T') === 'd') {
		id('edit-account-color-choose').lastElementChild.classList.add('invert-color');
	}

	// set up click on accounts
	setUpChoosingAccountColor(clickEl, windowEl_cont, windowEl);

	openFloatingWindow(clickEl, windowEl_cont, windowEl, calculateScaleX(clickEl, windowEl_cont));

	windowEl_cont.firstElementChild.onclick = function() {
		closeFloatingWindow(clickEl, windowEl_cont, windowEl);
	}
	
}

/**
 * Sets up the click event for choosing an account color in the edit account window.
 *
 * @param {HTMLElement} clickEl - The clicked account color button.
 * @param {HTMLElement} windowElCont - The container for the edit account color window.
 * @param {HTMLElement} windowEl - The edit account color window.
 */
function setUpChoosingAccountColor(clickEl, windowElCont, windowEl) {

	for (let button of windowEl.getElementsByClassName('color'))
		button.onclick = function() {

			let color = getAccountColorByAccountColorButtonId(button.id);
			clickEl.setAttribute('color', color);
			clickEl.style.background = '#' + color;

			// check color if dark theme is on
			checkColorOfEditAccountColorButton();
			
			closeFloatingWindow(clickEl, windowElCont, windowEl);
			
		}
}

/**
 * Gets the account color based on the account color button ID.
 *
 * @param {string} id - The ID of the account color button.
 *
 * @returns {string} The corresponding account color.
 */
function getAccountColorByAccountColorButtonId(id) {
	if (id === "account-color-1") {
		return "cc4343";
	} else if (id === "account-color-2") {
		return "ab4545";
	} else if (id === "account-color-3") {
		return "c92898";
	} else if (id === "account-color-4") {
		return "994f82";
	} else if (id === "account-color-5") {
		return "9232c8";
	} else if (id === "account-color-6") {
		return "946aab";
	} else if (id === "account-color-7") {
		return "3830cb";
	} else if (id === "account-color-8") {
		return "5f5ba1";
	} else if (id === "account-color-9") {
		return "29a8d0";
	} else if (id === "account-color-10") {
		return "649aab";
	} else if (id === "account-color-11") {
		return "6ebeab";
	} else if (id === "account-color-12") {
		return "20b65a";
	} else if (id === "account-color-13") {
		return "62b180";
	} else if (id === "account-color-14") {
		return "afb32b";
	} else if (id === "account-color-15") {
		return "acae6e";
	} else if (id === "account-color-16") {
		return "d8731a";
	} else if (id === "account-color-17") {
		return "b38c69";
	} else if (id === "account-color-18") {
		return "8c7154";
	} else if (id === "account-color-19") {
		return "ae9479";
	} else {
		return "050505";
	}
}

/**
 * Saves the edited account data to storage and updates UI elements.
 *
 * @param {number} accountNum - The account number.
 * @param {HTMLElement} clickEl - The clicked account element.
 * @param {HTMLElement} windowElCont - The container for the edit account window.
 * @param {HTMLElement} windowEl - The edit account window.
 */
function saveEditedAccount(accountNum, clickEl, windowElCont, windowEl) {

	let prev_color = localStorage.getItem(`AColor${accountNum}`),
		prev_currency = localStorage.getItem(`ACurrency${accountNum}`),
		prev_HT_status = Number(localStorage.getItem(`AHT${accountNum}`)),
		prev_WB_status = Number(localStorage.getItem(`AWB${accountNum}`)),
		prev_HB_status = Number(localStorage.getItem(`AHB${accountNum}`));
	
	// save new account's data to storage
	localStorage.setItem( `AColor${accountNum}`, id('edit-account-color-button').getAttribute('color') );
	localStorage.setItem( `ACurrency${accountNum}`, id('edit-account-currency').value );
	localStorage.setItem( `ABalance${accountNum}`, Number(id('edit-account-balance').value).toFixed(2) );
	localStorage.setItem( `AHT${accountNum}`, id('hide-account-from-top-bar-switch').checked );
	localStorage.setItem( `AWB${accountNum}`, id('without-account-balance-switch').checked );
	localStorage.setItem( `AHB${accountNum}`, id('hide-account-balance-switch').checked );

	// update account color, currency and balance everywhere
	clickEl.classList.add('account-block-animation');
	updateUIDataOfAccount(accountNum);

	// update widgets' data if needed
	updateWidgetsDataAfterEditingAccount(accountNum, prev_color, prev_currency, prev_HT_status, prev_WB_status, prev_HB_status);

	// close edit account window
	let clickEL_transition = changeFloatingWindowTransformation(clickEl, windowElCont, windowEl);
	setTimeout(() => {
		clickEl.classList.remove('account-block-animation');
		clickEl.style.transition = clickEL_transition;
		closeFloatingWindow(clickEl, windowElCont, windowEl);
	}, 1);
}

/**
 * Updates widgets' data after editing an account.
 *
 * @param {number} accountNum - The account number.
 * @param {string} prevColor - The previous account color.
 * @param {string} prevCurrency - The previous account currency.
 * @param {number} prev_HT_status - The previous hide from top-bar status.
 * @param {number} prev_WB_status - The previous without account balance status.
 * @param {number} prev_HB_status - The previous hide account balance status.
 */
function updateWidgetsDataAfterEditingAccount(
	accountNum, prevColor, prevCurrency, prev_HT_status, prev_WB_status, prev_HB_status
) {

	// update data of all widgets because of new account currency
	if (
		prevCurrency !== id('edit-account-currency').value &&
		Number(id('accounts').getAttribute('data-accountnum')) === accountNum
	)
		updateWidgetsData(1, 0, 0, [1, 0], 0);
	// reupload records in history because of new account color
	// (transfers records have field 'from/to account' colored with appropriate account color)
	if (prevColor !== id('edit-account-color-button').getAttribute('color'))
		uploadRecordsToHistory();
	// reupload accounts to top-bar if account now is hidden in top-bar
	if (
		prev_HT_status !== Number(id('hide-account-from-top-bar-switch').checked) ||
		prev_WB_status !== Number(id('without-account-balance-switch').checked) ||
		prev_HB_status !== Number(id('hide-account-balance-switch').checked)
	) {
		id('accounts').innerHTML = null;
		for (let a = 1; a <= localStorage.getItem('ACount'); a++)
			uploadAccount(a, id('accounts'));
		setUpClickOnAccountsInTopBar();
	}
}





/**
 * Disables scrolling by locking the current scroll position.
 */
function disableScrolling() {
	let x = window.scrollX;
	let y = window.scrollY;
	window.onscroll = function() {
		window.scrollTo(x, y);
	};
}

/**
 * Enables scrolling by removing the scroll lock.
 */
function enableScrolling() {
	window.onscroll = function(){};
}



/**
 * Animates an error for an empty field.
 *
 * @param {HTMLElement} el - The element to animate.
 */
function animateEmptyFieldError(el) {
	el.classList.add('empty-field-transform1');

  setTimeout(() => {
    el.classList.add('empty-field-transform2');

    setTimeout(() => {
      el.classList.remove('empty-field-transform1');
      el.classList.remove('empty-field-transform2');
    }, 120);
  }, 120);
}



setTypingListenerForAllInputs(id('root').getElementsByClassName('active-input'));

/**
 * Sets typing listener for all inputs in the given array.
 *
 * @param {HTMLCollectionOf<Element>} inputsArr - The array of input elements.
 */
function setTypingListenerForAllInputs(inputsArr) {

	for (let input of inputsArr) setTypingListenerForInput(input);
}

/**
 * Sets typing listener for the input element.
 *
 * @param {HTMLElement} input - The input element.
 */
function setTypingListenerForInput(input) {
	input.addEventListener('input', adaptInputLength);
	adaptInputLength.call(input);
}

/**
 * Adapts the input length based on its value and placeholder.
 */
function adaptInputLength() {
	let less_length, bigger_length;
	let lang = localStorage.getItem('L');

	if (lang === LANG_ENUM.en || lang === LANG_ENUM.cz || lang === LANG_ENUM.de) {
		less_length = 3.5;
		bigger_length = 1.1;
	} else if (lang === LANG_ENUM.ru || lang === LANG_ENUM.ua) {
		less_length = 4;
		bigger_length = 1.1;
	}
	
	if (this.value.length === 0 && this.placeholder.length < 4)
		this.style.width = less_length + 'ch';
	else if (this.value.length === 0 && this.placeholder.length >= 4)
		this.style.width = this.placeholder.length * bigger_length + 'ch';
	else if (this.value.length < 4)
		this.style.width = less_length + 'ch';
	else if (this.value.length >= 4)
		this.style.width = this.value.length * bigger_length + 'ch';
}

/**
 * Adapts the input length explicitly based on its value and placeholder.
 *
 * @param {HTMLInputElement} el - The input element.
 */
function adaptInputLengthExplicitly(el) {
	let less_length, bigger_length;
	let lang = localStorage.getItem('L');

	if (lang === LANG_ENUM.en || lang === LANG_ENUM.cz || lang === LANG_ENUM.de) {
		less_length = 3.5;
		bigger_length = 1.1;
	} else if (lang === LANG_ENUM.ru || lang === LANG_ENUM.ua) {
		less_length = 4;
		bigger_length = 1.25;
	}
	
	if (el.value.length === 0 && el.placeholder.length < 4)
		el.style.width = less_length + 'ch';
	else if (el.value.length === 0 && el.placeholder.length >= 4)
		el.style.width = el.placeholder.length * bigger_length + 'ch';
	else if (el.value.length < 4)
		el.style.width = less_length + 'ch';
	else if (el.value.length >= 4)
		el.style.width = el.value.length * bigger_length + 'ch';
}



if (localStorage.getItem('L')) {
	startPreloaderAnimation().then();
}