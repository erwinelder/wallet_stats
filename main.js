const id = function (id) {
	return document.getElementById(id);
}

// const root = ReactDOM.createRoot(id('root'));
// const root_content = ReactDOM.createRoot(id('content'));



var categories_expense_titles = [];

const categories_expense_icons = [
	/* 1 */ 
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 64.718 294.71 C 21.635 305.658 1.317 354.368 12.825 404.515 C 22.187 445.309 50.427 466.598 70.822 476.317 C 105.585 492.068 161.955 489.324 199.072 474.932 C 237.565 460.328 260.896 423.962 265.897 395.598 C 271.77 332.371 242.875 295.329 191.188 291.704"></path>
		<path d="M 124.088 272.482 C 105.315 272.604 74.98 280.717 57.862 293.33 C 73.793 295.983 88.732 299.268 97.529 304.05 L 91.098 345.504 L 134.694 312.627 L 178.293 344.073 L 173.648 300.835 C 180.476 294.03 202.218 287.77 210.096 286.181 C 196.257 276.291 160.531 270.951 143.48 271.53"></path>
		<path d="M 128.814 291.082 C 128.34 276.409 118.336 245.987 114.006 238.551 L 122.188 228.789 C 134.815 239.51 142.577 266.425 147.461 290.367"></path>
		<path d="M 298.973 492.575 L 431.129 492.575 C 414.076 478.365 387.077 484.049 364.34 452.787 L 364.34 280.84 C 394.182 242.472 473.761 204.104 480.866 177.105 C 489.392 148.683 449.603 63.421 435.392 8 L 294.709 8 C 280.499 63.421 240.711 148.683 249.236 177.105 C 256.341 204.104 334.498 242.472 364.34 280.84 L 364.34 452.787 C 340.184 484.049 316.025 478.365 298.973 492.575 Z"></path>
		<path d="M 252 151.7 C 302.899 143.105 310.183 125.644 364.3 137 C 398.851 147.66 429.044 160.627 478 150.9"></path>
	</svg>`,
	/* 2 */ 
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
		<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
  	</svg>`,
	/* 3 */ 
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
		<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
  	</svg>`,
	/* 4 */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<g transform="matrix(1.309595, 0, 0, 1.309595, -77.39875, -74.201775)">
			<ellipse cx="165" cy="320" rx="27" ry="27"></ellipse>
			<ellipse cx="335" cy="320" rx="27" ry="27"></ellipse>
			<path d="M 140 240 C 129.842 217.608 130 167.4 140 145 C 191.9 130 308.1 130 360 145 C 370 167.4 370 217.6 360 240 C 308.1 255 191.9 255 140 240 Z"></path>
			<path d="M 170 378 C 170 378 176.26 404.212 168 412 C 157.571 421.833 135.447 421.814 125 412 C 113.316 401.023 122 364 122 364 C 122 364 102.37 351.934 98 342 C 84 277.9 84 197 98 132 C 104.639 115.356 118.536 100.075 135 93 C 205.4 70 294.6 70 365 93 C 381.464 100.075 395.361 115.356 402 132 C 416 197 416 277.9 402 342 C 397.63 351.934 378 364 378 364 C 378 364 386.684 401.023 375 412 C 365.039 421.358 344.343 420.933 334 412 C 325.331 404.512 329 378 329 378 L 170 378 Z"></path>
		</g>
  	</svg>`,
	/* 5 */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 129.692 368.239 C 129.692 368.239 130.58 392.173 122.4 398.621 C 102.361 414.423 64.8 415.707 45.841 398.621 C 31.319 385.534 39.765 340.29 39.765 340.29 C 39.765 340.29 23.086 297.797 25.182 275.883 C 27.582 250.784 30.043 231.039 55.563 206.615 C 55.563 206.615 24 196.191 25.182 183.526 C 26.446 169.997 48.158 163.606 61.64 165.297 C 69.867 166.329 80.457 181.572 80.457 181.572 C 80.457 181.572 100.126 119.315 126.045 104.536 C 197.867 83.876 301.525 83.876 373.953 104.536 C 400.605 119.221 422.717 181.713 422.717 181.713 C 422.717 181.713 430.917 166.597 438.361 165.297 C 451.744 162.96 473.554 169.997 474.818 183.526 C 476.001 196.191 444.438 206.615 444.438 206.615 C 469.957 231.039 472.417 250.784 474.818 275.883 C 476.913 297.797 460.237 340.29 460.237 340.29 C 460.237 340.29 468.682 385.534 454.158 398.621 C 435.201 415.707 397.641 414.423 377.6 398.621 C 369.421 392.173 370.307 368.239 370.307 368.239 L 129.692 368.239 Z"></path>
		<path d="M 95.665 196.892 C 102.715 173.032 117.199 136.374 131.557 121.548 C 198.435 100.89 301.565 100.89 368.444 121.548 C 382.802 136.374 395.958 173.196 404.335 196.892 C 349.658 199.324 150.34 199.324 95.665 196.892 Z"></path>
		<path d="M 75.007 297.757 C 63.588 286.831 61.265 259.998 73.792 250.362 C 88.374 249.148 131.029 257.654 144.275 271.021 C 148.925 278.247 147.069 290.852 140.629 296.542 C 124.223 305.049 90.804 300.188 75.007 297.757 Z"></path>
		<path d="M 362.688 253.849 C 351.271 264.772 348.947 291.608 361.473 301.241 C 376.056 302.459 418.712 293.95 431.956 280.582 C 436.606 273.357 434.751 260.753 428.311 255.064 C 411.905 246.557 378.485 251.418 362.688 253.849 Z" transform="matrix(-1, 0, 0, -1, 787.597576, 551.605187)"></path>
  	</svg>`,
	/* 6 */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
		<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
		<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
		<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
  	</svg>`,
	/* 7 */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<g transform="matrix(4.888889, 0, 0, 4.888889, -972.222229, -1600.681519)">
			<ellipse style="stroke-width: 3px;" cx="250" cy="406.597" rx="4.5" ry="4.5"></ellipse>
			<path style="stroke-width: 3px;" d="M 235 393 C 240 382 260 382 265 393"></path>
			<path style="stroke-width: 3px;" d="M 220 380 C 235 360 265 360 280 380"></path>
			<path style="stroke-width: 3px;" d="M 205 367 C 233 339 267 339 295 367"></path>
		</g>
  	</svg>`,
	/* 8 */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 297.836 208.448 C 307.451 206.429 317.326 205.429 327.355 205.429 C 387.96 205.429 442.917 241.944 469.121 319.271 C 479.86 365.025 473.419 435.906 469.121 471.778 C 402.318 476.074 252.391 476.074 185.591 471.778 C 179.299 439.327 175.797 382.002 182.199 337.525"></path>
		<polyline points="50.368 472.296 256.052 166.307 200.832 153.356 326.524 108.507 327.368 241.96 296.312 194.499 79.126 492.432" transform="matrix(-0.990268, -0.139173, 0.139173, -0.990268, 334.080756, 624.300215)"></polyline>
		<path d="M 268.011 183.165 C 249.091 166.628 237.14 142.317 237.14 115.215 C 237.14 65.391 277.531 25 327.355 25 C 377.179 25 417.57 65.391 417.57 115.215 C 417.57 165.039 377.179 205.43 327.355 205.43 C 319.044 205.43 310.996 204.306 303.354 202.202"></path>
  	</svg>`,
	/* 9 */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 316.69 325.708 C 325.475 371.442 319.422 437.548 315.321 471.778 C 248.518 476.074 98.591 476.074 31.791 471.778 C 24.596 434.667 21.049 365.025 31.791 319.271 C 57.993 241.944 112.95 205.429 173.555 205.429 C 222.476 205.429 267.717 229.222 297.125 279.068"></path>
		<ellipse cx="173.555" cy="115.215" rx="90.215" ry="90.215"></ellipse>
		<polyline points="204.857 411.774 410.541 105.785 355.321 92.834 481.013 47.985 481.857 181.438 450.801 133.977 233.615 431.91" transform="matrix(0.99863, -0.052336, 0.052336, 0.99863, -12.087331, 18.29877)"></polyline>
  	</svg>`,
	/* 10 */
	`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<ellipse cx="153.928" cy="219.257" rx="38.428" ry="38.428"></ellipse>
		<ellipse cx="346.072" cy="142.4" rx="38.428" ry="38.428"></ellipse>
		<ellipse cx="269.215" cy="357.6" rx="38.428" ry="38.428"></ellipse>
  	</svg>`

];

var subcategories_titles = [];

const subcategories_icons = [
  /* 1 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 70.895 294.024 C 27.812 304.972 7.494 353.682 19.002 403.829 C 28.364 444.623 56.604 465.912 76.999 475.631 C 111.762 491.382 168.132 488.638 205.249 474.246 C 243.742 459.642 267.073 423.276 272.074 394.912 C 277.947 331.685 249.052 294.643 197.365 291.018"></path>
			<path d="M 130.265 271.796 C 111.492 271.918 81.157 280.031 64.039 292.644 C 79.97 295.297 94.909 298.582 103.706 303.364 L 97.275 344.818 L 140.871 311.941 L 184.47 343.387 L 179.825 300.149 C 186.653 293.344 208.395 287.084 216.273 285.495 C 202.434 275.605 166.708 270.265 149.657 270.844"></path>
			<path d="M 134.991 290.396 C 134.517 275.723 124.513 245.301 120.183 237.865 L 128.365 228.103 C 140.992 238.824 148.754 265.739 153.638 289.681"></path>
			<path d="M 308.721 490.338 L 469.401 490.338 C 483.175 487.583 487.766 480.467 490.061 467.382 L 490.061 210.291 C 485.47 159.791 471.698 108.833 444.151 65.681 L 333.971 65.681 C 315.319 108.568 290.386 155.822 288.061 210.291 L 288.061 463.02 C 289.23 479.566 294.733 486.473 308.721 490.338 Z" bx:origin="0.472971 0.424729"></path>
			<path d="M 320.198 65.681 L 457.925 65.681 C 462.069 65.584 467.109 60.817 467.106 56.496 L 467.106 17.475 C 467.059 11.931 461.946 8.245 455.63 8.291 L 320.198 8.291 C 315.606 8.615 310.953 12.876 311.016 17.475 L 311.016 56.496 C 311.161 61.269 315.715 65.681 320.198 65.681 Z" bx:origin="0.444248 4.737284"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<line x1="20" y1="400.609" x2="479.126" y2="401.523"></line>
			<line x1="20.874" y1="363.588" x2="480" y2="363.588"></line>
			<path d="M 20.874 363.589 C 59.134 57.506 441.739 57.506 480 363.589"></path>
			<path d="M 211.302 135.23 C 218.955 86.256 280.172 86.256 287.824 135.23"></path>
		</svg>`,
		
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 70.895 294.024 C 27.812 304.972 7.494 353.682 19.002 403.829 C 28.364 444.623 56.604 465.912 76.999 475.631 C 111.762 491.382 168.132 488.638 205.249 474.246 C 243.742 459.642 267.073 423.276 272.074 394.912 C 277.947 331.685 249.052 294.643 197.365 291.018"></path>
			<path d="M 130.265 271.796 C 111.492 271.918 81.157 280.031 64.039 292.644 C 79.97 295.297 94.909 298.582 103.706 303.364 L 97.275 344.818 L 140.871 311.941 L 184.47 343.387 L 179.825 300.149 C 186.653 293.344 208.395 287.084 216.273 285.495 C 202.434 275.605 166.708 270.265 149.657 270.844"></path>
			<path d="M 134.991 290.396 C 134.517 275.723 124.513 245.301 120.183 237.865 L 128.365 228.103 C 140.992 238.824 148.754 265.739 153.638 289.681"></path>
			<path d="M 308.721 490.338 L 469.401 490.338 C 483.175 487.583 487.766 480.467 490.061 467.382 L 490.061 210.291 C 485.47 159.791 471.698 108.833 444.151 65.681 L 333.971 65.681 C 315.319 108.568 290.386 155.822 288.061 210.291 L 288.061 463.02 C 289.23 479.566 294.733 486.473 308.721 490.338 Z" bx:origin="0.472971 0.424729"></path>
			<path d="M 320.198 65.681 L 457.925 65.681 C 462.069 65.584 467.109 60.817 467.106 56.496 L 467.106 17.475 C 467.059 11.931 461.946 8.245 455.63 8.291 L 320.198 8.291 C 315.606 8.615 310.953 12.876 311.016 17.475 L 311.016 56.496 C 311.161 61.269 315.715 65.681 320.198 65.681 Z" bx:origin="0.444248 4.737284"></path>
		</svg>`
	],
  /* 2 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 59.986 455.001 C 36.291 426.483 63.191 178.618 84.987 150.029 C 125.559 96.812 374.113 90.017 415.003 149.972 C 434.274 178.228 462.311 430.057 439.998 455.021 C 413.311 479.057 80.648 480.313 59.986 455.001 Z"></path>
			<path d="M 160 170 L 159.16666666666666 158.33333333333334 C 158.33333333333334 146.66666666666666 156.66666666666666 123.33333333333333 163.33333333333334 99.16666666666667 C 170 75 185 50 209.16666666666666 37.5 C 233.33333333333334 25 266.6666666666667 25 290.8333333333333 37.5 C 315 50 330 75 336.6666666666667 99.16666666666667 C 343.3333333333333 123.33333333333333 341.6666666666667 146.66666666666666 340.8333333333333 158.33333333333334 L 340 170" bx:d="M 160 170 U 155 100 U 200 25 U 300 25 U 345 100 U 340 170 1@e15ad59b"></path>
	  	</svg>`
	],
  /* 3 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
			<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
			<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
			<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
			<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
			<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
			<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
	  	</svg>`
	],
  /* 4 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(1.309595, 0, 0, 1.309595, -77.39875, -74.201775)">
				<ellipse cx="165" cy="320" rx="27" ry="27"></ellipse>
				<ellipse cx="335" cy="320" rx="27" ry="27"></ellipse>
				<path d="M 140 240 C 129.842 217.608 130 167.4 140 145 C 191.9 130 308.1 130 360 145 C 370 167.4 370 217.6 360 240 C 308.1 255 191.9 255 140 240 Z"></path>
				<path d="M 170 378 C 170 378 176.26 404.212 168 412 C 157.571 421.833 135.447 421.814 125 412 C 113.316 401.023 122 364 122 364 C 122 364 102.37 351.934 98 342 C 84 277.9 84 197 98 132 C 104.639 115.356 118.536 100.075 135 93 C 205.4 70 294.6 70 365 93 C 381.464 100.075 395.361 115.356 402 132 C 416 197 416 277.9 402 342 C 397.63 351.934 378 364 378 364 C 378 364 386.684 401.023 375 412 C 365.039 421.358 344.343 420.933 334 412 C 325.331 404.512 329 378 329 378 L 170 378 Z"></path>
			</g>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(1.309595, 0, 0, 1.309595, -77.39875, -74.201775)">
				<ellipse cx="165" cy="320" rx="27" ry="27"></ellipse>
				<ellipse cx="335" cy="320" rx="27" ry="27"></ellipse>
				<path d="M 140 240 C 129.842 217.608 130 167.4 140 145 C 191.9 130 308.1 130 360 145 C 370 167.4 370 217.6 360 240 C 308.1 255 191.9 255 140 240 Z"></path>
				<path d="M 170 378 C 170 378 176.26 404.212 168 412 C 157.571 421.833 135.447 421.814 125 412 C 113.316 401.023 122 364 122 364 C 122 364 102.37 351.934 98 342 C 84 277.9 84 197 98 132 C 104.639 115.356 118.536 100.075 135 93 C 205.4 70 294.6 70 365 93 C 381.464 100.075 395.361 115.356 402 132 C 416 197 416 277.9 402 342 C 397.63 351.934 378 364 378 364 C 378 364 386.684 401.023 375 412 C 365.039 421.358 344.343 420.933 334 412 C 325.331 404.512 329 378 329 378 L 170 378 Z"></path>
			</g>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(1.309595, 0, 0, 1.309595, -77.39875, -74.201775)">
				<ellipse cx="165" cy="320" rx="27" ry="27"></ellipse>
				<ellipse cx="335" cy="320" rx="27" ry="27"></ellipse>
				<path d="M 140 240 C 129.842 217.608 130 167.4 140 145 C 191.9 130 308.1 130 360 145 C 370 167.4 370 217.6 360 240 C 308.1 255 191.9 255 140 240 Z"></path>
				<path d="M 170 378 C 170 378 176.26 404.212 168 412 C 157.571 421.833 135.447 421.814 125 412 C 113.316 401.023 122 364 122 364 C 122 364 102.37 351.934 98 342 C 84 277.9 84 197 98 132 C 104.639 115.356 118.536 100.075 135 93 C 205.4 70 294.6 70 365 93 C 381.464 100.075 395.361 115.356 402 132 C 416 197 416 277.9 402 342 C 397.63 351.934 378 364 378 364 C 378 364 386.684 401.023 375 412 C 365.039 421.358 344.343 420.933 334 412 C 325.331 404.512 329 378 329 378 L 170 378 Z"></path>
			</g>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(1.309595, 0, 0, 1.309595, -77.39875, -74.201775)">
				<ellipse cx="165" cy="320" rx="27" ry="27"></ellipse>
				<ellipse cx="335" cy="320" rx="27" ry="27"></ellipse>
				<path d="M 140 240 C 129.842 217.608 130 167.4 140 145 C 191.9 130 308.1 130 360 145 C 370 167.4 370 217.6 360 240 C 308.1 255 191.9 255 140 240 Z"></path>
				<path d="M 170 378 C 170 378 176.26 404.212 168 412 C 157.571 421.833 135.447 421.814 125 412 C 113.316 401.023 122 364 122 364 C 122 364 102.37 351.934 98 342 C 84 277.9 84 197 98 132 C 104.639 115.356 118.536 100.075 135 93 C 205.4 70 294.6 70 365 93 C 381.464 100.075 395.361 115.356 402 132 C 416 197 416 277.9 402 342 C 397.63 351.934 378 364 378 364 C 378 364 386.684 401.023 375 412 C 365.039 421.358 344.343 420.933 334 412 C 325.331 404.512 329 378 329 378 L 170 378 Z"></path>
			</g>
	  	</svg>`
	],
  /* 5 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 129.692 368.239 C 129.692 368.239 130.58 392.173 122.4 398.621 C 102.361 414.423 64.8 415.707 45.841 398.621 C 31.319 385.534 39.765 340.29 39.765 340.29 C 39.765 340.29 23.086 297.797 25.182 275.883 C 27.582 250.784 30.043 231.039 55.563 206.615 C 55.563 206.615 24 196.191 25.182 183.526 C 26.446 169.997 48.158 163.606 61.64 165.297 C 69.867 166.329 80.457 181.572 80.457 181.572 C 80.457 181.572 100.126 119.315 126.045 104.536 C 197.867 83.876 301.525 83.876 373.953 104.536 C 400.605 119.221 422.717 181.713 422.717 181.713 C 422.717 181.713 430.917 166.597 438.361 165.297 C 451.744 162.96 473.554 169.997 474.818 183.526 C 476.001 196.191 444.438 206.615 444.438 206.615 C 469.957 231.039 472.417 250.784 474.818 275.883 C 476.913 297.797 460.237 340.29 460.237 340.29 C 460.237 340.29 468.682 385.534 454.158 398.621 C 435.201 415.707 397.641 414.423 377.6 398.621 C 369.421 392.173 370.307 368.239 370.307 368.239 L 129.692 368.239 Z"></path>
			<path d="M 95.665 196.892 C 102.715 173.032 117.199 136.374 131.557 121.548 C 198.435 100.89 301.565 100.89 368.444 121.548 C 382.802 136.374 395.958 173.196 404.335 196.892 C 349.658 199.324 150.34 199.324 95.665 196.892 Z"></path>
			<path d="M 75.007 297.757 C 63.588 286.831 61.265 259.998 73.792 250.362 C 88.374 249.148 131.029 257.654 144.275 271.021 C 148.925 278.247 147.069 290.852 140.629 296.542 C 124.223 305.049 90.804 300.188 75.007 297.757 Z"></path>
			<path d="M 362.688 253.849 C 351.271 264.772 348.947 291.608 361.473 301.241 C 376.056 302.459 418.712 293.95 431.956 280.582 C 436.606 273.357 434.751 260.753 428.311 255.064 C 411.905 246.557 378.485 251.418 362.688 253.849 Z" transform="matrix(-1, 0, 0, -1, 787.597576, 551.605187)"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 129.692 368.239 C 129.692 368.239 130.58 392.173 122.4 398.621 C 102.361 414.423 64.8 415.707 45.841 398.621 C 31.319 385.534 39.765 340.29 39.765 340.29 C 39.765 340.29 23.086 297.797 25.182 275.883 C 27.582 250.784 30.043 231.039 55.563 206.615 C 55.563 206.615 24 196.191 25.182 183.526 C 26.446 169.997 48.158 163.606 61.64 165.297 C 69.867 166.329 80.457 181.572 80.457 181.572 C 80.457 181.572 100.126 119.315 126.045 104.536 C 197.867 83.876 301.525 83.876 373.953 104.536 C 400.605 119.221 422.717 181.713 422.717 181.713 C 422.717 181.713 430.917 166.597 438.361 165.297 C 451.744 162.96 473.554 169.997 474.818 183.526 C 476.001 196.191 444.438 206.615 444.438 206.615 C 469.957 231.039 472.417 250.784 474.818 275.883 C 476.913 297.797 460.237 340.29 460.237 340.29 C 460.237 340.29 468.682 385.534 454.158 398.621 C 435.201 415.707 397.641 414.423 377.6 398.621 C 369.421 392.173 370.307 368.239 370.307 368.239 L 129.692 368.239 Z"></path>
			<path d="M 95.665 196.892 C 102.715 173.032 117.199 136.374 131.557 121.548 C 198.435 100.89 301.565 100.89 368.444 121.548 C 382.802 136.374 395.958 173.196 404.335 196.892 C 349.658 199.324 150.34 199.324 95.665 196.892 Z"></path>
			<path d="M 75.007 297.757 C 63.588 286.831 61.265 259.998 73.792 250.362 C 88.374 249.148 131.029 257.654 144.275 271.021 C 148.925 278.247 147.069 290.852 140.629 296.542 C 124.223 305.049 90.804 300.188 75.007 297.757 Z"></path>
			<path d="M 362.688 253.849 C 351.271 264.772 348.947 291.608 361.473 301.241 C 376.056 302.459 418.712 293.95 431.956 280.582 C 436.606 273.357 434.751 260.753 428.311 255.064 C 411.905 246.557 378.485 251.418 362.688 253.849 Z" transform="matrix(-1, 0, 0, -1, 787.597576, 551.605187)"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 129.692 368.239 C 129.692 368.239 130.58 392.173 122.4 398.621 C 102.361 414.423 64.8 415.707 45.841 398.621 C 31.319 385.534 39.765 340.29 39.765 340.29 C 39.765 340.29 23.086 297.797 25.182 275.883 C 27.582 250.784 30.043 231.039 55.563 206.615 C 55.563 206.615 24 196.191 25.182 183.526 C 26.446 169.997 48.158 163.606 61.64 165.297 C 69.867 166.329 80.457 181.572 80.457 181.572 C 80.457 181.572 100.126 119.315 126.045 104.536 C 197.867 83.876 301.525 83.876 373.953 104.536 C 400.605 119.221 422.717 181.713 422.717 181.713 C 422.717 181.713 430.917 166.597 438.361 165.297 C 451.744 162.96 473.554 169.997 474.818 183.526 C 476.001 196.191 444.438 206.615 444.438 206.615 C 469.957 231.039 472.417 250.784 474.818 275.883 C 476.913 297.797 460.237 340.29 460.237 340.29 C 460.237 340.29 468.682 385.534 454.158 398.621 C 435.201 415.707 397.641 414.423 377.6 398.621 C 369.421 392.173 370.307 368.239 370.307 368.239 L 129.692 368.239 Z"></path>
			<path d="M 95.665 196.892 C 102.715 173.032 117.199 136.374 131.557 121.548 C 198.435 100.89 301.565 100.89 368.444 121.548 C 382.802 136.374 395.958 173.196 404.335 196.892 C 349.658 199.324 150.34 199.324 95.665 196.892 Z"></path>
			<path d="M 75.007 297.757 C 63.588 286.831 61.265 259.998 73.792 250.362 C 88.374 249.148 131.029 257.654 144.275 271.021 C 148.925 278.247 147.069 290.852 140.629 296.542 C 124.223 305.049 90.804 300.188 75.007 297.757 Z"></path>
			<path d="M 362.688 253.849 C 351.271 264.772 348.947 291.608 361.473 301.241 C 376.056 302.459 418.712 293.95 431.956 280.582 C 436.606 273.357 434.751 260.753 428.311 255.064 C 411.905 246.557 378.485 251.418 362.688 253.849 Z" transform="matrix(-1, 0, 0, -1, 787.597576, 551.605187)"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 129.692 368.239 C 129.692 368.239 130.58 392.173 122.4 398.621 C 102.361 414.423 64.8 415.707 45.841 398.621 C 31.319 385.534 39.765 340.29 39.765 340.29 C 39.765 340.29 23.086 297.797 25.182 275.883 C 27.582 250.784 30.043 231.039 55.563 206.615 C 55.563 206.615 24 196.191 25.182 183.526 C 26.446 169.997 48.158 163.606 61.64 165.297 C 69.867 166.329 80.457 181.572 80.457 181.572 C 80.457 181.572 100.126 119.315 126.045 104.536 C 197.867 83.876 301.525 83.876 373.953 104.536 C 400.605 119.221 422.717 181.713 422.717 181.713 C 422.717 181.713 430.917 166.597 438.361 165.297 C 451.744 162.96 473.554 169.997 474.818 183.526 C 476.001 196.191 444.438 206.615 444.438 206.615 C 469.957 231.039 472.417 250.784 474.818 275.883 C 476.913 297.797 460.237 340.29 460.237 340.29 C 460.237 340.29 468.682 385.534 454.158 398.621 C 435.201 415.707 397.641 414.423 377.6 398.621 C 369.421 392.173 370.307 368.239 370.307 368.239 L 129.692 368.239 Z"></path>
			<path d="M 95.665 196.892 C 102.715 173.032 117.199 136.374 131.557 121.548 C 198.435 100.89 301.565 100.89 368.444 121.548 C 382.802 136.374 395.958 173.196 404.335 196.892 C 349.658 199.324 150.34 199.324 95.665 196.892 Z"></path>
			<path d="M 75.007 297.757 C 63.588 286.831 61.265 259.998 73.792 250.362 C 88.374 249.148 131.029 257.654 144.275 271.021 C 148.925 278.247 147.069 290.852 140.629 296.542 C 124.223 305.049 90.804 300.188 75.007 297.757 Z"></path>
			<path d="M 362.688 253.849 C 351.271 264.772 348.947 291.608 361.473 301.241 C 376.056 302.459 418.712 293.95 431.956 280.582 C 436.606 273.357 434.751 260.753 428.311 255.064 C 411.905 246.557 378.485 251.418 362.688 253.849 Z" transform="matrix(-1, 0, 0, -1, 787.597576, 551.605187)"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 129.692 368.239 C 129.692 368.239 130.58 392.173 122.4 398.621 C 102.361 414.423 64.8 415.707 45.841 398.621 C 31.319 385.534 39.765 340.29 39.765 340.29 C 39.765 340.29 23.086 297.797 25.182 275.883 C 27.582 250.784 30.043 231.039 55.563 206.615 C 55.563 206.615 24 196.191 25.182 183.526 C 26.446 169.997 48.158 163.606 61.64 165.297 C 69.867 166.329 80.457 181.572 80.457 181.572 C 80.457 181.572 100.126 119.315 126.045 104.536 C 197.867 83.876 301.525 83.876 373.953 104.536 C 400.605 119.221 422.717 181.713 422.717 181.713 C 422.717 181.713 430.917 166.597 438.361 165.297 C 451.744 162.96 473.554 169.997 474.818 183.526 C 476.001 196.191 444.438 206.615 444.438 206.615 C 469.957 231.039 472.417 250.784 474.818 275.883 C 476.913 297.797 460.237 340.29 460.237 340.29 C 460.237 340.29 468.682 385.534 454.158 398.621 C 435.201 415.707 397.641 414.423 377.6 398.621 C 369.421 392.173 370.307 368.239 370.307 368.239 L 129.692 368.239 Z"></path>
			<path d="M 95.665 196.892 C 102.715 173.032 117.199 136.374 131.557 121.548 C 198.435 100.89 301.565 100.89 368.444 121.548 C 382.802 136.374 395.958 173.196 404.335 196.892 C 349.658 199.324 150.34 199.324 95.665 196.892 Z"></path>
			<path d="M 75.007 297.757 C 63.588 286.831 61.265 259.998 73.792 250.362 C 88.374 249.148 131.029 257.654 144.275 271.021 C 148.925 278.247 147.069 290.852 140.629 296.542 C 124.223 305.049 90.804 300.188 75.007 297.757 Z"></path>
			<path d="M 362.688 253.849 C 351.271 264.772 348.947 291.608 361.473 301.241 C 376.056 302.459 418.712 293.95 431.956 280.582 C 436.606 273.357 434.751 260.753 428.311 255.064 C 411.905 246.557 378.485 251.418 362.688 253.849 Z" transform="matrix(-1, 0, 0, -1, 787.597576, 551.605187)"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 129.692 368.239 C 129.692 368.239 130.58 392.173 122.4 398.621 C 102.361 414.423 64.8 415.707 45.841 398.621 C 31.319 385.534 39.765 340.29 39.765 340.29 C 39.765 340.29 23.086 297.797 25.182 275.883 C 27.582 250.784 30.043 231.039 55.563 206.615 C 55.563 206.615 24 196.191 25.182 183.526 C 26.446 169.997 48.158 163.606 61.64 165.297 C 69.867 166.329 80.457 181.572 80.457 181.572 C 80.457 181.572 100.126 119.315 126.045 104.536 C 197.867 83.876 301.525 83.876 373.953 104.536 C 400.605 119.221 422.717 181.713 422.717 181.713 C 422.717 181.713 430.917 166.597 438.361 165.297 C 451.744 162.96 473.554 169.997 474.818 183.526 C 476.001 196.191 444.438 206.615 444.438 206.615 C 469.957 231.039 472.417 250.784 474.818 275.883 C 476.913 297.797 460.237 340.29 460.237 340.29 C 460.237 340.29 468.682 385.534 454.158 398.621 C 435.201 415.707 397.641 414.423 377.6 398.621 C 369.421 392.173 370.307 368.239 370.307 368.239 L 129.692 368.239 Z"></path>
			<path d="M 95.665 196.892 C 102.715 173.032 117.199 136.374 131.557 121.548 C 198.435 100.89 301.565 100.89 368.444 121.548 C 382.802 136.374 395.958 173.196 404.335 196.892 C 349.658 199.324 150.34 199.324 95.665 196.892 Z"></path>
			<path d="M 75.007 297.757 C 63.588 286.831 61.265 259.998 73.792 250.362 C 88.374 249.148 131.029 257.654 144.275 271.021 C 148.925 278.247 147.069 290.852 140.629 296.542 C 124.223 305.049 90.804 300.188 75.007 297.757 Z"></path>
			<path d="M 362.688 253.849 C 351.271 264.772 348.947 291.608 361.473 301.241 C 376.056 302.459 418.712 293.95 431.956 280.582 C 436.606 273.357 434.751 260.753 428.311 255.064 C 411.905 246.557 378.485 251.418 362.688 253.849 Z" transform="matrix(-1, 0, 0, -1, 787.597576, 551.605187)"></path>
  		</svg>`
	],
  /* 6 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 30.593 432.676 C 24.667 402.108 21.746 344.744 30.593 307.059 C 52.177 243.366 97.444 213.288 147.363 213.288 C 197.283 213.288 242.549 243.366 264.134 307.059 C 272.98 344.744 267.673 403.129 264.134 432.676 C 209.11 436.214 85.616 436.214 30.593 432.676 Z"></path>
			<ellipse cx="147.363" cy="138.98" rx="74.309" ry="74.309"></ellipse>
			<path d="M 266.846 432.54 C 266.825 401.972 267.673 401.891 268.442 364.161 C 265.903 292.905 295.981 275.212 354.651 271.674 C 404.57 271.674 456.983 294.674 471.422 365.444 C 476.444 386.675 476.444 418.522 469.728 431.933 C 414.705 435.471 321.87 436.078 266.846 432.54 Z"></path>
			<ellipse cx="354.651" cy="197.365" rx="74.309" ry="74.309"></ellipse>
		</svg>`
	],
  /* 7 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(4.888889, 0, 0, 4.888889, -972.222229, -1600.681519)">
				<ellipse style="stroke-width: 3px;" cx="250" cy="406.597" rx="4.5" ry="4.5"></ellipse>
				<path style="stroke-width: 3px;" d="M 235 393 C 240 382 260 382 265 393"></path>
				<path style="stroke-width: 3px;" d="M 220 380 C 235 360 265 360 280 380"></path>
				<path style="stroke-width: 3px;" d="M 205 367 C 233 339 267 339 295 367"></path>
			</g>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(4.888889, 0, 0, 4.888889, -972.222229, -1600.681519)">
				<ellipse style="stroke-width: 3px;" cx="250" cy="406.597" rx="4.5" ry="4.5"></ellipse>
				<path style="stroke-width: 3px;" d="M 235 393 C 240 382 260 382 265 393"></path>
				<path style="stroke-width: 3px;" d="M 220 380 C 235 360 265 360 280 380"></path>
				<path style="stroke-width: 3px;" d="M 205 367 C 233 339 267 339 295 367"></path>
			</g>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(4.888889, 0, 0, 4.888889, -972.222229, -1600.681519)">
				<ellipse style="stroke-width: 3px;" cx="250" cy="406.597" rx="4.5" ry="4.5"></ellipse>
				<path style="stroke-width: 3px;" d="M 235 393 C 240 382 260 382 265 393"></path>
				<path style="stroke-width: 3px;" d="M 220 380 C 235 360 265 360 280 380"></path>
				<path style="stroke-width: 3px;" d="M 205 367 C 233 339 267 339 295 367"></path>
			</g>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<g transform="matrix(4.888889, 0, 0, 4.888889, -972.222229, -1600.681519)">
				<ellipse style="stroke-width: 3px;" cx="250" cy="406.597" rx="4.5" ry="4.5"></ellipse>
				<path style="stroke-width: 3px;" d="M 235 393 C 240 382 260 382 265 393"></path>
				<path style="stroke-width: 3px;" d="M 220 380 C 235 360 265 360 280 380"></path>
				<path style="stroke-width: 3px;" d="M 205 367 C 233 339 267 339 295 367"></path>
			</g>
		</svg>`
	],
  /* 8 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 297.836 208.448 C 307.451 206.429 317.326 205.429 327.355 205.429 C 387.96 205.429 442.917 241.944 469.121 319.271 C 479.86 365.025 473.419 435.906 469.121 471.778 C 402.318 476.074 252.391 476.074 185.591 471.778 C 179.299 439.327 175.797 382.002 182.199 337.525"></path>
			<polyline points="50.368 472.296 256.052 166.307 200.832 153.356 326.524 108.507 327.368 241.96 296.312 194.499 79.126 492.432" transform="matrix(-0.990268, -0.139173, 0.139173, -0.990268, 334.080756, 624.300215)"></polyline>
			<path d="M 268.011 183.165 C 249.091 166.628 237.14 142.317 237.14 115.215 C 237.14 65.391 277.531 25 327.355 25 C 377.179 25 417.57 65.391 417.57 115.215 C 417.57 165.039 377.179 205.43 327.355 205.43 C 319.044 205.43 310.996 204.306 303.354 202.202"></path>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 297.836 208.448 C 307.451 206.429 317.326 205.429 327.355 205.429 C 387.96 205.429 442.917 241.944 469.121 319.271 C 479.86 365.025 473.419 435.906 469.121 471.778 C 402.318 476.074 252.391 476.074 185.591 471.778 C 179.299 439.327 175.797 382.002 182.199 337.525"></path>
			<polyline points="50.368 472.296 256.052 166.307 200.832 153.356 326.524 108.507 327.368 241.96 296.312 194.499 79.126 492.432" transform="matrix(-0.990268, -0.139173, 0.139173, -0.990268, 334.080756, 624.300215)"></polyline>
			<path d="M 268.011 183.165 C 249.091 166.628 237.14 142.317 237.14 115.215 C 237.14 65.391 277.531 25 327.355 25 C 377.179 25 417.57 65.391 417.57 115.215 C 417.57 165.039 377.179 205.43 327.355 205.43 C 319.044 205.43 310.996 204.306 303.354 202.202"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 297.836 208.448 C 307.451 206.429 317.326 205.429 327.355 205.429 C 387.96 205.429 442.917 241.944 469.121 319.271 C 479.86 365.025 473.419 435.906 469.121 471.778 C 402.318 476.074 252.391 476.074 185.591 471.778 C 179.299 439.327 175.797 382.002 182.199 337.525"></path>
			<polyline points="50.368 472.296 256.052 166.307 200.832 153.356 326.524 108.507 327.368 241.96 296.312 194.499 79.126 492.432" transform="matrix(-0.990268, -0.139173, 0.139173, -0.990268, 334.080756, 624.300215)"></polyline>
			<path d="M 268.011 183.165 C 249.091 166.628 237.14 142.317 237.14 115.215 C 237.14 65.391 277.531 25 327.355 25 C 377.179 25 417.57 65.391 417.57 115.215 C 417.57 165.039 377.179 205.43 327.355 205.43 C 319.044 205.43 310.996 204.306 303.354 202.202"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 297.836 208.448 C 307.451 206.429 317.326 205.429 327.355 205.429 C 387.96 205.429 442.917 241.944 469.121 319.271 C 479.86 365.025 473.419 435.906 469.121 471.778 C 402.318 476.074 252.391 476.074 185.591 471.778 C 179.299 439.327 175.797 382.002 182.199 337.525"></path>
			<polyline points="50.368 472.296 256.052 166.307 200.832 153.356 326.524 108.507 327.368 241.96 296.312 194.499 79.126 492.432" transform="matrix(-0.990268, -0.139173, 0.139173, -0.990268, 334.080756, 624.300215)"></polyline>
			<path d="M 268.011 183.165 C 249.091 166.628 237.14 142.317 237.14 115.215 C 237.14 65.391 277.531 25 327.355 25 C 377.179 25 417.57 65.391 417.57 115.215 C 417.57 165.039 377.179 205.43 327.355 205.43 C 319.044 205.43 310.996 204.306 303.354 202.202"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 297.836 208.448 C 307.451 206.429 317.326 205.429 327.355 205.429 C 387.96 205.429 442.917 241.944 469.121 319.271 C 479.86 365.025 473.419 435.906 469.121 471.778 C 402.318 476.074 252.391 476.074 185.591 471.778 C 179.299 439.327 175.797 382.002 182.199 337.525"></path>
			<polyline points="50.368 472.296 256.052 166.307 200.832 153.356 326.524 108.507 327.368 241.96 296.312 194.499 79.126 492.432" transform="matrix(-0.990268, -0.139173, 0.139173, -0.990268, 334.080756, 624.300215)"></polyline>
			<path d="M 268.011 183.165 C 249.091 166.628 237.14 142.317 237.14 115.215 C 237.14 65.391 277.531 25 327.355 25 C 377.179 25 417.57 65.391 417.57 115.215 C 417.57 165.039 377.179 205.43 327.355 205.43 C 319.044 205.43 310.996 204.306 303.354 202.202"></path>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 297.836 208.448 C 307.451 206.429 317.326 205.429 327.355 205.429 C 387.96 205.429 442.917 241.944 469.121 319.271 C 479.86 365.025 473.419 435.906 469.121 471.778 C 402.318 476.074 252.391 476.074 185.591 471.778 C 179.299 439.327 175.797 382.002 182.199 337.525"></path>
			<polyline points="50.368 472.296 256.052 166.307 200.832 153.356 326.524 108.507 327.368 241.96 296.312 194.499 79.126 492.432" transform="matrix(-0.990268, -0.139173, 0.139173, -0.990268, 334.080756, 624.300215)"></polyline>
			<path d="M 268.011 183.165 C 249.091 166.628 237.14 142.317 237.14 115.215 C 237.14 65.391 277.531 25 327.355 25 C 377.179 25 417.57 65.391 417.57 115.215 C 417.57 165.039 377.179 205.43 327.355 205.43 C 319.044 205.43 310.996 204.306 303.354 202.202"></path>
		</svg>`
	],
  /* 9 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 316.69 325.708 C 325.475 371.442 319.422 437.548 315.321 471.778 C 248.518 476.074 98.591 476.074 31.791 471.778 C 24.596 434.667 21.049 365.025 31.791 319.271 C 57.993 241.944 112.95 205.429 173.555 205.429 C 222.476 205.429 267.717 229.222 297.125 279.068"></path>
			<ellipse cx="173.555" cy="115.215" rx="90.215" ry="90.215"></ellipse>
			<polyline points="204.857 411.774 410.541 105.785 355.321 92.834 481.013 47.985 481.857 181.438 450.801 133.977 233.615 431.91" transform="matrix(0.99863, -0.052336, 0.052336, 0.99863, -12.087331, 18.29877)"></polyline>
  		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 316.69 325.708 C 325.475 371.442 319.422 437.548 315.321 471.778 C 248.518 476.074 98.591 476.074 31.791 471.778 C 24.596 434.667 21.049 365.025 31.791 319.271 C 57.993 241.944 112.95 205.429 173.555 205.429 C 222.476 205.429 267.717 229.222 297.125 279.068"></path>
			<ellipse cx="173.555" cy="115.215" rx="90.215" ry="90.215"></ellipse>
			<polyline points="204.857 411.774 410.541 105.785 355.321 92.834 481.013 47.985 481.857 181.438 450.801 133.977 233.615 431.91" transform="matrix(0.99863, -0.052336, 0.052336, 0.99863, -12.087331, 18.29877)"></polyline>
		</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<path d="M 316.69 325.708 C 325.475 371.442 319.422 437.548 315.321 471.778 C 248.518 476.074 98.591 476.074 31.791 471.778 C 24.596 434.667 21.049 365.025 31.791 319.271 C 57.993 241.944 112.95 205.429 173.555 205.429 C 222.476 205.429 267.717 229.222 297.125 279.068"></path>
			<ellipse cx="173.555" cy="115.215" rx="90.215" ry="90.215"></ellipse>
			<polyline points="204.857 411.774 410.541 105.785 355.321 92.834 481.013 47.985 481.857 181.438 450.801 133.977 233.615 431.91" transform="matrix(0.99863, -0.052336, 0.052336, 0.99863, -12.087331, 18.29877)"></polyline>
		</svg>`
	],
  /* 10 */
	[
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<defs>
			<path id="path-0" d="M 196.561 234.585 C 206.182 234.585 211.03 235.007 215.894 235.007 C 223.657 235.35 233.576 241.092 238.334 244.524"></path>
			</defs>
			<path d="M 221.093 357.937 C 217.31 354.221 218.141 340.293 218.141 340.293 C 218.141 340.293 223.754 303.234 229.648 288.113 C 233.954 276.728 240.923 265.239 250.557 253.643 C 257.633 245.196 270.353 232.864 288.716 216.653 C 307.081 200.443 319.019 187.534 324.535 177.924 C 330.025 168.292 332.771 157.775 332.771 146.369 C 332.771 125.753 324.712 107.638 308.595 92.02 C 292.503 76.4 272.765 68.591 249.383 68.591 C 226.783 68.591 207.922 75.667 192.801 89.817 C 177.677 103.946 171.87 123.353 152.607 140.164 C 138.818 152.198 112.384 135.879 112.708 121.793 C 113.338 94.481 139.419 70.121 152.297 57.089 C 175.033 34.084 208.622 25 248.497 25 C 290.74 25 324.43 36.488 349.56 59.468 C 374.718 82.446 387.295 110.242 387.295 142.853 C 387.295 161.713 382.871 179.096 374.021 195 C 365.191 210.905 347.902 230.251 322.156 253.039 C 304.881 268.375 293.591 279.675 288.29 286.94 C 282.965 294.206 279.038 302.547 276.504 311.966 C 273.948 321.409 281.706 347.007 272.068 357.937 C 260.83 370.681 233.214 369.844 221.093 357.937 Z M 217.863 464.326 C 203.622 450.085 203.622 418.146 217.863 403.905 C 232.095 389.673 264.012 389.673 278.244 403.905 C 292.485 418.146 292.485 450.085 278.244 464.326 C 264.012 478.558 232.095 478.558 217.863 464.326 Z" style="white-space: pre;"></path>
			<path style="white-space: pre;"></path>
	  	</svg>`,
	
		`<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
			<ellipse cx="153.928" cy="219.257" rx="38.428" ry="38.428"></ellipse>
			<ellipse cx="346.072" cy="142.4" rx="38.428" ry="38.428"></ellipse>
			<ellipse cx="269.215" cy="357.6" rx="38.428" ry="38.428"></ellipse>
  		</svg>`
	]
];

var categories_income_titles = [];

const categories_income_icons = [
  /* 1 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<ellipse cx="250" cy="250" rx="225" ry="225"></ellipse>
		<path d="M 346.154 125 C 346.154 125 153.846 138.471 153.846 208.333 C 153.846 278.196 346.154 221.804 346.154 291.667 C 346.154 361.53 153.846 375 153.846 375"></path>
		<line x1="250" y1="97" x2="250" y2="403"></line>
	</svg>`,
  /* 2 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 21.662 82.418 C 21.526 69.392 209.941 25 250 25 C 290.06 25 478.339 69.065 478.339 82.418 C 478.339 95.772 290.06 139.837 250 139.837 C 209.941 139.837 21.802 95.77 21.662 82.418 Z"></path>
		<path d="M 140.505 121.142 C 140.505 121.142 212.973 139.837 250 139.837 C 287.027 139.837 359.496 121.142 359.496 121.142 L 359.496 209.273 C 359.496 209.273 287.79 238.65 250 238.65 C 212.211 238.65 140.505 209.273 140.505 209.273 L 140.505 121.142 Z"></path>
		<path d="M 406.232 109.125 C 406.232 109.125 406.232 179.496 406.232 201.261 C 409.971 210.608 418.517 210.608 422.255 201.261 C 422.255 178.561 422.255 105.119 422.255 105.119"></path>
		<path d="M 298.072 306.751 C 298.072 306.751 209.447 303.626 203.264 336.128 C 195.69 375.94 305.058 372.321 298.072 412.24 C 292.151 446.072 200.594 445.623 200.594 445.623"></path>
		<line x1="250" y1="276.039" x2="250" y2="475"></line>
	</svg>`,
  /* 3 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 25.785 287.806 C 11.943 257.829 237.188 49.564 261.515 38.66 C 286.682 25.237 439.357 15.171 458.652 41.176 C 484.656 60.469 474.59 213.145 461.168 238.311 C 450.262 262.638 243.06 491.651 212.022 474.035 C 185.178 472.358 27.47 314.649 25.785 287.806 Z"></path>
		<ellipse cx="279" cy="153" rx="47.454" ry="47.454" transform="matrix(0.707107, 0.707107, -0.707107, 0.707107, 269.729643, -164.468667)"></ellipse>
	</svg>`,
  /* 4 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 50 192 C 50 192 39.332 449.076 50.098 461.474 C 60.245 473.159 183.434 471.197 192.96 461.474 C 202.819 451.411 183.536 352.397 193.101 343.598 C 213.281 325.035 296.147 330.645 307.025 343.475 C 315.382 353.332 296.706 447.388 307.046 461.474 C 315.572 473.09 439.012 473.988 450.08 461.474 C 461.546 448.511 450.1 192 450.1 192"></path>
		<path d="M 25 219.474 C 90 134.474 245 29.474 250 29.474 C 255 29.474 410 134.474 475 219.474"></path>
	</svg>`,
  /* 5 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 316.69 325.708 C 325.475 371.442 319.422 437.548 315.321 471.778 C 248.518 476.074 98.591 476.074 31.791 471.778 C 24.596 434.667 21.049 365.025 31.791 319.271 C 57.993 241.944 112.95 205.429 173.555 205.429 C 222.476 205.429 267.717 229.222 297.125 279.068"></path>
		<ellipse cx="173.555" cy="115.215" rx="90.215" ry="90.215"></ellipse>
		<polyline points="204.857 411.774 410.541 105.785 355.321 92.834 481.013 47.985 481.857 181.438 450.801 133.977 233.615 431.91" transform="matrix(0.99863, -0.052336, 0.052336, 0.99863, -12.087331, 18.29877)"></polyline>
	</svg>`,
  /* 6 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 69.949 235.617 L 69.949 475 L 428.511 475 L 428.511 235.617 C 428.511 235.617 447.783 237.864 453.168 231.507 C 461.387 208.288 461.387 161.644 453.168 140.069 C 357.004 140.069 141.456 140.069 45.291 140.069 C 39.127 161.644 39.127 208.288 45.291 231.507 C 50.677 237.864 69.949 235.617 69.949 235.617 Z"></path>
		<line x1="189.127" y1="141.096" x2="189.127" y2="475"></line>
		<line x1="308.305" y1="141.096" x2="308.305" y2="475"></line>
		<line x1="69.949" y1="235.617" x2="189.127" y2="235.617"></line>
		<line x1="428.511" y1="235.617" x2="308.305" y2="235.617"></line>
		<path d="M 248.69 134.126 C 248.69 134.126 129.471 140.324 111.615 96.43 C 101.237 70.921 125.944 27.731 153.361 25.134 C 201.413 20.581 248.69 134.126 248.69 134.126 Z"></path>
		<path d="M 388.211 25.301 C 388.211 25.301 268.992 19.103 251.136 62.997 C 240.758 88.507 265.465 131.696 292.882 134.294 C 340.933 138.846 388.211 25.301 388.211 25.301 Z" transform="matrix(-1, 0, 0, -1, 636.927493, 159.427722)"></path>
	</svg>`,
  /* 7 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<polyline points="78.095 475 144.087 475 178.655 390.152"></polyline>
		<polyline points="421.675 475 355.682 475 322.162 390.152"></polyline>
		<polygon points="68.667 283.307 68.667 134.562 174.465 25.622 325.305 25.622 431.102 132.467 431.102 283.307 323.21 390.152 177.607 390.152"></polygon>
		<ellipse cx="249.885" cy="206.84" rx="91.133" ry="91.133"></ellipse>
		<line x1="69.239" y1="133.868" x2="164.967" y2="174.182"></line>
		<line x1="174.179" y1="25.912" x2="216.764" y2="122.349"></line>
		<line x1="325.733" y1="25" x2="284.382" y2="121.873"></line>
		<line x1="430.74" y1="132.614" x2="334.144" y2="170.592"></line>
		<line x1="431.333" y1="282.87" x2="333.411" y2="243.287"></line>
		<line x1="323.631" y1="389.679" x2="284.894" y2="290.876"></line>
		<line x1="177.783" y1="389.862" x2="216.061" y2="291.418"></line>
		<line x1="69.22" y1="282.813" x2="166.384" y2="243.666"></line>
	</svg>`,
  /* 8 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<path d="M 25 249.999 C 25 125.736 125.736 25 249.999 25 C 339.346 25 416.528 77.077 452.85 152.533"></path>
		<polyline points="356.817 113.636 454.543 154.545 454.543 56.818"></polyline>
		<path d="M 47.15 474.998 C 47.15 350.735 147.886 249.999 272.149 249.999 C 361.496 249.999 438.678 302.076 475 377.532" transform="matrix(-1, 0, 0, -1, 522.150051, 724.996982)"></path>
		<polyline points="45.454 402.271 143.181 443.18 143.181 345.453" transform="matrix(-1, 0, 0, -1, 188.635012, 788.632988)"></polyline>
	</svg>`,
  /* 9 */
  `<svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
		<polyline points="70.704 25 280.69 250 70.704 475"></polyline>
		<polyline points="219.281 25 429.296 250 219.281 475"></polyline>
	</svg>`
];

const category_transfer_icon = `
  <svg class="category-svg" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
    <line style="" stroke-miterlimit: 5; x1="30" y1="30" x2="470" y2="470"></line>
  </svg>
`;


var expense_subcategories_results = [];



// class Account extends React.Component {
// 	constructor(props) {
// 		super(props);
// 	}
// 	render() {
// 		return (
// 			<div style={{color: '#ddd', background: '#' + this.props.color}} className="account" >
// 				<input type="text" value={this.props.currency} className="account-currency active-input" readOnly></input>
// 				<input type="number" value={this.props.balance} className="account-balance active-input" style={{background: 'rgba(255, 255, 255, 0.1)'}} readOnly></input>
// 			</div>
// 		);
// 	}
// }

const account_el = (accountnum, color, currency, balance) => {
	return (`
		<div accountnum="${accountnum}" style="color: #ddd; background: #${color};" class="account">
			<p class="account-currency">${currency}</p>
			<p class="account-balance" style="background: rgba(255, 255, 255, 0.1);">${getReadableNumber(balance)}</p>
		</div>
	`);
}

function getReadableNumber (number) {

	number = number + '';
	let number_len = number.length - 3;
	number = number.split('');
	number = number.reverse();
	
	let readable_number = '';
	readable_number = readable_number.split('');
	readable_number[0] = number[0];
	readable_number[1] = number[1];
	readable_number[2] = number[2];
	
	let step = 2;

	for (let a = 1; a <= number_len; a++) {

		if (number[a + 2] == '-' || number[a + 2] == '+') {
			readable_number[a + step] = ' ';
			readable_number[a + step + 1] = number[a + 2];
			break;
		}

		readable_number[a + step] = number[a + 2];
		if (
			a % 3 == 0 && a != number_len &&
			number[a + 3] != '-' && number[a + 3] != '+'
		) {
			step++;
			readable_number[a + step] = ' ';
		}
	}

	// return number;
	readable_number = readable_number.reverse().join('');
	return readable_number;
}



const category_list_el = (category_num, icons_array, titles_array) => {
	return (`
		<div class="category" categorynum="${category_num}">
			<div class="category-svg-cont">${icons_array[category_num]}</div>
			<h3 class="category-title">${titles_array[category_num]}</h3>
		</div>
	`);
}
const subcategory_list_el = (subcategory_num, icons_array, titles_array, array_num, nested_array_num) => {
	return (`
		<div class="subcategory" subcategorynum="${subcategory_num}">
			<div class="subcategory-svg-cont">${icons_array[array_num][nested_array_num]}</div>
			<h3 class="subcategory-title">${titles_array[array_num][nested_array_num]}</h3>
		</div>
	`);
}
const category_list_hr = `<hr class="categories-hr">`;





// const accounts_root = ReactDOM.createRoot(id('accounts'));
// const settings_accounts_root = ReactDOM.createRoot(id('settings-accounts'));

window.addEventListener('load', async () => {

	if (navigator.serviceWorker) {
		try {
			await navigator.serviceWorker.register('sw.js');
			console.log('Service worker registration success.')
		} catch {
			console.log('Service worker registration failed.')
		}
	}
	
	await startApp();
});

async function startApp () {
	if (localStorage.getItem('L')) uploadAppData();
	else openHelloScreen();
}

function openHelloScreen () {

	disableScrolling();

	id('hello-screen').classList.remove('hide');

	uploadHelloTitle(0);

	id('hello-language').setAttribute('langnum', 0);
	setTimeout(() => {
		uploadHelloLanguageName(0);
		id('hello-language').style.opacity = '1';

		setTimeout(() => {
			setUpClickOnHelloSliderButtons();
		}, 200);
	}, 1000);

	setTimeout(() => {
		setUpClickOnHelloSubmitLanguageButton();
	}, 1800);
}

function uploadHelloTitle (lang) {

	let el = id('hello-screen').firstElementChild;

	el.style.transition = 'opacity .5s';
	el.style.opacity = '0';
	
	setTimeout(() => {
		if (lang == 0) el.innerHTML = 'Hello!';
		else if (lang == 1) el.innerHTML = 'Hallo!';
		else if (lang == 2) el.innerHTML = 'Ahoj!';
		else if (lang == 3) el.innerHTML = 'Привет!';
		else if (lang == 4) el.innerHTML = 'Привіт!';
		
		el.style.opacity = '1';
	}, 500);
}

function uploadHelloLanguageName (lang_num) {

	if (lang_num == -1) lang_num = 4;
	else if (lang_num == 5) lang_num = 0;

	let el = id('hello-language');
	
	if (lang_num == 0) el.innerHTML = 'English';
	else if (lang_num == 1) el.innerHTML = 'Deutsch';
	else if (lang_num == 2) el.innerHTML = 'Čeština';
	else if (lang_num == 3) el.innerHTML = 'Русский';
	else if (lang_num == 4) el.innerHTML = 'Українська';

	return lang_num;
}

function hideHelloLanguageName (direction) {
	let el = id('hello-language');
	let x = 50 * direction;

	el.style.transition = '.5s transform, .5s opacity';
	el.style.transform = `scale(0.8) translateX(${x}px)`;
	el.style.opacity = '0';
}

function showHelloLanguage (direction) {
	let el = id('hello-language');
	let x = 50 * direction;

	el.style.transition = '0s transform, 0s opacity';
	el.style.transform = `scale(0.8) translateX(${x}px)`;
	
	setTimeout(() => {
		el.style.transition = '.5s transform, .5s opacity';
		el.style.opacity = '1';
		id('hello-language').style.transform = 'scale(1) translateX(0px)';
	}, 50);
}

function setUpClickOnHelloSliderButtons () {

	id('button-slider').firstElementChild.style.opacity = '1';

	id('button-slider').firstElementChild.onclick = function() {
		if (id('hello-screen').getAttribute('animstatus') == 'done')
			clickOnHelloScreenLeftButton();
	}
	
	id('button-slider').lastElementChild.style.opacity = '1';

	id('button-slider').lastElementChild.onclick = function() {
		if (id('hello-screen').getAttribute('animstatus') == 'done')
			clickOnHelloScreenRightButton();
	}
}

function clickOnHelloScreenLeftButton () {

	id('hello-screen').setAttribute('animstatus', 'processing');
	hideHelloLanguageName(1);

	let lang_num = id('hello-language').getAttribute('langnum');
	
	setTimeout(() => {
		lang_num = uploadHelloLanguageName(Number(lang_num) - 1);
		uploadHelloTitle(lang_num);
		id('hello-language').setAttribute('langnum', lang_num);
		showHelloLanguage(-1);

		setTimeout(() => {
			id('hello-screen').setAttribute('animstatus', 'done');
		}, 500);
	}, 500);
}

function clickOnHelloScreenRightButton () {

	id('hello-screen').setAttribute('animstatus', 'processing');
	hideHelloLanguageName(-1);
	
	let lang_num = id('hello-language').getAttribute('langnum');
	
	setTimeout(() => {
		lang_num = uploadHelloLanguageName(Number(lang_num) + 1);
		uploadHelloTitle(lang_num);
		id('hello-language').setAttribute('langnum', lang_num);
		showHelloLanguage(1);

		setTimeout(() => {
			id('hello-screen').setAttribute('animstatus', 'done');
		}, 500);
	}, 500);
}

function setUpClickOnHelloSubmitLanguageButton () {

	id('hello-submit-language').style.opacity = '1';

	id('hello-submit-language').onclick = () => {
		
		id('hello-submit-language').style.transition = '1s opacity, 1s transform';
		id('hello-submit-language').style.transform = 'scale(0.8)';
		id('hello-submit-language').style.opacity = '0';

		setTimeout(() => {
			id('hello-title').style.transition = '.5s opacity, .5s transform';
			id('hello-title').style.transform = 'scale(0.8)';
			id('hello-title').style.opacity = '0';
		}, 500);

		setTimeout(() => {
			id('button-slider').firstElementChild.style.transform = 'scale(0.8)';
			id('button-slider').firstElementChild.style.opacity = '0';
			id('button-slider').lastElementChild.style.transform = 'scale(0.8)';
			id('button-slider').lastElementChild.style.opacity = '0';
		}, 700);

		setTimeout(() => {
			id('hello-language').style.transition = '.5s opacity, .5s transform';
			id('hello-language').style.transform = 'scale(0.8)';
			id('hello-language').style.opacity = '0';

			setTimeout(() => {
				localStorage.setItem( 'L', getLanguageByNumber(id('hello-language').getAttribute('langnum')) );
				closeHelloScreen();
			}, 1000);
		}, 1200);
		
	}
}

function getLanguageByNumber (lang_num) {

	if (lang_num == 0) return 'en';
	else if (lang_num == 1) return 'de';
	else if (lang_num == 2) return 'cz';
	else if (lang_num == 3) return 'ru';
	else if (lang_num == 4) return 'ua';
	return lang_num;
}

function closeHelloScreen () {
	id('hello-screen').classList.add('hide');
	uploadAppData();
	startPreloaderAnimation();
}



function uploadAppData () {

	// upload version update
	uploadVersionUpdate();

	// upload language
	let lang = localStorage.getItem('L');
	uploadLanguage(lang);

	// upload blur
	if (!(localStorage.getItem('B')))
		localStorage.setItem('B', '1');
	reapplyBlur(Number(localStorage.getItem('B')));

	// upload categories to its windows

	uploadCategoriesToItsWindow(id('categories-expense'), categories_expense_titles, categories_expense_icons);
	uploadCategoriesToItsWindow(id('categories-income'), categories_income_titles, categories_income_icons);
	uploadSubcategoriesToItsWindow();

	setUpOpeningSubcategoryList(
		id('categories-expense'),
		id('categories-expense').getElementsByClassName('category'),
		id('subcategories').getElementsByClassName('subcategory-cont')
	);

	// apply theme
	
	if (!localStorage.getItem('T')) {
		localStorage.setItem('T', 'l');
		localStorage.setItem('AT', '0');
	}
	applyTheme(localStorage.getItem('T'));


	// apply top margin
	if (!(localStorage.getItem('TM'))) localStorage.setItem('TM', 0);
		applyTopmargin();

	// upload accounts or add the new one on first run of the app
	if (!localStorage.getItem('ACount')) {
		localStorage.setItem('ACount', 0);
		addAccount();
	}
	for (let a = 1; a <= localStorage.getItem('ACount'); a++)
		uploadAccount(a, id('accounts'));
	setUpClickOnAccounts();

	// invert all account's black colores in dark theme 
	checkAccountsColorInExactlyCont(id('root'));

	// upload records to history
	if (localStorage.getItem('RCount')) uploadRecordsToHistory();
	else localStorage.setItem('RCount', 0);

	// upload today statistic
	uploadTodayStats(lang, id('accounts').getAttribute('accountnum'));
	
	// upload incomes and categories statistic
	uploadExpensesIncomesStats();
	fitPieChartSize();
	uploadDataToPieChart();
	
	// upload date filter menu
	setTimeout(uploadDataToCustomDateFilterMenu, 100);
	setTimeout(positionateDateFilterMenu, 101);

	// give fix width to elements
	setTimeout(fixCurrentWidthOfElements, 1);
}

function uploadVersionUpdate () {
	let version = '3.0.2';

	if (!localStorage.getItem('V')) {

		localStorage.setItem('V', version);
		setTimeout(() => {
			showNotification('update 3.0.0', 6500);
		}, 3000);

	} else if (localStorage.getItem('V') != version) {
		
		localStorage.setItem('V', version);
		setTimeout(() => {
			showNotification(`update ${version}`, 6500);
		}, 3000);
	}
}





function showNotification (type, timer) {

	let notification_contEl = id('notification-cont'),
		notificationEl = id('notification')
		timer_line = id('notification-timer-line');
	var hide_notification;

	// upload message
	uploadNotificationMessage(type, id('notification-title'), id('notification-details'));
	// show or hide buttons block
	uploadNotificationButtons(type, notificationEl);
	
	// start show notification animation
	notification_contEl.style.visibility = 'visible';
	notification_contEl.classList.add('show');
	// show timer line
	if (timer > 0) timer_line.style.transition = `${timer / 1000}s width linear`;
	else timer_line.style.width = '0%';
	
	setTimeout(() => {
		// end show notification animation
		notification_contEl.classList.add('animate-end');
		notification_contEl.classList.remove('show');
		// start timer to hide notification
		if (timer > 0) {
			timer_line.style.width = '0%';
			hide_notification = setTimeout(() => {
				hideNotification(notification_contEl);
			}, timer);
		}
	}, 400);
	
	// hide notification by click on it
	notificationEl.onclick = e => {
		if (e.target.id != 'notification-show-details-button') {
			clearTimeout(hide_notification);
			hideNotification(notification_contEl);
		}
	}
}

function uploadNotificationMessage (type, titleEl, detailsEl) {
	let lang = localStorage.getItem('L');

	if (type == `update ${localStorage.getItem('V')}` || type == 'update 3.0.0') {
		if (lang == 'en')
			detailsEl.innerText = `WalletStats got new update version ${localStorage.getItem('V')}!`;
		else if (lang == 'de')
			detailsEl.innerText = `WalletStats hat ein neues Update auf Version ${localStorage.getItem('V')}!`;
		else if (lang == 'cz')
			detailsEl.innerText = `WalletStats dostal novou aktualizaci verze ${localStorage.getItem('V')}!`;
		else if (lang == 'ru')
			detailsEl.innerText = `WalletStats получил новое обновление версии ${localStorage.getItem('V')}!`;
		else if (lang == 'ua')
			detailsEl.innerText = `WalletStats отримав нове оновлення версії ${localStorage.getItem('V')}!`;
	}
}

function uploadNotificationButtons (type, notificationEl) {

	if (type == `update ${localStorage.getItem('V')}` || type == 'update 2.4') {

		let windowEl_cont = id('update-details-cont'),
			windowEl = id('update-details-cont').lastElementChild;

		// show button block
		id('notification-button-block').style.display = 'flex';

		id('notification-show-details-button').onclick = function() {
			// upload update details content to window
			uploadUpdateDetailsToItsWindow(type);
			// open update detail's window
			disableScrolling();
			openFloatingWindow(notificationEl, windowEl_cont, windowEl, calculateScaleX(notificationEl, windowEl_cont));
			// set up click to close update's details window
			windowEl_cont.firstElementChild.onclick = function() {
				closeFloatingWindowByDisappearMethod(notificationEl, windowEl_cont, windowEl);
				enableScrolling();
			}
		}
	}
}

function hideNotification (notification_contEl) {

	notification_contEl.classList.remove('animate-end');
	
	setTimeout(() => {
		notification_contEl.style.visibility = 'hidden';
	}, 400);
}



function uploadUpdateDetailsToItsWindow (type) {
	let container = id('update-details-paragraphs');

	let paragraphs = getUpdateDetailsArrayByLang(type);
	
	for (let a = 0; a < paragraphs.length; a++)
		container.insertAdjacentHTML('beforeend', paragraphs[a]);
}

function getUpdateDetailsArrayByLang (type) {
	let lang = localStorage.getItem('L');

	if (type == 'update 3.0.0') {

		if (lang == 'en')
			return [
				`<h3>Desktop optimazing</h3>
				<p>
					Now WalletStats is optimized for using on desktop.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>German language support</h3>
				<p>
					Now WalletStats is available in German. Change language to German or other you can in settings.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Other</h3>
				<p>
					Other features, bug fixing and visual improvements.
				</p>`
			];
		else if (lang == 'de')
			return [
				`<h3>Desktop optimieren</h3>
				<p>
					Jetzt ist WalletStats für die Verwendung auf dem Desktop optimiert.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Unterstützung für die deutsche Sprache</h3>
				<p>
					Jetzt ist WalletStats auf Deutsch verfügbar. Die Sprache kann in den Einstellungen auf Deutsch oder eine andere Sprache geändert werden.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Sonstiges</h3>
				<p>
					Weitere Funktionen, Fehlerbehebungen und visuelle Verbesserungen.
				</p>`
			];
		else if (lang == 'cz')
			return [
				`<h3>Optimalizace pro počítač</h3>
				<p>
					Nyní je WalletStats optimalizován pro použití na počítači.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Podpora německého jazyka</h3>
				<p>
					Nyní je WalletStats dostupný v němčině. Jazyk můžete změnit na němčinu nebo jiný v nastavení.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Jiné</h3>
				<p>
					Další funkce, opravy chyb a vizuální vylepšení.
				</p>`
			];
		else if (lang == 'ru')
			return [
				`<h3>Оптимизация для компьютеров</h3>
				<p>
					Теперь WalletStats оптимизирован для использования на компьютерах.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Поддержка немецкого языка</h3>
				<p>
					Теперь WalletStats доступен на немецком языке. Вы можете изменить язык на немецкий или другой в настройках.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Прочее</h3>
				<p>
					Другие функции, исправление ошибок и визуальные улучшения.
				</p>`
			];
		else if (lang == 'ua')
			return [
				`<h3>Оптимізація для комп'ютера</h3>
				<p>
					Тепер WalletStats оптимізований для використання на комп'ютері.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Підтримка німецької мови</h3>
				<p>
					Тепер WalletStats доступний німецькою мовою. Мову можна змінити на німецьку або іншу в налаштуваннях.
				</p>`,
				`<hr class="small-hr">`,

				`<h3>Інше</h3>
				<p>
					Інші функції, виправлення помилок та візуальні поліпшення.
				</p>`
			];	

	} else if (type == `update ${localStorage.getItem('V')}`) {
		
		if (lang == 'en')
			return [
				`<h3>Other</h3>
				<p>
					Bug fixing and visual improvements.
				</p>`
				/* `<h3>Other</h3>
				<p>
					Bug fixing.
				</p>` */
			];
		else if (lang == 'de')
			return [
				`<h3>Sonstiges</h3>
				<p>
					Fehlerbehebungen und visuelle Verbesserungen.
				</p>`
				/* `<h3>Sonstiges</h3>
				<p>
					Fehlerbehebungen.
				</p>` */
			];
		else if (lang == 'cz')
			return [
				`<h3>Ostatní</h3>
				<p>
					Opravy chyb a vizuální vylepšení.
				</p>`
				/* `<h3>Ostatní</h3>
				<p>
					Opravy chyb.
				</p>` */
			];
		else if (lang == 'ru')
			return [
				`<h3>Другое</h3>
				<p>
					Исправление ошибок и визуальные улучшения.
				</p>`
				/* `<h3>Другое</h3>
				<p>
					Исправление ошибок.
				</p>` */
			];
		else if (lang == 'ua')
			return [
				`<h3>Інше</h3>
				<p>
					Виправлення помилок і візуальні покращення.
				</p>`
				/* `<h3>Інше</h3>
				<p>
					Виправлення помилок.
				</p>` */
			];
	}
}




function startPreloaderAnimation () {

	disableScrolling();
	
	setTimeout(() => {
		
		id('preloader-svg').classList.add('show');
	
		setTimeout(() => {
			id('preloader-svg').classList.add('animate');
			
			setTimeout(() => {
				id('preloader-svg').classList.add('prefinish');

				setTimeout(() => {
					id('preloader-svg').classList.add('finish');

					setTimeout(() => {
						id('preloader').classList.add('hide');
			
						setTimeout(() => {
							id('preloader').style.display = 'none';
							enableScrolling();
						}, 300);
					}, 50); // hide
				}, 200); // finish
			}, 600); // prefinish
		}, 550); // animate
	}, 500); // show
}





function uploadLanguage (lang) {

	uploadFontFamilyByLanguage(lang);
	uploadLanguageToRecordCategories(lang);
	uploadLanguageToHistoryNavbars(lang);
	uploadLanguageToWidgets(lang);
	uploadLanguageToTitles(lang);
	uploadLanguageToButtons(lang);
}


function uploadFontFamilyByLanguage (lang) {

	if (lang == 'en' || lang == 'de' || lang == 'cz')
		id('body').classList.add('font1');
	else if (lang == 'ru' || lang == 'ua')
		id('body').classList.add('font2');
}


function uploadLanguageToRecordCategories (lang) {

	categories_expense_titles = getCategoriesExpenseTitlesByLanguage(lang);
	subcategories_titles = getSubategoriesTitlesByLanguage(lang);
	categories_income_titles = getCategoriesIncomeTitlesByLanguage(lang);
}

function getCategoriesExpenseTitlesByLanguage (lang) {

	if (lang == 'en')
		return [
			/* 1 */ 'Food and drinks',
			/* 2 */ 'Shopping',
			/* 3 */ 'Housing',
			/* 4 */ 'Transport',
			/* 5 */ 'Vehicle',
			/* 6 */ 'Life and entertainment',
			/* 7 */ 'Communications',
			/* 8 */ 'Financial expenses',
			/* 9 */ 'Investments',
			/* 10 */ 'Other'
		];
	else if (lang == 'de')
		return [
			/* 1 */ 'Essen und Getränke',
			/* 2 */ 'Einkaufen',
			/* 3 */ 'Haus',
			/* 4 */ 'Verkehrsmittel',
			/* 5 */ 'Fahrzeug',
			/* 6 */ 'Leben und Freizeit',
			/* 7 */ 'Kommunikation',
			/* 8 */ 'Finanzierungsspesen',
			/* 9 */ 'Investitionen',
			/* 10 */ 'Andere'
		];
	else if (lang == 'cz')
		return [
			/* 1 */ 'Jídlo a pití',
			/* 2 */ 'Nakupování',
			/* 3 */ 'Bydlení',
			/* 4 */ 'Doprava',
			/* 5 */ 'Vozidlo',
			/* 6 */ 'Život a zábava',
			/* 7 */ 'Sdělení',
			/* 8 */ 'Finanční výdaje',
			/* 9 */ 'Investice',
			/* 10 */ 'Ostatní'
		];
	else if (lang == 'ru')
		return [
			/* 1 */ 'Еда и напитки',
			/* 2 */ 'Шоппинг',
			/* 3 */ 'Жилье',
			/* 4 */ 'Транспорт',
			/* 5 */ 'Транспортное средство',
			/* 6 */ 'Жизнь и развлечения',
			/* 7 */ 'Коммуникация',
			/* 8 */ 'Финансовые расходы',
			/* 9 */ 'Вложения',
			/* 10 */ 'Другое'
		];
	else if (lang == 'ua')
		return [
			/* 1 */ 'Їжа та напої',
			/* 2 */ 'Шопінг',
			/* 3 */ 'Житло',
			/* 4 */ 'Транспорт',
			/* 5 */ 'Транспортний засіб',
			/* 6 */ 'Життя і розваги',
			/* 7 */ 'Комунікація',
			/* 8 */ 'Фінансові витрати',
			/* 9 */ 'Інвестиції',
			/* 10 */ 'Інше'
		];
}

function getSubategoriesTitlesByLanguage (lang) {
	
	if (lang == 'en')
		return [
			/* 1 */
			[
				'Groceries',
				'Restaurant, fast-food',
				'Cafe, bar',
			],
			/* 2 */
			[
				'Clothes and shoes',
				'Drug-store, chemist',
				'Electronic, accessories',
				'Gifts, joy',
				'Health and beauty',
				'Home, garden',
				'Jewels, accessories',
				'Kids',
				'Pets, animals',
				'Stationery, tools',
			],
			/* 3 */
			[
				'Energy, utilities',
				'Maintenance, repairs',
				'Mortgage',
				'Property insurance',
				'Rent',
				'Services',
			],
			/* 4 */
			[
				'Public transport',
				'Taxi',
				'Business trips',
				'Long distance',
			],
			/* 5 */
			[
				'Fuel',
				'Parking',
				'Leasing',
				'Rentals',
				'Vehicle insurance',
				'Vehicle maintenance',
			],
			/* 6 */
			[
				'Wellness, beauty',
				'Active sport, fitness',
				'Alcohol, tobacco',
				'Books, audio',
				'Gifts, charity',
				'Culture, events',
				'Education, development',
				'Health care, doctor',
				'Hobbies',
				'Holiday, trips, hotels',
				'Life events',
				'Lottery, gambling',
				'TV, Streaming',
			],
			/* 7 */
			[
				'Telephone communications',
				'Internet',
				'Subscriptions, software, apps, games',
				'Postal services',
			],
			/* 8 */
			[
				'Advisory',
				'Charges, fees',
				'Taxes',
				'Fines',
				'Insurance',
				'Loan, interests',
			],
			/* 9 */
			[
				'Financial investments',
				'Realty',
				'Savings',
			],
			/* 10 */
			[
				'Missing',
				'Other'
			]
		];
	else if (lang == 'de')
		return [
			/* 1 */
			[
				'Lebensmittel',
				'Restaurant, Fastfood',
				'Cafe, Bar',
			],
			/* 2 */
			[
				'Kleidung und Schuhe',
				'Apotheke',
				'Elektronik, Zubehör',
				'Geschäfte, Lust',
				'Gesundheit, Schönheit',
				'Haus und Garten',
				'Schmuck, Zubehör',
				'Kinder',
				'Haustiere',
				'Schreibwaren, Werkzeuge',
			],
			/* 3 */
			[
				'Nebenkosten',
				'Instandhaltung',
				'Hypothek',
				'Versicherung',
				'Miete',
				'Dienst',
			],
			/* 4 */
			[
				'Öffentliche Verkehrsmittel',
				'Taxi',
				'Dienstreisen',
				'Langstrecke',
			],
			/* 5 */
			[
				'Kraftstoff',
				'Parken',
				'Leasing',
				'Autovermietung',
				'Autoversicherung',
				'Service des Autos',
			],
			/* 6 */
			[
				'Schönheit',
				'Aktivsport, Fitness',
				'Alkohol, Tabakwaren',
				'Bücher, Audio',
				'Geschenke, Wohltätigkeit',
				'Kultur, Veranstaltungen',
				'Ausbildung, Entwicklung',
				'Gesundheit, Arzt',
				'Interessen, Hobbys',
				'Freizeit, Reisen, Hotels',
				'Lebensereignisse',
				'Lotterie, Glücksspiel',
				'Fernsehen',
			],
			/* 7 */
			[
				'Telefonkommunikation',
				'Internet',
				'Abonnements, Software, Apps, Spiele',
				'Postdienste',
			],
			/* 8 */
			[
				'Beratungen',
				'Einziehung',
				'Abgaben',
				'Bußgelder',
				'Versicherung',
				'Kredit',
			],
			/* 9 */
			[
				'Finanzielle Investitionen',
				'Liegenschaft',
				'Ersparnisse',
			],
			/* 10 */
			[
				'abwesend',
				'andere'
			]
		];
	else if (lang == 'cz')
		return [
			/* 1 */
			[
				'Potraviny',
				'Restaurace, fast-food',
				'Kavárna, bar',
			],
			/* 2 */
			[
				'Oblečení a boty',
				'Lékárna',
				'Elektronika, příslušenství',
				'Dárky, radost',
				'Zdraví a krása',
				'Dům a zahrada',
				'Šperky, doplňky',
				'Děti',
				'Domácí mazlíčci, zvířata',
				'Psací potřeby, nářadí',
			],
			/* 3 */
			[
				'Energie, utility',
				'Údržba, opravy',
				'Hypotéka',
				'Pojištění majetku',
				'Nájemné',
				'Ostátní služby',
			],
			/* 4 */
			[
				'Veřejná doprava',
				'Taxi',
				'Služební cesty',
				'Velká vzdálenost',
			],
			/* 5 */
			[
				'Palivo',
				'Parkoviště',
				'Leasing',
				'Pronájem vozidla',
				'Pojištění vozidla',
				'Údržba vozidla',
			],
			/* 6 */
			[
				'Wellness, krása',
				'Aktivní sport, fitness',
				'Alkohol, tabák',
				'Knihy, audio',
				'Dary, charita',
				'Kultura, akce',
				'Vzdělávání, rozvoj',
				'Zdravotní péče, lékař',
				'Koníčky',
				'Dovolená, výlety, hotely',
				'Životní události',
				'Loterie, hazardní hry',
				'TV, streamování',
			],
			/* 7 */
			[
				'Telefonní komunikace',
				'Internet',
				'Předplatné, software, aplikace, hry',
				'Poštovní služby',
			],
			/* 8 */
			[
				'Poradní',
				'Poplatky',
				'Daně',
				'Pokuty',
				'Pojištění',
				'Půjčka, úroky',
			],
			/* 9 */
			[
				'Finanční investice',
				'Nemovitost',
				'Úspory',
			],
			/* 10 */
			[
				'Chybějící',
				'Ostatní'
			]
		];
	else if (lang == 'ru')
		return [
			/* 1 */
			[
				'Продукты',
				'Ресторан, фаст-фуд',
				'Кафе, бар',
			],
			/* 2 */
			[
				'Одежда и обувь',
				'Аптека',
				'Электроника, аксессуары',
				'Подарки, радость',
				'Здоровье, красота',
				'Дом, сад',
				'Драгоценности, аксессуары',
				'Дети',
				'Домашние животные, животные',
				'Канцтовары, инструменты',
			],
			/* 3 */
			[
				'Коммунальные услуги',
				'Обслуживание, ремонт',
				'Ипотека',
				'Страхование собственности',
				'Аренда',
				'Услуги',
			],
			/* 4 */
			[
				'Общественный транспорт',
				'Такси',
				'Командировки',
				'Длинная дистанция',
			],
			/* 5 */
			[
				'Топливо',
				'Парковка',
				'Лизинг',
				'Аренда авто',
				'Страхование авто',
				'Обслуживание авто',
			],
			/* 6 */
			[
				'Красота',
				'Активный спорт, фитнес',
				'Алкоголь, табак',
				'Книги, аудио',
				'Подарки, благотворительность',
				'Культура, события',
				'Обучение, развитие',
				'Здравоохранение, врач',
				'Увлечения, хобби',
				'Отдых, поездки, отели',
				'Жизненные события',
				'Лотерея, азартные игры',
				'Телевидение'
			],
			/* 7 */
			[
				'Телефонная связь',
				'Интернет',
				'Подписки, программное обеспечение, приложения, игры',
				'Почтовые услуги',
			],
			/* 8 */
			[
				'Консультации',
				'Сборы',
				'Налоги',
				'Штрафы',
				'Страхование',
				'Кредит, проценты',
			],
			/* 9 */
			[
				'Финансовые вложения',
				'Недвижимость',
				'Сбережения',
			],
			/* 10 */
			[
				'Недостающее',
				'Другое'
			]
		];
	else if (lang == 'ua')
		return [
			/* 1 */
			[
				'Бакалія, продукты',
				'Ресторан, фаст-фуд',
				'Кафе, бар',
			],
			/* 2 */
			[
				'Одяг і взуття',
				'Аптека',
				'Електроніка, аксесуари',
				'Подарунки, радість',
				'Здоров\'я і краса',
				'Дім, сад',
				'Коштовності, аксесуари',
				'Діти',
				'Домашні тварини, тварини',
				'Канцтовари, інструменти',
			],
			/* 3 */
			[
				'Комунальні послуги',
				'Технічне обслуговування, ремонт',
				'Іпотека',
				'Страхування майна',
				'Оренда житла',
				'Послуги (житло)',
			],
			/* 4 */
			[
				'Громадський транспорт',
				'Таксі',
				'Відрядження',
				'Довга відстань',
			],
			/* 5 */
			[
				'Паливо',
				'Паркінг',
				'Лізинг',
				'Оренда авто',
				'Страхування авто',
				'Обслуговування авто',
			],
			/* 6 */
			[
				'Здоров\'я, краса',
				'Активний спорт, фітнес',
				'Алкоголь, тютюн',
				'Книги, аудіо',
				'Подарунки, благодійність',
				'Культура, заходи',
				'Освіта, розвиток',
				'Охорона здоров\'я, лікар',
				'Хобі',
				'Відпочинок, подорожі, готелі',
				'Життєві події',
				'Лотерея, азартні ігри',
				'Телебачення',
			],
			/* 7 */
			[
				'Телефонний зв\'язок',
				'Інтернет',
				'Підписки, програмне забезпечення, ігри',
				'Поштові послуги',
			],
			/* 8 */
			[
				'Дорадчий, консультації',
				'Збори',
				'Податки',
				'Штрафи',
				'Страхування',
				'Кредит, проценти',
			],
			/* 9 */
			[
				'Фінансові інвестиції',
				'Нерухомість',
				'Заощадження',
			],
			/* 10 */
			[
				'Відсутнє, загублене',
				'Інше'
			]
		];
}

function getCategoriesIncomeTitlesByLanguage (lang) {

	if (lang == 'en')
		return [
			/* 1 */ 'Salary',
			/* 2 */ 'Scholarship',
			/* 3 */ 'Sale',
			/* 4 */ 'Rent',
			/* 5 */ 'Investments',
			/* 6 */ 'Gifts',
			/* 7 */ 'Lottery',
			/* 8 */ 'Refund',
			/* 9 */ 'Transfers'
		  ];
	else if (lang == 'de')
		return [
			/* 1 */ 'Gehalt',
			/* 2 */ 'Stipendium',
			/* 3 */ 'Verkauf',
			/* 4 */ 'Miete',
			/* 5 */ 'Investitionen',
			/* 6 */ 'Geschenke',
			/* 7 */ 'Lotterie',
			/* 8 */ 'Rückgabe',
			/* 9 */ 'Überweisung'
		];
	else if (lang == 'cz')
		return [
			/* 1 */ 'Plat',
			/* 2 */ 'Stipendium',
			/* 3 */ 'Prodej',
			/* 4 */ 'Nájemné',
			/* 5 */ 'Investice',
			/* 6 */ 'Dárky',
			/* 7 */ 'Loterie',
			/* 8 */ 'Vrácení peněz',
			/* 9 */ 'Převody'
		];
	else if (lang == 'ru')
		return [
			/* 1 */ 'Зарплата',
			/* 2 */ 'Стипендия',
			/* 3 */ 'Продажа',
			/* 4 */ 'Аренда',
			/* 5 */ 'Вложения',
			/* 6 */ 'Подарки, дары',
			/* 7 */ 'Лотерея',
			/* 8 */ 'Возврат денег',
			/* 9 */ 'Переводы'
		  ];
	else if (lang == 'ua')
		return [
			/* 1 */ 'Зарплата',
			/* 2 */ 'Стипендія',
			/* 3 */ 'Продаж',
			/* 4 */ 'Оренда',
			/* 5 */ 'Інвестиції',
			/* 6 */ 'Подарунки',
			/* 7 */ 'Лотерея',
			/* 8 */ 'Повернення коштів',
			/* 9 */ 'Перекази'
		  ];
}


function uploadLanguageToHistoryNavbars (lang) {

	let array = id('history-period-nav').getElementsByTagName('input');

	if (lang == 'en') {
		array[0].value = 'This month';
		array[1].value = 'Prev month';
		array[2].value = 'Custom';
	} else if (lang == 'de') {
		array[0].value = 'Dieser Monat';
		array[1].value = 'Vormonat';
		array[2].value = 'Filter';
	} else if (lang == 'cz') {
		array[0].value = 'Tento měsíc';
		array[1].value = 'Před měsíc';
		array[2].value = 'Vlastní';
	} else if (lang == 'ru') {
		array[0].value = 'Этот месяц';
		array[1].value = 'Предыдущий';
		array[2].value = 'Фильтр';
	} else if (lang == 'ua') {
		array[0].value = 'Цей місяць';
		array[1].value = 'Попередній';
		array[2].value = 'Фільтр';
	}

	array = id('history-type-nav').getElementsByTagName('input');

	if (lang == 'en') {
		array[0].value = 'Expenses';
		array[1].value = 'Incomes';
		array[2].value = 'View all';
	} else if (lang == 'de') {
		array[0].value = 'Spesen';
		array[1].value = 'Einkünfte';
		array[2].value = 'Alle';
	} else if (lang == 'cz') {
		array[0].value = 'Výdaje';
		array[1].value = 'Příjmy';
		array[2].value = 'Vše';
	} else if (lang == 'ru') {
		array[0].value = 'Расходы';
		array[1].value = 'Доходы';
		array[2].value = 'Все';
	} else if (lang == 'ua') {
		array[0].value = 'Витрати';
		array[1].value = 'Доходи';
		array[2].value = 'Все';
	}
}


function uploadLanguageToWidgets (lang) {

	let el = id('stats-column').getElementsByClassName('stats-column-title');

	if (lang == 'en') {
		el[0].firstElementChild.firstElementChild.innerHTML = 'Incomes';
		el[1].firstElementChild.firstElementChild.innerHTML = 'Expenses';
	} else if (lang == 'de') {
		el[0].firstElementChild.firstElementChild.innerHTML = 'Einkünfte';
		el[1].firstElementChild.firstElementChild.innerHTML = 'Spesen';
	} else if (lang == 'cz') {
		el[0].firstElementChild.firstElementChild.innerHTML = 'Příjmy';
		el[1].firstElementChild.firstElementChild.innerHTML = 'Výdaje';
	} else if (lang == 'ru') {
		el[0].firstElementChild.firstElementChild.innerHTML = 'Доходы';
		el[1].firstElementChild.firstElementChild.innerHTML = 'Расходы';
	} else if (lang == 'ua') {
		el[0].firstElementChild.firstElementChild.innerHTML = 'Доходи';
		el[1].firstElementChild.firstElementChild.innerHTML = 'Витрати';
	}

	el = id('today-stats-title');
	
	if (lang == 'en')
		el.innerText = 'Today';
	else if (lang == 'de')
		el.innerText = 'Heute';
	else if (lang == 'cz')
		el.innerText = 'Dnes';
	else if (lang == 'ru')
		el.innerText = 'Сегодня';
	else if (lang == 'ua')
		el.innerText = 'Сьогодні';

	el = id('incomes-expenses-total-title');
	
	if (lang == 'en')
		el.innerText = 'Total:';
	else if (lang == 'de')
		el.innerText = 'Gesamt:';
	else if (lang == 'cz')
		el.innerText = 'Celkem:';
	else if (lang == 'ru')
		el.innerText = 'Всего:';
	else if (lang == 'ua')
		el.innerText = 'Всього:';
}


function uploadLanguageToTitles(lang) {

	let el = id('update-details-title');

	if (lang == 'en')
		el.innerText = `What's new in V${localStorage.getItem('V')}`;
	else if (lang == 'de')
		el.innerText = `Was gibt es Neues in V${localStorage.getItem('V')}`;
	else if (lang == 'cz')
		el.innerText = `Co je nové ve V${localStorage.getItem('V')}`;
	else if (lang == 'ru')
		el.innerText = `Что нового в В${localStorage.getItem('V')}`;
	else if (lang == 'ua')
		el.innerText = `Що нового у В${localStorage.getItem('V')}`;

	el = id('make-record-window').getElementsByClassName('field-title');

	if (lang == 'en') {
		el[0].innerHTML = 'Date';
		el[1].innerHTML = 'Note';
		el[2].innerHTML = 'Account';
		el[3].innerHTML = 'Amount';
		el[4].innerHTML = 'Category';
	} else if (lang == 'de') {
		el[0].innerHTML = 'Datum';
		el[1].innerHTML = 'Anmerkung';
		el[2].innerHTML = 'Konto';
		el[3].innerHTML = 'Summe';
		el[4].innerHTML = 'Kategorie';
	} else if (lang == 'cz') {
		el[0].innerHTML = 'Datum';
		el[1].innerHTML = 'Poznámka';
		el[2].innerHTML = 'Účet';
		el[3].innerHTML = 'Částka';
		el[4].innerHTML = 'Kategorie';
	} else if (lang == 'ru') {
		el[0].innerHTML = 'Дата';
		el[1].innerHTML = 'Примечание';
		el[2].innerHTML = 'Счёт';
		el[3].innerHTML = 'Сумма';
		el[4].innerHTML = 'Категория';
	} else if (lang == 'ua') {
		el[0].innerHTML = 'Дата';
		el[1].innerHTML = 'Примітка';
		el[2].innerHTML = 'Рахунок';
		el[3].innerHTML = 'Сума';
		el[4].innerHTML = 'Категорія';
	}

	el = id('make-record-note');

	if (lang == 'en')
		el.setAttribute('placeholder', 'Note for more specific');
	else if (lang == 'de')
		el.setAttribute('placeholder', 'Hinweis für weitere Einzelheiten');
	else if (lang == 'cz')
		el.setAttribute('placeholder', 'Poznámka pro upřesnění');
	else if (lang == 'ru')
		el.setAttribute('placeholder', 'Примечание для большей конкретики');
	else if (lang == 'ua')
		el.setAttribute('placeholder', 'Примітка для більшої конкретики');

	adaptInputLengthExplicitly(el);

	el = id('edit-account').getElementsByClassName('field-title');

	if (lang == 'en') {
		el[0].innerHTML = 'Currency';
		el[1].innerHTML = 'Balance';
		el[2].innerHTML = 'Color';
	} else if (lang == 'de') {
		el[0].innerHTML = 'Währung';
		el[1].innerHTML = 'Bilanz';
		el[2].innerHTML = 'Farbe';
	} else if (lang == 'cz') {
		el[0].innerHTML = 'Měna';
		el[1].innerHTML = 'Zůstatek';
		el[2].innerHTML = 'Barva';
	} else if (lang == 'ru') {
		el[0].innerHTML = 'Валюта';
		el[1].innerHTML = 'Баланс';
		el[2].innerHTML = 'Цвет';
	} else if (lang == 'ua') {
		el[0].innerHTML = 'Валюта';
		el[1].innerHTML = 'Баланс';
		el[2].innerHTML = 'Колір';
	}

	el = id('date-filter-menu').getElementsByClassName('field-title');

	if (lang == 'en') {
		el[0].innerHTML = 'From';
		el[1].innerHTML = 'To';
	} else if (lang == 'de') {
		el[0].innerHTML = 'Von';
		el[1].innerHTML = 'Bis';
	} else if (lang == 'cz') {
		el[0].innerHTML = 'Od';
		el[1].innerHTML = 'Do';
	} else if (lang == 'ru') {
		el[0].innerHTML = 'От';
		el[1].innerHTML = 'До';
	} else if (lang == 'ua') {
		el[0].innerHTML = 'Від';
		el[1].innerHTML = 'До';
	}

	el = id('settings').firstElementChild.firstElementChild;

	if (lang == 'en')
		el.innerHTML = 'Settings';
	else if (lang == 'de')
		el.innerHTML = 'Einstellungen';
	else if (lang == 'cz')
		el.innerHTML = 'Nastavení';
	else if (lang == 'ru')
		el.innerHTML = 'Настройки';
	else if (lang == 'ua')
		el.innerHTML = 'Налаштування';
}


function uploadLanguageToButtons (lang) {

	let el = id('notification-show-details-button');

	if (lang == 'en')
		el.value = 'Show details';
	else if (lang == 'de')
		el.value = 'Details anzeigen';
	else if (lang == 'cz')
		el.value = 'Ukázat podrobnosti';
	else if (lang == 'ru')
		el.value = 'Показать детали';
	else if (lang == 'ua')
		el.value = 'Показати деталі';

	el = id('make-record-button');

	if (lang == 'en')
		el.value = 'Make record';
	else if (lang == 'de')
		el.value = 'Eintrag erstellen';
	else if (lang == 'cz')
		el.value = 'Udělelat záznam';
	else if (lang == 'ru')
		el.value = 'Сделать запись';
	else if (lang == 'ua')
		el.value = 'Зробити запис';

	el[0] = id('settings-button-desktop');
	el[1] = id('settings-button-cont-mobile');

	if (lang == 'en') {
		el[0].value = 'Settings';
		el[1].value = 'Settings';
	} else if (lang == 'de') {
		el[0].value = 'Einstellungen';
		el[1].value = 'Einstellungen';
	} else if (lang == 'cz') {
		el[0].value = 'Nastavení';
		el[1].value = 'Nastavení';
	} else if (lang == 'ru') {
		el[0].value = 'Настройки';
		el[1].value = 'Настройки';
	} else if (lang == 'ua') {
		el[0].value = 'Налаштування';
		el[1].value = 'Налаштування';
	}

	el = id('record-types').getElementsByTagName('input');

	if (lang == 'en') {
		el[0].value = 'Transfer';
		el[1].value = 'Expense';
		el[2].value = 'Income';
	} else if (lang == 'de') {
		el[0].value = 'Übersetzung';
		el[1].value = 'Spesen';
		el[2].value = 'Einkommen';
	} else if (lang == 'cz') {
		el[0].value = 'Převod';
		el[1].value = 'Výdaj';
		el[2].value = 'Příjem';
	} else if (lang == 'ru') {
		el[0].value = 'Перевод';
		el[1].value = 'Расход';
		el[2].value = 'Доход';
	} else if (lang == 'ua') {
		el[0].value = 'Переказ';
		el[1].value = 'Витрата';
		el[2].value = 'Дохід';
	}

	el = id('repeat-record');

	if (lang == 'en')
		el.value = 'Repeat';
	else if (lang == 'de')
		el.value = 'Wiederholen';
	else if (lang == 'cz')
		el.value = 'Zopakovat';
	else if (lang == 'ru')
		el.value = 'Повторить';
	else if (lang == 'ua')
		el.value = 'Повторити';

	el = id('remove-record');

	if (lang == 'en')
		el.value = 'Remove';
	else if (lang == 'de')
		el.value = 'Löschen';
	else if (lang == 'cz')
		el.value = 'Smazat';
	else if (lang == 'ru')
		el.value = 'Удалить';
	else if (lang == 'ua')
		el.value = 'Видалити';

	el = id('root').getElementsByClassName('back-button');

	if (lang == 'en')
		for (let a = 0; a < el.length; a++)
			el[a].value = 'Back';
	else if (lang == 'de')
		for (let a = 0; a < el.length; a++)
			el[a].value = 'Zurück';
	else if (lang == 'cz')
		for (let a = 0; a < el.length; a++)
			el[a].value = 'Zpátky';
	else if (lang == 'ru')
		for (let a = 0; a < el.length; a++)
			el[a].value = 'Назад';
	else if (lang == 'ua')
		for (let a = 0; a < el.length; a++)
			el[a].value = 'Назад';

	el = id('settings-categories').getElementsByClassName('settings-categories-button');

	if (lang == 'en') {
		el[0].value = 'Reset data';
		el[1].value = 'Language';
		el[2].value = 'Blurring';
		el[3].value = 'Themes';
		el[4].value = 'Top margin';
		el[5].value = 'Accounts';
	} else if (lang == 'de') {
		el[0].value = 'Daten zurücksetzen';
		el[1].value = 'Sprachen';
		el[2].value = 'Unschärfe';
		el[3].value = 'Themen';
		el[4].value = 'Top-margin';
		el[5].value = 'Konten';
	} else if (lang == 'cz') {
		el[0].value = 'Resetovat data';
		el[1].value = 'Jazyk';
		el[2].value = 'Rozmazání';
		el[3].value = 'Motivy';
		el[4].value = 'Horní okraj';
		el[5].value = 'Účty';
	} else if (lang == 'ru') {
		el[0].value = 'Сбросить данные';
		el[1].value = 'Язык';
		el[2].value = 'Размытие';
		el[3].value = 'Темы';
		el[4].value = 'Верхний отступ';
		el[5].value = 'Счета';
	} else if (lang == 'ua') {
		el[0].value = 'Скинути дані';
		el[1].value = 'Мова';
		el[2].value = 'Розмиття';
		el[3].value = 'Теми';
		el[4].value = 'Верхній відступ';
		el[5].value = 'Рахунки';
	}

	el = id('root').getElementsByClassName('close-button');

	if (lang == 'en')
		for (let a = 0; a < el.length; a++)
			el[a].value = 'Close';
	else if (lang == 'de')
		for (let a = 0; a < el.length; a++)
			el[a].value = 'Schließen';
	else if (lang == 'cz')
		for (let a = 0; a < el.length; a++)
			el[a].value = 'Zavřít';
	else if (lang == 'ru')
		for (let a = 0; a < el.length; a++)
			el[a].value = 'Закрыть';
	else if (lang == 'ua')
		for (let a = 0; a < el.length; a++)
			el[a].value = 'Закрити';

	el = id('remove-account');

	if (lang == 'en')
		el.value = 'Remove account';
	else if (lang == 'de')
		el.value = 'Löschen';
	else if (lang == 'cz')
		el.value = 'Smazat účet';
	else if (lang == 'ru')
		el.value = 'Удалить';
	else if (lang == 'ua')
		el.value = 'Видалити';

	el = id('save-account');

	if (lang == 'en')
		el.value = 'Save account';
	else if (lang == 'de')
		el.value = 'Speichern';
	else if (lang == 'cz')
		el.value = 'Uložit účet';
	else if (lang == 'ru')
		el.value = 'Сохранить';
	else if (lang == 'ua')
		el.value = 'Зберегти';

	el = id('submit-date-filter');

	if (lang == 'en')
		el.value = 'Confirm';
	else if (lang == 'de')
		el.value = 'Bestätigen';
	else if (lang == 'cz')
		el.value = 'Potvrdit';
	else if (lang == 'ru')
		el.value = 'Подтвердить';
	else if (lang == 'ua')
		el.value = 'Підтвердити';

	el = id('date-filter-other').getElementsByTagName('input');

	if (lang == 'en') {
		el[0].value = 'This week';
		el[1].value = '7 days';
		el[2].value = 'This year';
		el[3].value = 'Prev year';
	} else if (lang == 'de') {
		el[0].value = 'Diese Woche';
		el[1].value = '7 Tage';
		el[2].value = 'Dieses Jahr';
		el[3].value = 'Vorjahr';
	} else if (lang == 'cz') {
		el[0].value = 'Tento týden';
		el[1].value = '7 dní';
		el[2].value = 'Tento rok';
		el[3].value = 'Před rok';
	} else if (lang == 'ru') {
		el[0].value = 'Эта неделя';
		el[1].value = '7 дней';
		el[2].value = 'Этот год';
		el[3].value = 'Пред год';
	} else if (lang == 'ua') {
		el[0].value = 'Цей тиждень';
		el[1].value = '7 днів';
		el[2].value = 'Цей рік';
		el[3].value = 'Попер рік';
	}

	for (let input of id('date-filter-other').getElementsByTagName('input'))
		adaptInputLengthExplicitly(input);

	el = id('date-filter-months').getElementsByTagName('input');

	if (lang == 'en') {
		el[0].value = 'Jan';
		el[1].value = 'Feb';
		el[2].value = 'Mar';
		el[3].value = 'Apr';
		el[4].value = 'May';
		el[5].value = 'June';
		el[6].value = 'July';
		el[7].value = 'Aug';
		el[8].value = 'Sept';
		el[9].value = 'Oct';
		el[10].value = 'Nov';
		el[11].value = 'Dec';
	} else if (lang == 'de') {
		el[0].value = 'Jan';
		el[1].value = 'Feb';
		el[2].value = 'Mär';
		el[3].value = 'Apr';
		el[4].value = 'Mai';
		el[5].value = 'Jun';
		el[6].value = 'Jul';
		el[7].value = 'Aug';
		el[8].value = 'Sep';
		el[9].value = 'Okt';
		el[10].value = 'Nov';
		el[11].value = 'Dez';
	} else if (lang == 'cz') {
		el[0].value = 'Led';
		el[1].value = 'Ún';
		el[2].value = 'Brez';
		el[3].value = 'Dub';
		el[4].value = 'Kvet';
		el[5].value = 'Cerv';
		el[6].value = 'Cerven';
		el[7].value = 'Srp';
		el[8].value = 'Září';
		el[9].value = 'Říj';
		el[10].value = 'List';
		el[11].value = 'Pros';
	} else if (lang == 'ru') {
		el[0].value = 'Янв';
		el[1].value = 'Фев';
		el[2].value = 'Мар';
		el[3].value = 'Апр';
		el[4].value = 'Май';
		el[5].value = 'Июн';
		el[6].value = 'Июл';
		el[7].value = 'Авг';
		el[8].value = 'Сен';
		el[9].value = 'Окт';
		el[10].value = 'Ноя';
		el[11].value = 'Дек';
	} else if (lang == 'ua') {
		el[0].value = 'Січ';
		el[1].value = 'Лют';
		el[2].value = 'Бер';
		el[3].value = 'Квіт';
		el[4].value = 'Трав';
		el[5].value = 'Черв';
		el[6].value = 'Лип';
		el[7].value = 'Серп';
		el[8].value = 'Вер';
		el[9].value = 'Жовт';
		el[10].value = 'Лист';
		el[11].value = 'Груд';
	}

	el = id('enable-history-scroll-button');

	changeChangeScrollButtonTitle(el, 'off', lang);
	
	el = id('enable-categories-details-scroll-button');
	
	changeChangeScrollButtonTitle(el, 'off', lang);
}





function reapplyBlur (blur_status) {

	if (blur_status) {

		for (let el of document.getElementsByClassName('solid-background')) {

			if (el.id == 'notification') {
				el.classList.add('solid-blur');
				setTimeout(() => {
					el.classList.remove('solid-background');
				}, 1);
			} else {
				el.classList.add('blur');
				setTimeout(() => {
					el.classList.remove('solid-background');
				}, 1);
			}	
		}

	} else {

		operateElementsArrayClass(
			document.getElementsByClassName('blur'),
			'blur', 'solid-background'
		);

		operateElementsArrayClass(
			document.getElementsByClassName('solid-blur'),
			'solid-blur', 'solid-background'
		);
	}
}

function operateElementsArrayClass (array, class_to_remove, class_to_add) {

	for (let el of array) {
		el.classList.add(class_to_add);
		setTimeout(() => {
			el.classList.remove(class_to_remove);
		}, 1);
	}
}





function applyTheme (theme) {

	if (Number(localStorage.getItem('AT')) == 1) {
		if (window.matchMedia('(prefers-color-scheme: dark)').matches)
			theme = 'd';
		else theme = 'l';

		localStorage.setItem('T', theme);
	}
	
	if (theme == 'l') {
		id('root').classList.remove('wallet-darkblue');
		id('root').classList.remove('wallet-dark');
		id('root').classList.add('wallet-light');
	} else if (theme == 'b') {
		id('root').classList.remove('wallet-light');
		id('root').classList.remove('wallet-dark');
		id('root').classList.add('wallet-darkblue');
	} else if (theme == 'd') {
		id('root').classList.remove('wallet-darkblue');
		id('root').classList.remove('wallet-light');
		id('root').classList.add('wallet-dark');
	}

	setTimeout(() => {
		applyThemeForPreloader(theme);
	}, 1);
}

function applyThemeForPreloader (theme) {

	if (theme == 'l') {
		id('preloader').classList.add('light');
	} else if (theme == 'b') {
		id('preloader').classList.add('darkblue');
	} else if (theme == 'd') {
		id('preloader').classList.add('dark');
	}
}

function checkAccountsColorInExactlyCont (cont) {
	for (let account of cont.getElementsByClassName('account'))
		if (account.style.background == 'rgb(5, 5, 5)')
			if (localStorage.getItem('T') == 'b' || localStorage.getItem('T') == 'd')
				account.classList.add('invert-color');
			else
				account.classList.remove('invert-color');
}
function checkAccountColor (account) {
	if (account.style.background == 'rgb(5, 5, 5)') {
		if (localStorage.getItem('T') == 'b' || localStorage.getItem('T') == 'd')
			account.classList.add('invert-color');
	} else
		account.classList.remove('invert-color');
}

function applyTopmargin () {
  id('accounts').style.paddingTop = `calc(15px + ${localStorage.getItem('TM')}px)`;
  id('settings').style.paddingTop = `calc(15px + ${localStorage.getItem('TM')}px)`;
  id('notification-cont').style.paddingTop = `calc(15px + ${localStorage.getItem('TM')}px`;
}



function addAccount () {
	localStorage.setItem('ACount', Number(localStorage.getItem('ACount')) + 1);
	let acc_count = localStorage.getItem('ACount');

	localStorage.setItem('AColor' + acc_count, '050505');
	localStorage.setItem('ACurrency' + acc_count, 'USD');
	localStorage.setItem('ABalance' + acc_count, (0).toFixed(2));
}

function uploadAccount (account_num, container) {

	let color = localStorage.getItem('AColor' + account_num),
		currency = localStorage.getItem('ACurrency' + account_num),
		balance = Number(localStorage.getItem('ABalance' + account_num)).toFixed(2);
	
	// accounts_root.render(<Account color={color} currency={currency} balance={balance} />);
	// settings_accounts_root.render(<Account color={color} currency={currency} balance={balance} />);
	// make_record_accounts_root.render(<Account color={color} currency={currency} balance={balance} />);

	container.insertAdjacentHTML('beforeend', account_el(account_num, color, currency, balance));
}



function uploadCategoriesToItsWindow (container, titles_array, icons_array) {

	container.insertAdjacentHTML(
		'afterbegin',
		category_list_el(titles_array.length - 1, icons_array, titles_array)
	);

	for (let a = titles_array.length - 2; a >= 0; a--) {
		container.insertAdjacentHTML('afterbegin', category_list_hr);
		container.insertAdjacentHTML(
			'afterbegin',
			category_list_el(a, icons_array, titles_array)
		);
	}
}

function uploadSubcategoriesToItsWindow() {
	
	for (let a = subcategories_titles.length - 1; a >= 0; a--) {

		id('subcategories').insertAdjacentHTML(
			'afterbegin',
			`<div class="subcategory-cont"></div>`
		);
		
		for (let b = subcategories_titles[a].length - 1; b >= 0; b--) {

			id('subcategories').firstElementChild.insertAdjacentHTML(
				'afterbegin',
				subcategory_list_el(
					b,
					subcategories_icons, subcategories_titles,
					a, b
					)
					);
			id('subcategories').firstElementChild.insertAdjacentHTML('afterbegin', category_list_hr);
			
		}

		id('subcategories').firstElementChild.firstElementChild.remove();

	}
}





function getDateFormat (input_date) {

	let date = input_date;
	
	let year = date.getFullYear();
	let month = date.getMonth() + 1;
	if (Number(month) < 10) month = '0' + month;
	let day = date.getDate();
	if (Number(day) < 10) day = '0' + day;
	let hours = date.getHours();
	if (Number(hours) < 10) hours = '0' + hours;
	let minutes = date.getMinutes();
	if (Number(minutes) < 10) minutes = '0' + minutes;
	let seconds = date.getSeconds();
	if (Number(seconds) < 10) seconds = '0' + seconds;

	return (`${year}-${month}-${day}T${hours}:${minutes}:${seconds}`);
}

function uploadRecordsToHistory () {

	let period = id('history-period-nav').getAttribute('period'),
		account = id('accounts').getAttribute('accountnum'),
		type = id('history-type-nav').getAttribute('history-type'),
		compare_date = new Date();

	id('history').innerHTML = null;
	id('history-empty').innerHTML = null;
	
	if (period == 'month 0') {

		compare_date.setDate(1);
		compare_date.setHours(0);
		compare_date.setMinutes(0);
		compare_date.setSeconds(0);
		uploadRecordsByThisMonth(getDateFormat(compare_date), type, account);
		
	} else if (period == 'month -1') {
		
		compare_date.setDate(1);
		compare_date.setMonth(compare_date.getMonth() - 1);
		uploadRecordsByPrevMonth(getDateFormat(compare_date), type, account);

	} else if (period == 'custom')
		uploadRecordsByCustomPeriod();
	
	if (id('history').firstElementChild) {
		for (let record of id('history').getElementsByClassName('record'))
			setUpClickOnRecord(record);
	} else {
		id('history-empty').innerHTML = getShowMessageInEmptyHistoryByLang(period, localStorage.getItem('L'));
		id('history-empty').classList.add('visible');
	}
		
}

function uploadRecordsByThisMonth (compare_date, type, account) {
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--)		
		if ( (getRecordDateFormat(record_num)) > compare_date ) {
			if (
				(type == 'all' || localStorage.getItem(`RType${record_num}`) == type) &&
				localStorage.getItem(`RAccount${record_num}`) == account
			)
				addRecordToHistory(record_num, localStorage.getItem(`RAccount${record_num}`), 'beforeend');
		} else break;
}

function uploadRecordsByPrevMonth (compare_date_pattern, type, account) {

	let compare_date = new Date(compare_date_pattern), 
		record_date;
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--) {

		record_date = new Date(getRecordDateFormat(record_num));
		
		if (record_date.getMonth() == compare_date.getMonth()) {
			if (
				(type == 'all' || localStorage.getItem(`RType${record_num}`) == type) &&
				localStorage.getItem(`RAccount${record_num}`) == account
			)
				addRecordToHistory(record_num, localStorage.getItem(`RAccount${record_num}`), 'beforeend');
		} else if (record_date.getMonth() < compare_date.getMonth())
			break;
		
	}
}

function uploadDataToCustomDateFilterMenu() {

	let inputs = id('date-filter-menu').getElementsByClassName('field-date');

	let this_month = (new Date()).getMonth() - 2;
	let this_year = (new Date()).getFullYear();
	let border1 = getDateBorderByInput(59, 59, 23, 0, this_month + 1, this_year);
	let border2 = getDateBorderByInput(0, 0, 0, 1, this_month, this_year);
	
	inputs[0].value = getDateFormat(border1);
	inputs[1].value = getDateFormat(border2);

	inputs = id('date-filter-other').getElementsByTagName('input');
}

function showCustomDateFilterMenu () {

	id('date-filter-menu-cont').classList.add('show');
	
	let inputs = id('date-filter-menu-cont').getElementsByClassName('field-date');
			
	id('submit-date-filter').onclick = () => {
		if ( (new Date(inputs[0].value)) > (new Date(inputs[1].value)) ) {
			hideCustomDateFilterMenu();
			uploadRecordsToHistoryAnimated();
			uploadExpensesIncomesStats();
			updatePieChart();
		} else
			animateEmptyFieldError(inputs[1]);
	}
}

function hideCustomDateFilterMenu () {
	id('date-filter-menu-cont').classList.remove('show');
}

function uploadRecordsByCustomPeriod () {
	
	let inputs = id('date-filter-menu').getElementsByClassName('field-date');
	
	let account = id('accounts').getAttribute('accountnum'),
		type = id('history-type-nav').getAttribute('history-type');
	let date_border_from = new Date(inputs[0].value),
		date_border_to = new Date(inputs[1].value),
		record_date;
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--) {

		record_date = new Date(getRecordDateFormat(record_num));
		
		if (record_date < date_border_from && record_date > date_border_to) {
			if (
				(type == 'all' || localStorage.getItem(`RType${record_num}`) == type) &&
				localStorage.getItem(`RAccount${record_num}`) == account
			)
				addRecordToHistory(record_num, localStorage.getItem(`RAccount${record_num}`), 'beforeend');
		} else if (record_date < date_border_to)
			break;
		
	}
}

function uploadRecordsToHistoryAnimated () {

	id('history-reloading-background').classList.add('history-reloading-background-show');
	if (id('history-empty').classList.contains('visible'))
		id('history-empty').classList.remove('visible');
	
	setTimeout(() => {
		id('history').innerHTML = null;
		uploadRecordsToHistory();
		id('history-reloading-background').classList.remove('history-reloading-background-show');
	}, 390);
}

function getRecordDateFormat (n) {

	let year = localStorage.getItem(`RYear${n}`);
	let month = localStorage.getItem(`RMonth${n}`);
	if (Number(month) < 10) month = '0' + month;
	let day = localStorage.getItem(`RDay${n}`);
	if (Number(day) < 10) day = '0' + day;
	let hour = localStorage.getItem(`RHour${n}`);
	if (Number(hour) < 10) hour = '0' + hour;
	let minute = localStorage.getItem(`RMinute${n}`);
	if (Number(minute) < 10) minute = '0' + minute;

	return (`${year}-${month}-${day}T${hour}:${minute}:00`);
}

function setUpClickOnRecord (record) {
	record.onclick = function() {

		let record_num = this.getAttribute('recordnum'),
			windowEl_cont = id('make-record-window-cont'),
			windowEl = id('make-record-window'),
			clickEl = this;
		
		disableScrolling();
		prepareEditRecordWindow(record_num);

		let top_position = openFloatingWindow(clickEl, windowEl_cont, windowEl, calculateScaleX(clickEl, windowEl_cont));
		windowEl.setAttribute('top-position-x', top_position.x);
		windowEl.setAttribute('top-position-y', top_position.y);

		// set up click on remove record button
		setUpClickOnRepeatRecordButton(clickEl, windowEl_cont, windowEl);

		// set up click on remove record button
		id('remove-record').onclick = () => {
			removeRecord(record_num);
			closeEditRecordWindowByReconnectMethod (clickEl, windowEl_cont, windowEl);
		}

		// set up click on close area
		windowEl_cont.firstElementChild.onclick = () => {
			enableScrolling();
			closeFloatingWindow(clickEl, windowEl_cont, windowEl);
			setTimeout(resetMakeRecordWindowData, 390);
		}

	}
}

function prepareEditRecordWindow (record_num) {

	// add top padding to window, set 'old' attribute, set record number as attrinute
	id('make-record-window').classList.add('window-top-padding');
	id('make-record-window').setAttribute('status', 'old');
	id('make-record-window').setAttribute('recordnum', record_num);
	// hide bar for changing record type
	id('record-types').classList.add('element-hide');
	id('record-types').setAttribute('record-type', localStorage.getItem(`RType${record_num}`));
	// upload record date
	id('make-record-date').value = getRecordDateFormat(record_num);
	// upload record note
	if (localStorage.getItem(`RNote${record_num}`)) {
		id('make-record-note').value = localStorage.getItem(`RNote${record_num}`);
		adaptInputLengthExplicitly(id('make-record-note'));
	}
	// upload record account
	let account_num = localStorage.getItem(`RAccount${record_num}`);
	id('make-record-account').innerHTML = account_el(
		account_num,
		localStorage.getItem(`AColor${account_num}`),
		localStorage.getItem(`ACurrency${account_num}`),
		Number( localStorage.getItem(`ABalance${account_num}`) ).toFixed(2)
	);
	id('make-record-account').setAttribute('accountnum', account_num);
	// adapt account color for dark themes
	checkAccountColor(id('make-record-account').firstElementChild);
	// upload record amount
	id('make-record-amount').value = localStorage.getItem(`RAmount${record_num}`);
	adaptInputLengthExplicitly(id('make-record-amount'));
	// upload category to edit record window
	uploadCategoryToEditRecordWindow(record_num);
	// upload save record button title
	uploadSaveRecordButtonTitle('short');
}

function uploadCategoryToEditRecordWindow (record_num) {
	let category_button = id('make-record-category');

	if (localStorage.getItem(`RType${record_num}`) == '-') {
		
		id('record-type-expense').classList.add('active-input-cont');
		id('record-type-income').classList.remove('active-input-cont');
		
		category_button.firstElementChild.innerHTML = subcategories_icons[localStorage.getItem(`RCategory${record_num}`)][localStorage.getItem(`RSubcategory${record_num}`)];
		category_button.lastElementChild.value = subcategories_titles[localStorage.getItem(`RCategory${record_num}`)][localStorage.getItem(`RSubcategory${record_num}`)];
		
	} else if (localStorage.getItem(`RType${record_num}`) == '+') {
		
		id('record-type-expense').classList.remove('active-input-cont');
		id('record-type-income').classList.add('active-input-cont');
		
		category_button.firstElementChild.innerHTML = categories_income_icons[localStorage.getItem(`RCategory${record_num}`)];
		category_button.lastElementChild.value = categories_income_titles[localStorage.getItem(`RCategory${record_num}`)];
		
	}
	
	category_button.setAttribute('categorynum', localStorage.getItem(`RCategory${record_num}`));
	category_button.setAttribute('subcategorynum', localStorage.getItem(`RSubcategory${record_num}`));
}


function setUpClickOnRepeatRecordButton (clickEl, windowEl_cont, windowEl) {
	id('repeat-record').onclick = () => {

		// set attribute 'new' for make record window
		id('make-record-window').setAttribute('status', 'new');
		// upload current date
		id('make-record-date').value = getDateFormat(new Date());
		// get array of new record data
		let record = getMakeRecordDataArray();
		// change record number to next new one
		record.num = Number(localStorage.getItem('RCount')) + 1;
		// set record number as attribute for make record window
		id('make-record-window').setAttribute('recordnum', record.num);
		// update account balance
		updateStorageAccountBalance(record.num, record.type, record.account, record.amount);
		updateAccountInfo( record.account, 'Balance', id('accounts').getElementsByClassName('account') );
		// save record to storage
		saveRecordToStorage(record.num, record.type, record.note, record.account, record.amount, record.category, record.subcategory);
		localStorage.setItem('RCount', record.num);
		// close edit record window
		closeEditRecordWindowByReconnectMethod (clickEl, windowEl_cont, windowEl);
	}	
}


function removeRecord (record_num) {
	
	returnRecordAmountToBalance(record_num);

	for (let a = Number(record_num); a <= Number(localStorage.getItem('RCount')); a++)
		if ( a < Number(localStorage.getItem('RCount')) ) moveRecord(a + 1, a);
		else if ( a == Number(localStorage.getItem('RCount')) ) removeRecordFromStorage(a);
}

function returnRecordAmountToBalance (record_num) {

	let type = localStorage.getItem(`RType${record_num}`);
	let amount = Number(localStorage.getItem(`RAmount${record_num}`));
	let account_num = localStorage.getItem(`RAccount${record_num}`);
	let balance = Number(localStorage.getItem(`ABalance${account_num}`));

	if (type == '-') localStorage.setItem(`ABalance${account_num}`, balance + amount);
	else if (type == '+') localStorage.setItem(`ABalance${account_num}`, balance - amount);

	setTimeout(() => {
		updateAccountInfo( account_num, 'Balance', id('accounts').getElementsByClassName('account') );
	}, 400);
}

function removeRecordFromStorage (n) {
	
	localStorage.removeItem(`RType${n}`);
	localStorage.removeItem(`RAmount${n}`);
	localStorage.removeItem(`RAccount${n}`);
	localStorage.removeItem(`RCategory${n}`);
	localStorage.removeItem(`RSubcategory${n}`);
	if (localStorage.getItem(`RNote${n}`)) localStorage.removeItem(`RNote${n}`);

	localStorage.removeItem(`RMinute${n}`);
	localStorage.removeItem(`RHour${n}`);
	localStorage.removeItem(`RDay${n}`);
	localStorage.removeItem(`RMonth${n}`);
	localStorage.removeItem(`RYear${n}`);

	localStorage.setItem('RCount', Number(localStorage.getItem('RCount')) - 1);
}

function getShowMessageInEmptyHistoryByLang (period, lang) {
	let message = '';

	if (period == 'month 0') {

		if (lang == 'en')
			message = 'You have no records in this month';
		else if (lang == 'de')
			message = 'Sie haben keine Einträge für diesen Monat';
		else if (lang == 'cz')
			message = 'V tomto měsíci nemáte žádné záznamy';
		else if (lang == 'ru')
			message = 'У вас нет записей за этот месяц';
		else if (lang == 'ua')
			message = 'У вас немає записів за цей місяць';
			
	} else if (period == 'month -1') {

		if (lang == 'en')
			message = 'You have no records in previous month';
		else if (lang == 'de')
			message = 'Sie haben keine Einträge vom letzten Monat';
		else if (lang == 'cz')
			message = 'V minulém měsíci nemáte žádné záznamy';
		else if (lang == 'ru')
			message = 'У вас нет записей за предыдущий месяц';
		else if (lang == 'ua')
			message = 'У вас немає записів за попередній місяць';
			
	} else if (period == 'custom') {

		if (lang == 'en')
			message = 'You have no records in this period';
		else if (lang == 'de')
			message = 'Sie haben keine Einträge für diesen Zeitraum';
		else if (lang == 'cz')
			message = 'V tomto období nemáte žádné záznamy';
		else if (lang == 'ru')
			message = 'У вас нет записей за этот период';
		else if (lang == 'ua')
			message = 'У вас немає записів за цей період';

	}

	return message;
}


function closeEditRecordWindowByReconnectMethod (clickEl, windowEl_cont, windowEl) {

	reconnectFloatingWindow(clickEl, id('history'), windowEl_cont, windowEl);
	closeReconnectedFloatingWindow(windowEl_cont, windowEl);
	reuploadRecordsToHistoryAnimated();

	setTimeout(() => {
		resetMakeRecordWindowData();
		uploadTodayStats();
		uploadExpensesIncomesStats();
		updatePieChart();
		enableScrolling();
	}, 390);
}





id('enable-history-scroll-button').onclick = function() {

	changeChangeScrollButtonStatus(this);
	changeWidgetScroll(id('history'));
}
id('enable-categories-details-scroll-button').onclick = function() {

	changeChangeScrollButtonStatus(this);
	changeWidgetScroll(id('pie-chart-categories-details'));
}

function changeChangeScrollButtonStatus (el) {

	let holding_el = freezeWidthOfEl(el);

	setTimeout(() => {
		
		if (el.classList.contains('active')) {

			el.classList.remove('active');
			changeChangeScrollButtonTitle(el, 'off', localStorage.getItem('L'));

		} else {		

			el.classList.add('active');
			changeChangeScrollButtonTitle(el, 'on', localStorage.getItem('L'));
		}

		updateWidthOfEl(el, holding_el);
	}, 200);
}

function changeChangeScrollButtonTitle (el, status, lang) {

	if (status == 'on') {

		if (lang == 'en')
			el.value = 'Disable scrolling';
		else if (lang == 'de')
			el.value = 'Scrolling ausschalten';
		else if (lang == 'cz')
			el.value = 'Vypnout rolování';
		else if (lang == 'ru')
			el.value = 'Выключить прокрутку';
		else if (lang == 'ua')
			el.value = 'Вимкнути прокручування';

	} else {

		if (lang == 'en')
			el.value = 'Enable scrolling';
		else if (lang == 'de')
			el.value = 'Scrolling einschalten';
		else if (lang == 'cz')
			el.value = 'Zapnout rolování';
		else if (lang == 'ru')
			el.value = 'Включить прокрутку';
		else if (lang == 'ua')
			el.value = 'Увімкнути прокручування';

	}
}

function changeWidgetScroll (el) {

	animateClickOnHistory(el);

	setTimeout(() => {
		if (el.classList.contains('widget-scroll'))
			el.classList.remove('widget-scroll');
		else el.classList.add('widget-scroll');
	}, 200);
}

function animateClickOnHistory (el) {
	el.style.transform = 'scale(0.99)';
	setTimeout(() => { el.style.transform = 'scale(1)'; }, 100);
}





function freezeWidthOfEl (el) {
	let	holding_el = id('test-p');

	el.style.width = el.clientWidth + 'px';
	el.style.paddingLeft = '0';
	el.style.paddingRight = '0';
	el.style.color = 'rgba(0, 0, 0, 0)';

	holding_el.style.display = 'flex';
	holding_el.style.fontSize = window.getComputedStyle(el, null).getPropertyValue('font-size');

	return holding_el;
}

function updateWidthOfEl (el, holding_el) {

	if (el.value)
		holding_el.innerText = el.value;
	else holding_el.innerText = el.innerText;	
		
	el.style.width = holding_el.clientWidth + 'px';
	el.style.color = null;
	el.style.paddingLeft = null;
	el.style.paddingRight = null;

	holding_el.style.display = 'none';
}





function uploadTodayStats () {
	
	let el = id('today-stats-despription'),
		lang = localStorage.getItem('L'),
		account_num = id('accounts').getAttribute('accountnum'),
		today_amount = getTodayStatsAmount(account_num),
		account_currency = localStorage.getItem('ACurrency' + account_num);

	el.style.opacity = '0';
	
	setTimeout(() => {

		if (today_amount == 0)
			showTodayStatsMessageNoExpences(el, lang);
		else {
			let default_account_balance = today_amount + Number(localStorage.getItem(`ABalance${account_num}`));
			if (default_account_balance == 0) default_account_balance = 1;

			let today_percent_amount = ( (100 / default_account_balance) * today_amount ).toFixed(2);

			if (today_percent_amount < 30)
				showTodayStatsMessageSomeExpences(el, lang, today_amount, account_currency, today_percent_amount, account_num);
			else showTodayStatsMessageManyExpences(el, lang, today_amount, account_currency, today_percent_amount, account_num);
		}
			
		el.style.opacity = '1';

	}, 300);
}

function getTodayStatsAmount (account) {

	let amount = 0,
		compare_date = new Date();

	compare_date.setHours(0);
	compare_date.setMinutes(0);
	compare_date.setSeconds(0);
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--)
		if ( (getRecordDateFormat(record_num)) >= getDateFormat(compare_date) ) {
			if (
				(localStorage.getItem(`RType${record_num}`) == '-') &&
				localStorage.getItem(`RAccount${record_num}`) == account
			)
				amount += Number(localStorage.getItem(`RAmount${record_num}`));
		} else break;

	return amount;
}

function showTodayStatsMessageNoExpences (el, lang) {

	if (lang == 'en')
		el.innerHTML = 'there have been no expenses yet. I hope you are here not for the first one for today';
	else if (lang == 'de')
		el.innerHTML = `Es wurden noch keine Spesen gemacht. Ich hoffe, dass Sie  hier nicht für die erste für heute sind`;
	else if (lang == 'cz')
		el.innerHTML = `ještě nebyly žádné výdaje. Doufám, že jste tady ne pro záznam prvního za dnes`;
	else if (lang == 'ru')
		el.innerHTML = 'еще не было никаких расходов. Надеюсь, вы здесь не для записи первого за сегодня';
	else if (lang == 'ua')
		el.innerHTML = 'ще не було жодних витрат. Сподіваюся, ви тут не для запису першої за сьогодні';
}

function showTodayStatsMessageSomeExpences (el, lang, today_amount, account_currency, today_percent_amount, account_num) {

	let default_balance = getReadableNumber( (today_amount + Number(localStorage.getItem('ABalance' + account_num))).toFixed(2) );
	today_amount = getReadableNumber(today_amount.toFixed(2));

	if (lang == 'en')
		el.innerHTML = `you spent <span class="underlined-text">${today_amount} ${account_currency}</span>, or <span class="underlined-text">${today_percent_amount}%</span> of the total balance of this account (${default_balance} ${account_currency})`;
	else if (lang == 'de')
		el.innerHTML = `Sie haben bereits <span class="underlined-text">${today_amount} ${account_currency}</span> ausgegeben, was <span class="underlined-text">${today_percent_amount}%</span> des Gesamtsaldos dieses Kontos entspricht (${default_balance} ${account_currency})`;
	else if (lang == 'cz')
		el.innerHTML = `jste utratil(-a) <span class="underlined-text">${today_amount} ${account_currency}</span>, neboli <span class="underlined-text">${today_percent_amount}%</span> od celkového zůstatku tohoto účtu (${default_balance} ${account_currency})`;
	else if (lang == 'ru')
		el.innerHTML = `вы потратили <span class="underlined-text">${today_amount} ${account_currency}</span>, или же <span class="underlined-text">${today_percent_amount}%</span> от общего баланса этого счёта (${default_balance} ${account_currency})`;
	else if (lang == 'ua')
		el.innerHTML = `ви витратили <span class="underlined-text">${today_amount} ${account_currency}</span>, або ж <span class="underlined-text">${today_percent_amount}%</span> від загального балансу цього рахунку (${default_balance} ${account_currency})`;
}

function showTodayStatsMessageManyExpences (el, lang, today_amount, account_currency, today_percent_amount, account_num) {

	let default_balance = getReadableNumber( (today_amount + Number(localStorage.getItem('ABalance' + account_num))).toFixed(2) );
	today_amount = getReadableNumber(today_amount.toFixed(2));

	if (lang == 'en')
		el.innerHTML = `you have been already spent <span class="underlined-text">${today_amount} ${account_currency}</span>, what is <span class="underlined-text">${today_percent_amount}%</span> of the total balance of this account (${default_balance} ${account_currency}). I hope you now when to stop`;
	else if (lang == 'de')
		el.innerHTML = `Sie haben schon <span class="underlined-text">${today_amount} ${account_currency}</span>, das sind <span class="underlined-text">${today_percent_amount}%</span> der Bilanz dieses Kontos (${default_balance} ${account_currency}). Ich hoffe, dass Sie wissen, wann Sie aufhören müssen`;
	else if (lang == 'cz')
		el.innerHTML = `jste už utratil(-a) <span class="underlined-text">${today_amount} ${account_currency}</span>, co je <span class="underlined-text">${today_percent_amount}%</span> od celkového zůstatku tohoto účtu (${default_balance} ${account_currency}). Doufám, že víte, kdy se zastavit`;
	else if (lang == 'ru')
		el.innerHTML = `вы уже потратили <span class="underlined-text">${today_amount} ${account_currency}</span>, это <span class="underlined-text">${today_percent_amount}%</span> от общего баланса этого счёта (${default_balance} ${account_currency}). Надеюсь, вы знаете, когда остановиться`;
	else if (lang == 'ua')
		el.innerHTML = `ви вже витратили <span class="underlined-text">${today_amount} ${account_currency}</span>, це <span class="underlined-text">${today_percent_amount}%</span> від загального балансу цього рахунку (${default_balance} ${account_currency}). Сподіваюся, ви знаєте, коли зупинитися`;
}





function uploadExpensesIncomesStats () {

	// upload title
	
	let el = id('incomes-expenses-month-title'),
		period = id('history-period-nav').getAttribute('period');
	
	uploadExpensesIncomesStatsTitle(el, period, localStorage.getItem('L'));

	// upload incomes and expenses statistic
	
	let incomes_amount = getTotalAmountOfExactlyType('+'),
		expenses_amount = getTotalAmountOfExactlyType('-'),
		total_amount = incomes_amount + expenses_amount,
		incomes_percent = 0, expenses_percent = 0;
	
	if (total_amount == 0) total_amount = 1;
	incomes_percent = (100 / total_amount) * incomes_amount;
	expenses_percent = (100 / total_amount) * expenses_amount;
	
	visualizeExpensesIncomesDataInWidget(
		incomes_percent, expenses_percent,
		incomes_amount.toFixed(2), expenses_amount.toFixed(2)
	);
}

function uploadExpensesIncomesStatsTitle (el, period, lang) {

	el.style.opacity = '0';
	
	setTimeout(() => {
		if (period == 'month 0') {

			if (lang == 'en')
				el.innerText = 'This month';
			else if (lang == 'de')
				el.innerText = 'Dieser Monat';
			else if (lang == 'cz')
				el.innerText = 'Tento měsíc';
			else if (lang == 'ru')
				el.innerText = 'Этот месяц';
			else if (lang == 'ua')
				el.innerText = 'Цей місяць';
				
		} else if (period == 'month -1') {
			
			if (lang == 'en')
				el.innerText = 'Previous month';
			else if (lang == 'de')
				el.innerText = 'Vormonat';
			else if (lang == 'cz')
				el.innerText = 'Předchozí měsíc';
			else if (lang == 'ru')
				el.innerText = 'Предыдущий месяц';
			else if (lang == 'ua')
				el.innerText = 'Попередній місяць';
				
		} else if (period == 'custom') {
			
			let inputs = id('date-filter-menu').getElementsByClassName('field-date'),
				from = getReadableDateByFormatDayMonthYear(inputs[0].value),
				to = getReadableDateByFormatDayMonthYear(inputs[1].value);
	
			if (lang == 'en')
				el.innerText = `From ${from}
					to ${to}`;
			else if (lang == 'de')
				el.innerText = `Von ${from}
					bis ${to}`;
			else if (lang == 'cz')
				el.innerText = `Od ${from}
					do ${to}`;
			else if (lang == 'ru')
				el.innerText = `От ${from}
					до ${to}`;
			else if (lang == 'ua')
				el.innerText = `Від ${from}
					до ${to}`;
	
		}
		
		el.style.opacity = '1';
	}, 300);
}

function getReadableDateByFormatDayMonthYear (date) {
	date = new Date(date);
	return `${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}`;
}

function getTotalAmountOfExactlyType (type) {

	let account = id('accounts').getAttribute('accountnum'),
		period = id('history-period-nav').getAttribute('period'),
		compare_date = new Date(),
		amount = 0;

	if (period == 'month 0') {

		compare_date.setDate(1);
		compare_date.setHours(0);
		compare_date.setMinutes(0);
		compare_date.setSeconds(0);
		amount = getTotalAmountOfExactlyTypeByThisMonth(getDateFormat(compare_date), type, account, amount);
		
	} else if (period == 'month -1') {
		
		compare_date.setDate(1);
		compare_date.setMonth(compare_date.getMonth() - 1);
		amount = getTotalAmountOfExactlyTypeByPrevMonth(getDateFormat(compare_date), type, account, amount);

	} else if (period == 'custom')
		amount = getTotalAmountOfExactlyTypeByCustomPeriod(type, account, amount);

	return amount;
}

function getTotalAmountOfExactlyTypeByThisMonth (compare_date, type, account, amount) {

	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--)
		if ( (getRecordDateFormat(record_num)) > compare_date ) {
			if (
				localStorage.getItem(`RType${record_num}`) == type &&
				localStorage.getItem(`RAccount${record_num}`) == account
			)
				amount += Number(localStorage.getItem(`RAmount${record_num}`));
		} else break;

	return amount;
}

function getTotalAmountOfExactlyTypeByPrevMonth (compare_date_pattern, type, account, amount) {

	let compare_date = new Date(compare_date_pattern), 
		record_date;
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--) {

		record_date = new Date(getRecordDateFormat(record_num));
		
		if (record_date.getMonth() == compare_date.getMonth()) {
			if (
				localStorage.getItem(`RType${record_num}`) == type &&
				localStorage.getItem(`RAccount${record_num}`) == account
			)
				amount += Number(localStorage.getItem(`RAmount${record_num}`));
		} else if (record_date.getMonth() < compare_date.getMonth())
			break;
		
	}

	return amount;
}

function getTotalAmountOfExactlyTypeByCustomPeriod (type, account, amount) {

	let inputs = id('date-filter-menu').getElementsByClassName('field-date');
	
	let date_border_from = new Date(inputs[0].value),
		date_border_to = new Date(inputs[1].value),
		record_date;
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--) {

		record_date = new Date(getRecordDateFormat(record_num));
		
		if (record_date < date_border_from && record_date > date_border_to) {
			if (
				localStorage.getItem(`RType${record_num}`) == type &&
				localStorage.getItem(`RAccount${record_num}`) == account
			)
				amount += Number(localStorage.getItem(`RAmount${record_num}`));
		} else if (record_date < date_border_to)
			break;
		
	}

	return amount;
}

function visualizeExpensesIncomesDataInWidget (incomes_percent, expenses_percent, incomes_amount, expenses_amount) {

	id('incomes-column').style.width = incomes_percent + '%';
	id('expenses-column').style.width = expenses_percent + '%';
	
	let titles = id('stats-column').getElementsByClassName('stats-column-title');
	
	titles[0].style.opacity = '0';
	titles[1].style.opacity = '0';
	id('incomes-expenses-total-cont').style.opacity = '0';
	
	let total = incomes_amount - expenses_amount;
	let currency = localStorage.getItem('ACurrency' + id('accounts').getAttribute('accountnum'));
	setTimeout(() => {

		id('incomes-column-percent').innerText = incomes_percent.toFixed(2) + '%';
		id('expenses-column-percent').innerText = expenses_percent.toFixed(2) + '%';
		
		id('incomes-column-amount').innerText = `+ ${getReadableNumber(incomes_amount)} ${currency}`;
		id('expenses-column-amount').innerText = `- ${getReadableNumber(expenses_amount)} ${currency}`;

		if (total < 0)
			id('incomes-expenses-total').innerText = `- ${getReadableNumber( (Math.abs(total)).toFixed(2) )} ${currency}`;
		else
			id('incomes-expenses-total').innerText = `+ ${getReadableNumber(total.toFixed(2))} ${currency}`;
		
		titles[0].style.opacity = '1';
		titles[1].style.opacity = '1';
		id('incomes-expenses-total-cont').style.opacity = '1';
	}, 300);
}





function calculateInnerScale (parent, child) {
	return ( (parent.clientWidth - ((parseInt(window.getComputedStyle(parent).paddingLeft)) * 2)) / child.clientWidth );
}

function fitPieChartSize () {

	let scaleX = calculateInnerScale(id('pie-chart-cont'), id('pie-chart'));
	id('pie-chart').setAttribute('scaleX', scaleX);
	id('pie-chart').style.transform = `scale(${scaleX})`;
}

function updatePieChart () {
	
	id('pie-chart').style.transform = `scale(0)`;
	let scaleX = id('pie-chart').getAttribute('scaleX');
	
	setTimeout(() => {
		uploadDataToPieChart();
		if(id('pie-chart-categories-details').firstElementChild)
			id('pie-chart').style.transform = `scale(${scaleX})`;
	}, 350);
}

function uploadDataToPieChart () {

	let results = getCategoriesStats();

	let type = id('history-type-nav').getAttribute('history-type');
	if (type == 'all') type = '-';
	uploadCategoriesToDetailPieChartPreview(
		type,
		id('accounts').getAttribute('accountnum'),
		results
	);
	if (type == '-')
		setUpClickOnDetailCategoriesPreview();

	drawPieChart(results);
	uploadAmountToPieChart();
}

function getCategoriesStats () {

	let account = id('accounts').getAttribute('accountnum'),
		period = id('history-period-nav').getAttribute('period'),
		type = id('history-type-nav').getAttribute('history-type');
	if (type == 'all') type = '-';

	let compare_date = new Date();
	let results = getArrayForStatsResults(type);
	
	if (period == 'month 0') {

		compare_date.setDate(1);
		compare_date.setHours(0);
		compare_date.setMinutes(0);
		compare_date.setSeconds(0);
		results = getCategoriesStatsByThisMonth(getDateFormat(compare_date), type, account, results);
		
	} else if (period == 'month -1') {
		
		compare_date.setDate(1);
		compare_date.setMonth(compare_date.getMonth() - 1);
		results = getCategoriesStatsByPrevMonth(getDateFormat(compare_date), type, account, results);

	} else if (period == 'custom')
		results = getCategoriesStatsByCustomPeriod(type, account, results);
		
	return results;
}

function getArrayForStatsResults (type) {
	let results,
		theme = localStorage.getItem('T');

	if (type == '-') {
		if (theme == 'l')
			results = [
				/* 1 */ {total: 0, color: "#97a97c"},
				/* 2 */ {total: 0, color: "#9a8c98"},
				/* 3 */ {total: 0, color: "#f2e9e4"},
				/* 4 */ {total: 0, color: "#a26769"},
				/* 5 */ {total: 0, color: "#6d2e46"},
				/* 6 */ {total: 0, color: "#4a4e69"},
				/* 7 */ {total: 0, color: "#006494"},
				/* 8 */ {total: 0, color: "#c9ada7"},
				// /* 9 */ {total: 0, color: "#709775"},
				/* 9 */ {total: 0, color: "#db924d"},
				/* 10 */ {total: 0, color: "#22223b"}
			];
		else if (theme == 'b' || theme == 'd')
			results = [
				/* 1 */ {total: 0, color: "#798763"},
				/* 2 */ {total: 0, color: "#7c717a"},
				/* 3 */ {total: 0, color: "#c2bbb6"},
				/* 4 */ {total: 0, color: "#825354"},
				/* 5 */ {total: 0, color: "#572538"},
				/* 6 */ {total: 0, color: "#3c3e54"},
				/* 7 */ {total: 0, color: "#075076"},
				/* 8 */ {total: 0, color: "#a28a85"},
				// /* 9 */ {total: 0, color: "#59795e"},
				/* 9 */ {total: 0, color: "#db924d"},
				/* 10 */ {total: 0, color: "#1b1b2f"}
			];
	}
	else if (type == '+') {
		if (theme == 'l')
			results = [
				/* 1 */ {total: 0, color: "#97a97c"},
				/* 2 */ {total: 0, color: "#4a4e69"},
				/* 3 */ {total: 0, color: "#9a8c98"},
				/* 4 */ {total: 0, color: "#ece2d0"},
				/* 5 */ {total: 0, color: "#c9ada7"},
				/* 6 */ {total: 0, color: "#006494"},
				/* 7 */ {total: 0, color: "#6d2e46"},
				/* 8 */ {total: 0, color: "#a26769"},
				// /* 9 */ {total: 0, color: "#709775"}
				/* 9 */ {total: 0, color: "#db924d"}
			];
		else if (theme == 'b' || theme == 'd')
			results = [
				/* 1 */ {total: 0, color: "#798763"},
				/* 2 */ {total: 0, color: "#3b3d52"},
				/* 3 */ {total: 0, color: "#796e77"},
				/* 4 */ {total: 0, color: "#bdb6a6"},
				/* 5 */ {total: 0, color: "#a28a85"},
				/* 6 */ {total: 0, color: "#075076"},
				/* 7 */ {total: 0, color: "#572538"},
				/* 8 */ {total: 0, color: "#825354"},
				// /* 9 */ {total: 0, color: "#59795e"}
				/* 9 */ {total: 0, color: "#db924d"}
			];
	}

	return results;
}

function getCategoriesStatsByThisMonth (compare_date, type, account, results) {

	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--)
		if ( (getRecordDateFormat(record_num)) > compare_date ) {
			if (
				localStorage.getItem(`RType${record_num}`) == type &&
				localStorage.getItem(`RAccount${record_num}`) == account
			)
				results[localStorage.getItem(`RCategory${record_num}`)].total += Number(localStorage.getItem(`RAmount${record_num}`));
		} else break;

	return results;
}

function getCategoriesStatsByPrevMonth (compare_date_pattern, type, account, results) {

	let compare_date = new Date(compare_date_pattern), 
		record_date;
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--) {

		record_date = new Date(getRecordDateFormat(record_num));
		
		if (record_date.getMonth() == compare_date.getMonth()) {
			if (
				localStorage.getItem(`RType${record_num}`) == type &&
				localStorage.getItem(`RAccount${record_num}`) == account
			)
				results[localStorage.getItem(`RCategory${record_num}`)].total += Number(localStorage.getItem(`RAmount${record_num}`));
		} else if (record_date.getMonth() < compare_date.getMonth())
			break;
		
	}

	return results;
}

function getCategoriesStatsByCustomPeriod (type, account, results) {

	let inputs = id('date-filter-menu').getElementsByClassName('field-date');
	
	let date_border_from = new Date(inputs[0].value),
		date_border_to = new Date(inputs[1].value),
		record_date;
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--) {

		record_date = new Date(getRecordDateFormat(record_num));
		
		if (record_date < date_border_from && record_date > date_border_to) {
			if (
				localStorage.getItem(`RType${record_num}`) == type &&
				localStorage.getItem(`RAccount${record_num}`) == account
			)
				results[localStorage.getItem(`RCategory${record_num}`)].total += Number(localStorage.getItem(`RAmount${record_num}`));
		} else if (record_date < date_border_to)
			break;
		
	}

	return results;
}

function uploadCategoriesToDetailPieChartPreview (type, account, results) {

	id('pie-chart-categories-details').innerHTML = null;

	for (let a = 0; results[a]; a++)
		if (results[a].total != 0)
			uploadCategoryToDetailPieChartPreview(a, results[a].total, results[a].color, type, account);

	if (!(id('pie-chart-categories-details').firstElementChild))
		id('pie-chart-categories-details').classList.add('hide');
	else if (id('pie-chart-categories-details').classList.contains('hide'))
		id('pie-chart-categories-details').classList.remove('hide');
}

function uploadCategoryToDetailPieChartPreview (unit_num, amount, color, type, account) {
	let el;
	
	if (type == '-')
		el = constructCategoryPreviewEl(
			categories_expense_icons[unit_num],
			categories_expense_titles[unit_num],
			unit_num, type, amount,
			localStorage.getItem(`ACurrency${account}`)
		);
	else if (type == '+')
		el = constructCategoryPreviewEl(
			categories_income_icons[unit_num],
			categories_income_titles[unit_num],
			unit_num, type, amount,
			localStorage.getItem(`ACurrency${account}`)
		);

	id('pie-chart-categories-details').insertAdjacentHTML('beforeend', el);
	id('pie-chart-categories-details').lastElementChild.style.borderLeft = `4px solid ${color}`;
	id('pie-chart-categories-details').lastElementChild.style.borderRight = `4px solid ${color}`;
}

function constructCategoryPreviewEl (icon, title, category_num, type, amount, account_currency) {

	let el = `<div class="category-details" categorynum="${category_num}">
				<div class="category">
					<div>${icon}</div>
					<h3>${title}</h3>
				</div>
				<div class="category-amount">
					<h3>${type}</h3>
					<h3>${getReadableNumber( amount.toFixed(2) )}</h3>
					<h3>${account_currency}</h3>
				</div>
			</div>`;

	return el;
}

function setUpClickOnDetailCategoriesPreview () {

	for (let el of id('pie-chart-categories-details').getElementsByClassName('category-details')) {
		el.onclick = function() {

			let windowEl_cont = id('subcategories-detail-view-cont'),
				windowEl = id('subcategories-detail-view-cont').lastElementChild;
				clickEl = this;
			
			windowEl.firstElementChild.firstElementChild.innerHTML = clickEl.firstElementChild.innerHTML;
				
			windowEl.lastElementChild.innerHTML = null;
			uploadSubcategoriesToDetailCatagoryPreview(clickEl.getAttribute('categorynum'), windowEl.lastElementChild);

			disableScrolling();
			openFloatingWindow(clickEl, windowEl_cont, windowEl, calculateScaleX(clickEl, windowEl_cont));

			windowEl_cont.firstElementChild.onclick = () => {
				closeFloatingWindow(clickEl, windowEl_cont, windowEl);
				enableScrolling();
			}
			
		}
	}
}

function uploadSubcategoriesToDetailCatagoryPreview (category_num, container) {

	let account = id('accounts').getAttribute('accountnum'),
		period = id('history-period-nav').getAttribute('period'),
		type = id('history-type-nav').getAttribute('history-type');
	if (type == 'all') type = '-';

	let compare_date = new Date();
	let results = getArrayForSubcategoriesStatsResult();
	
	if (period == 'month 0') {

		compare_date.setDate(1);
		compare_date.setHours(0);
		compare_date.setMinutes(0);
		compare_date.setSeconds(0);
		results = getSubcategoriesStatsByThisMonth(getDateFormat(compare_date), type, account, results);
		
	} else if (period == 'month -1') {
		
		compare_date.setDate(1);
		compare_date.setMonth(compare_date.getMonth() - 1);
		results = getSubcategoriesStatsByPrevMonth(getDateFormat(compare_date), type, account, results);

	} else if (period == 'custom')
		results = getSubcategoriesStatsByCustomPeriod(type, account, results);
	
	for (let a = 0; results[category_num][a]; a++)
		if (results[category_num][a].total != 0) {
			el = constructCategoryPreviewEl(
				subcategories_icons[category_num][a],
				subcategories_titles[category_num][a],
				a, '-', results[category_num][a].total,
				localStorage.getItem(`ACurrency${id('accounts').getAttribute('accountnum')}`)
			);
			container.insertAdjacentHTML('beforeend', el);
		}
}

function getArrayForSubcategoriesStatsResult () {
	return ([
		/* 1 */
		[ {total: 0}, {total: 0}, {total: 0} ],
		/* 2 */
		[ {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0},
			{total: 0}, {total: 0}, {total: 0}, {total: 0} ],
		/* 3 */
		[ {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0} ],
		/* 4 */
		[ {total: 0}, {total: 0}, {total: 0}, {total: 0} ],
		/* 5 */
		[ {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0} ],
		/* 6 */
		[ {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0},
			{total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0},
			{total: 0} ],
		/* 7 */
		[ {total: 0}, {total: 0}, {total: 0}, {total: 0} ],
		/* 8 */
		[ {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0}, {total: 0} ],
		/* 9 */
		[ {total: 0}, {total: 0}, {total: 0} ],
		/* 10 */
		[ {total: 0}, {total: 0} ]
	]);
}

function getSubcategoriesStatsByThisMonth (compare_date, type, account, results) {

	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--)
		if ( (getRecordDateFormat(record_num)) > compare_date ) {
			if (
				localStorage.getItem(`RType${record_num}`) == type &&
				localStorage.getItem(`RAccount${record_num}`) == account
			)
				results[
					localStorage.getItem(`RCategory${record_num}`)
				][
					localStorage.getItem(`RSubcategory${record_num}`)
				].total += Number(localStorage.getItem(`RAmount${record_num}`));
		} else break;

	return results;
}

function getSubcategoriesStatsByPrevMonth (compare_date_pattern, type, account, results) {

	let compare_date = new Date(compare_date_pattern), 
		record_date;
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--) {

		record_date = new Date(getRecordDateFormat(record_num));
		
		if (record_date.getMonth() == compare_date.getMonth()) {
			if (
				localStorage.getItem(`RType${record_num}`) == type &&
				localStorage.getItem(`RAccount${record_num}`) == account
			)
				results[
					localStorage.getItem(`RCategory${record_num}`)
				][
					localStorage.getItem(`RSubcategory${record_num}`)
				].total += Number(localStorage.getItem(`RAmount${record_num}`));
		} else if (record_date.getMonth() < compare_date.getMonth())
			break;
		
	}

	return results;
}

function getSubcategoriesStatsByCustomPeriod (type, account, results) {

	let inputs = id('date-filter-menu').getElementsByClassName('field-date');
	
	let date_border_from = new Date(inputs[0].value),
		date_border_to = new Date(inputs[1].value),
		record_date;
	
	for (let record_num = Number(localStorage.getItem('RCount')); record_num >= 1; record_num--) {

		record_date = new Date(getRecordDateFormat(record_num));
		
		if (record_date < date_border_from && record_date > date_border_to) {
			if (
				localStorage.getItem(`RType${record_num}`) == type &&
				localStorage.getItem(`RAccount${record_num}`) == account
			)
				results[
					localStorage.getItem(`RCategory${record_num}`)
				][
					localStorage.getItem(`RSubcategory${record_num}`)
				].total += Number(localStorage.getItem(`RAmount${record_num}`));
		} else if (record_date < date_border_to)
			break;
		
	}

	return results;
}

function drawPieChart (results) {

	let ctx = id('pie-chart').getContext('2d');
	ctx.clearRect(0, 0, id('pie-chart').width, id('pie-chart').height);

	let sum = 0, currentAngle = 0,
		totalNumberOfPeople = results.reduce((sum, {total}) => sum + total, 0);

    for (let unit of results) {
        //calculating the angle the slice (portion) will take in the chart
        let portionAngle = (unit.total / totalNumberOfPeople) * 2 * Math.PI;
        //drawing an arc and a line to the center to differentiate the slice from the rest
        ctx.beginPath();
        ctx.arc(400, 400, 400, currentAngle, currentAngle + portionAngle);
        currentAngle += portionAngle;
        ctx.lineTo(400, 400);
        //filling the slices with the corresponding mood's color
        ctx.fillStyle = unit.color;
        ctx.fill();
    }

	for (let a = 0; a < results.length - 1; a++)
		results[a].total = 0;
}

function uploadAmountToPieChart () {

	let type = id('history-type-nav').getAttribute('history-type');
	if (type == 'all') type = '-';
	
	id('pie-chart-amount').classList.add('pie-chart-amount-hide');

	setTimeout(() => {
		if (type == '-')
			id('pie-chart-amount').innerHTML = id('expenses-column-amount').innerHTML;
		else if (type == '+')
			id('pie-chart-amount').innerHTML = id('incomes-column-amount').innerHTML;

		id('pie-chart-amount').classList.remove('pie-chart-amount-hide');
	}, 350);
}




function positionateDateFilterMenu () {
	let x = window.innerWidth - id('date-filter-menu-cont').getBoundingClientRect().left;
	id('date-filter-menu-cont').style.transform = `translateX(calc(${x}px + 10vw))`;
}

function setDateFilterMenuTopPosition () {
	id('date-filter-menu').style.top = `${id('sticky-topbar').getBoundingClientRect().bottom}px`;
}




function fixCurrentWidthOfElements () {
	setTimeout(() => {
		let holding_el = freezeWidthOfEl(id('enable-history-scroll-button'));
		updateWidthOfEl(id('enable-history-scroll-button'), holding_el);

		holding_el = freezeWidthOfEl(id('enable-categories-details-scroll-button'));
		updateWidthOfEl(id('enable-categories-details-scroll-button'), holding_el);
	}, 1);
}





function calculateScaleX (clickEl, windowEl_cont) {
	return ( clickEl.offsetWidth / ( windowEl_cont.lastElementChild.offsetWidth ) );
}

function openFloatingWindow (clickEl, windowEl_cont, windowEl, scaleX) {
	let transition = `opacity .4s, transform .4s .03s`;
	
	windowEl_cont.classList.add('floating-window-cont-visible');
	
	clickEl.style.transition = transition;
	let windowEl_full_height = windowEl.clientHeight;
	let scaleY = scaleX / ((windowEl_full_height * scaleX) / clickEl.offsetHeight);
	
	let clickEl_position_X = ( windowEl.getBoundingClientRect().left + (windowEl.offsetWidth / 2) - clickEl.getBoundingClientRect().left - (clickEl.offsetWidth / 2) ) * Math.max(scaleX, scaleY);
	let clickEl_position_Y = ( windowEl.getBoundingClientRect().top + (windowEl.offsetHeight / 2) - clickEl.getBoundingClientRect().top - (clickEl.offsetHeight / 2) ) * Math.max(scaleX, scaleY);

	windowEl.style.transform = `translate(0px, 0px) scale(${scaleX}, ${scaleY})`;

	let top_position = {
		x: clickEl.getBoundingClientRect().left - windowEl.getBoundingClientRect().left,
		y: clickEl.getBoundingClientRect().bottom - windowEl.getBoundingClientRect().bottom
	};
	
	windowEl.style.transform = `translate(${top_position.x}px, ${top_position.y}px) scale(${scaleX}, ${scaleY})`;

	setTimeout(() => {
		windowEl.style.transition = transition;
		windowEl_cont.classList.add('floating-window-cont-darker');

		clickEl.style.opacity = '0';
		clickEl.style.transform = `scale(${Math.min(1 * 1 / scaleX, 1 * 1 / scaleY)}) translate(${clickEl_position_X}px, ${clickEl_position_Y}px)`;
	}, 1);

	return top_position;
}

function closeFloatingWindow (clickEl, windowEl_cont, windowEl) {
	
	clickEl.style.transition = `opacity .5s, transform .4s`;
	clickEl.style.opacity = '1';
	clickEl.style.transform = 'scale(1) translateY(0px)';

	windowEl.style.transition = `opacity .35s .15s, transform .4s`;
	windowEl_cont.classList.remove('floating-window-cont-darker');
	
	setTimeout(() => {
		windowEl_cont.classList.remove('floating-window-cont-visible');
		windowEl.style.transform = 'translateY(0px) scale(1)';
		windowEl.style.transition = 'all 0s';

		clickEl.style.transition = null;
		clickEl.style.transform = null;
		clickEl.style.opacity = null;
	}, 390);
}

function changeFloatingWindowTransformation (clickEl, windowEl_cont, windowEl) {

	let clickEL_transition = clickEl.style.transition;
	clickEl.style.transition = 'transform 0s';
	clickEl.style.transform = 'scale(1) translateY(0px)';
	
	let scaleX = calculateScaleX(clickEl, windowEl_cont);
	let scaleY = scaleX / ((windowEl.clientHeight * scaleX) / clickEl.clientHeight);
	let top_position_X = windowEl.getAttribute('top-position-x');
	let top_position_Y = windowEl.getAttribute('top-position-y');

	windowEl.style.transform = `translate(${top_position_X}px, ${top_position_Y}px) scale(${scaleX}, ${scaleY})`;

	let clickEl_position_X = ( windowEl.getBoundingClientRect().left + (windowEl.offsetWidth / 2) - clickEl.getBoundingClientRect().left - (clickEl.offsetWidth / 2) ) * Math.max(scaleX, scaleY);
	let clickEl_position_Y = ( windowEl.getBoundingClientRect().top + (windowEl.clientHeight / 2) - clickEl.getBoundingClientRect().top + ((clickEl.clientHeight / 2)) ) * Math.max(scaleX, scaleY);
	clickEl.style.transform = `scale(${1 / scaleX}) translate(${clickEl_position_X}px, ${clickEl_position_Y}px)`;

	return clickEL_transition;
}

function reconnectFloatingWindow (previous_clickEl, clickEl, windowEl_cont, windowEl) {

	previous_clickEl.style.display = 'none';
	let scaleX = calculateScaleX(clickEl, windowEl_cont);
	let scaleY = scaleX / ((windowEl.clientHeight * scaleX) / clickEl.clientHeight);

	let width_difference = windowEl.clientWidth - (windowEl.clientWidth * scaleX);
	let height_difference = windowEl.clientHeight - (windowEl.clientHeight * scaleY);
	let top_position_X = clickEl.getBoundingClientRect().left - ((width_difference / 2) + windowEl.getBoundingClientRect().left);
	let top_position_Y = clickEl.getBoundingClientRect().top - ((height_difference / 2) + windowEl.getBoundingClientRect().top);

	windowEl.style.transform = `translate(${top_position_X}px, ${top_position_Y}px) scale(${scaleX}, ${scaleY})`;
}

function closeReconnectedFloatingWindow (windowEl_cont, windowEl) {

  windowEl.style.transition = `opacity .35s .15s, transform .4s`;
  windowEl_cont.classList.remove('floating-window-cont-darker');
  
  setTimeout(() => {
    windowEl_cont.classList.remove('floating-window-cont-visible');
    windowEl.style.transform = 'translateY(0px) scale(1)';
    windowEl.style.transition = 'all 0s';
  }, 390);
}

function closeFloatingWindowByDisappearMethod (clickEl, windowEl_cont, windowEl) {

	clickEl.style.display = `none`;

	windowEl.style.transition = `opacity .4s, transform .4s`;
	windowEl.style.transform = `translateY(0px) scale(0.5)`;
	windowEl.style.opacity = `0`;
	windowEl_cont.classList.remove('floating-window-cont-darker');
	
	setTimeout(() => {
		windowEl_cont.classList.remove('floating-window-cont-visible');
		windowEl.style.transition = 'all 0s';

		clickEl.style.transition = null;
		clickEl.style.transform = null;
		clickEl.style.opacity = null;
	}, 390);
}





function showPopUpConnectedNotification (notification_command, notification_contEl, connected_window) {

	let notificationEl = notification_contEl.firstElementChild,
		hide_popup_notification;
	
	uploadPopUpNotificationMessage(notification_command, notificationEl.lastElementChild.firstElementChild);

	notification_contEl.style.top = (connected_window.getBoundingClientRect().top + 20) + 'px';
	notification_contEl.classList.add('show');

	notificationEl.style.transform = `scale(1.02) translateY(calc(${-(notificationEl.clientHeight)}px - 46px))`;
	
	setTimeout(() => {
		notificationEl.style.transform = `scale(1) translateY(calc(${-(notificationEl.clientHeight)}px - 40px))`;
	}, 400);
	
	hide_popup_notification = setTimeout(() => {
		hidePopUpConnectedNotificationAfterTimer (notification_contEl);
	}, 5000);

	notificationEl.onclick = () => {
		clearTimeout(hide_popup_notification);
		hidePopUpConnectedNotificationAfterTimer(notification_contEl);
	}

	return hide_popup_notification;
}

function uploadPopUpNotificationMessage (notification_command, notificationEl) {
	let lang = localStorage.getItem('L');

	if (notification_command == 'remove account') {
		if (lang == 'en')
			notificationEl.innerHTML = 'It will also delete all records connected with this account. It is irreversible action.';
		else if (lang == 'de')
			notificationEl.innerHTML = 'Damit werden auch alle mit diesem Konto verbundenen Datensätze gelöscht. Dieser Vorgang kann man nicht rückgängig gemacht werden.';
		else if (lang == 'cz')
			notificationEl.innerHTML = 'To také smaže všechny záznamy spojené s tímto účtem. Je to nevratná akce.';
		else if (lang == 'ru')
			notificationEl.innerHTML = 'Это также удалит все записи, связанные с этим счётом. Это необратимое действие.';
		else if (lang == 'ua')
			notificationEl.innerHTML = `Це також видалить всі записи, пов'язані з цим рахунком. Це незворотня дія.`;
	}
}

function hidePopUpConnectedNotificationAfterTimer (notification_contEl) {
	let notificationEl = notification_contEl.firstElementChild;

	notificationEl.style.transform = null;
	
	setTimeout(() => {
		notification_contEl.classList.remove('show');
		notificationEl.lastElementChild.firstElementChild.innerHTML = null;
	}, 400);
}

function hidePopUpConnectedNotification (notification_contEl, hide_popup_notification) {
	let notificationEl = notification_contEl.firstElementChild;

	clearTimeout(hide_popup_notification);
	
	notificationEl.style.opacity = 0;
	
	setTimeout(() => {
		notification_contEl.classList.remove('show');
		notificationEl.style = null;
		notificationEl.lastElementChild.firstElementChild.innerHTML = null;
	}, 400);
}





function openWindowBlock (windowEl_cont, windowEl) {

  windowEl_cont.classList.add('window-block-cont-visible');

  setTimeout(() => {
    windowEl_cont.classList.add('window-block-cont-darker');
    
    setTimeout(() => {
      windowEl.classList.add('window-block-transform');
    }, 300);
  }, 1);
}

function closeWindowBlock (windowEl_cont, windowEl) {

	windowEl.style = null;
	windowEl.classList.remove('window-block-transform');
	windowEl_cont.classList.remove('window-block-cont-darker');

	setTimeout(() => {
		windowEl_cont.classList.remove('window-block-cont-visible');
	}, 300);
}





function openWindowByBubbleFrontMethod (clickEl, windowEl_cont, close_button, bubble_els_array) {

	// hide click element
	clickEl.style.transition = '.5s transform, .5s opacity';
	clickEl.classList.add('bubble-hide');

	// show elements' container 
	windowEl_cont.classList.add('visible');
	
	let len = bubble_els_array.length,
		delay = 80;
	
	// show elements one by one
	for (let a = len; a > 0; a--) {
		
		setTimeout(() => {
			bubble_els_array[a - 1].style.transition = '.15s transform, .15s opacity';
			bubble_els_array[a - 1].classList.add('show');
		}, delay * (len - a));

		if (a == 1)
			setTimeout(() => {
				close_button.style.transition = '.15s transform, .15s opacity';
				close_button.classList.add('show');
			}, delay * len);
	}
}

function closeWindowByBubbleQueueMethod (clickEl, windowEl_cont, close_button, bubble_els_array) {

	clickEl.style.transition = '.15s transform, .15s opacity';

	let len = bubble_els_array.length,
		delay = 40;

	// hide elements one by one
	for (let a = len - 1; a >= 0; a--) {

		if (a == len - 1) {
			close_button.style.transition = '.15s transform, .15s opacity';
			close_button.classList.remove('show');
		}
		
		setTimeout(() => {
			bubble_els_array[a].style.transition = '.15s transform, .15s opacity';
			bubble_els_array[a].classList.remove('show');
		}, delay * (len - a + 1));

		if (a == 0) {
			setTimeout(() => {
				// show click element
				clickEl.classList.remove('bubble-hide');
			}, delay * len);
			setTimeout(() => {
				// hide elements' container 
				windowEl_cont.classList.remove('visible');
			}, delay * len);
		}
	}
}





// set up clicks on accounts on topbar
function setUpClickOnAccounts () {

	for (let account of id('accounts').getElementsByClassName('account'))
		account.onclick = function() {

			if (!(account.classList.contains('active-account'))) {
				// change active account
				for (let account of id('accounts').getElementsByClassName('account'))
					if (account == this) {
						
						setTimeout(() => { account.classList.add('active-account'); }, 100);
						id('accounts').setAttribute('accountnum', account.getAttribute('accountnum'));
						
					} else if (account.classList.contains('active-account'))
						account.classList.remove('active-account');
	
				// upload records to history
				uploadRecordsToHistoryAnimated();
				// upload today stats
				uploadTodayStats();
				// upload expenses and incomes stats
				uploadExpensesIncomesStats();
				updatePieChart();
			}
			
		}

	id('accounts').firstElementChild.classList.add('active-account');
	id('accounts').setAttribute('accountnum', id('accounts').firstElementChild.getAttribute('accountnum'));
}

// set up clicks on history period nav buttons
const history_period_nav_buttons = id('history-period-nav').getElementsByTagName('div');

for (let button of history_period_nav_buttons) {
	button.onclick = function() {

		if ( !(button.classList.contains('active-input-cont')) ) {
			// change active button
			for (let button of history_period_nav_buttons)
				if (button == this) {

					button.classList.add('active-input-cont');
					id('history-period-nav').setAttribute('period', button.getAttribute('period'));

				} else if (button.classList.contains('active-input-cont'))
					button.classList.remove('active-input-cont');
	
			// upload records to history
			uploadRecordsToHistoryAnimated();
			// upload expenses and incomes stats
			uploadExpensesIncomesStats();
			// upload pie chart statistic
			updatePieChart();
		}

		if (
			button.getAttribute('period') == 'custom' &&
			!(id('date-filter-menu-cont').classList.contains('show'))
		)
			showCustomDateFilterMenu();
		else if (id('date-filter-menu-cont').classList.contains('show'))
			hideCustomDateFilterMenu();
		
	}
}

id('date-filter-menu-cont').firstElementChild.onclick = () => {
	hideCustomDateFilterMenu();
}

for (let button of id('date-filter-other').getElementsByTagName('input')) {
	button.onclick = function() {

		applyOtherDateToDateFieldsOfDateFilterMenu(this);
		
	}
}

function applyOtherDateToDateFieldsOfDateFilterMenu (button) {

	let inputs = id('date-filter-menu').getElementsByClassName('field-date');
	let button_period = button.getAttribute('period');
	let border1 = new Date(), border2 = new Date();

	if (button_period == 'thisweek') {
		
		border1 = getDateBySunday(border1);
		border2 = getDateByMonday(border2);

		border1 = getDateBorderByInput(59, 59, 23, border1.getDate(), border1.getMonth(), border1.getFullYear());
		border2 = getDateBorderByInput(0, 0, 0, border2.getDate(), border2.getMonth(), border2.getFullYear());
		
	} else if (button_period == '7days') {

		border2.setDate(Number((new Date()).getDate()) - 6);

		border1 = getDateBorderByInput(59, 59, 23, border1.getDate(), border1.getMonth(), border1.getFullYear());
		border2 = getDateBorderByInput(0, 0, 0, border2.getDate(), border2.getMonth(), border2.getFullYear());
		
	} else if (button_period == 'thisyear') {

		border1 = getDateBorderByInput(59, 59, 23, 31, 11, border1.getFullYear());
		border2 = getDateBorderByInput(0, 0, 0, 1, 0, border2.getFullYear());

	} else if (button_period == 'prevyear') {

		border1.setFullYear((new Date()).getFullYear() - 1);
		border2.setFullYear((new Date()).getFullYear() - 1);

		border1 = getDateBorderByInput(59, 59, 23, 31, 11, border1.getFullYear());
		border2 = getDateBorderByInput(0, 0, 0, 1, 0, border2.getFullYear());
		
	}
		
	inputs[0].value = getDateFormat(border1);
	inputs[1].value = getDateFormat(border2);
}

function getDateByMonday (date) {

	while (date.getDay() != 1)
		date.setDate(Number(date.getDate()) - 1);

	return date;
}

function getDateBySunday (date) {

	while (date.getDay() != 0)
		date.setDate(Number(date.getDate()) + 1);
	
	return date;
}

for (let button of id('date-filter-months').getElementsByTagName('input')) {
	button.onclick = function() {

		let inputs = id('date-filter-menu').getElementsByClassName('field-date');
	
		let border_year = (new Date(inputs[0].value)).getFullYear();
		let border1 = getDateBorderByInput(59, 59, 23, 0, Number(button.getAttribute('num')) + 1, border_year);
		let border2 = getDateBorderByInput(0, 0, 0, 1, button.getAttribute('num'), border_year);
		
		inputs[0].value = getDateFormat(border1);
		inputs[1].value = getDateFormat(border2);
		
	}
}

function getDateBorderByInput (seconds, minutes, hours, day, month, year) {
	let date = new Date();
	
	date.setSeconds(seconds);
	date.setMinutes(minutes);
	date.setHours(hours);
	date.setMonth(month, day);
	date.setFullYear(year);

	return date;
}

// set up clicks on history type nav buttons
const history_type_nav_buttons = id('history-type-nav').getElementsByTagName('div');

for (let button of history_type_nav_buttons) {
	button.onclick = function() {

		if (!(button.classList.contains('active-input-cont'))) {
			// change active button
			for (let button of history_type_nav_buttons)
				if (button == this) {
					button.classList.add('active-input-cont');
					id('history-type-nav').setAttribute('history-type', button.getAttribute('history-type'));
				} else if (button.classList.contains('active-input-cont'))
					button.classList.remove('active-input-cont');
	
			// upload records to history
			uploadRecordsToHistoryAnimated();
			updatePieChart();
		}
		
	}
}





// const record_window_account_root = ReactDOM.createRoot(id('make-record-account'));
const make_record_types = id('record-types').getElementsByTagName('div');

id('make-record-button').onclick = () => {

	let windowEl_cont = id('make-record-window-cont'),
		windowEl = id('make-record-window'),
		clickEl = id('make-record-button');
	
	disableScrolling();
	prepareMakeRecordWindow();

	openFloatingWindow(clickEl, windowEl_cont, windowEl, calculateScaleX(clickEl, windowEl_cont));

	windowEl_cont.firstElementChild.onclick = () => {
		enableScrolling();
		closeFloatingWindow(clickEl, windowEl_cont, windowEl);
		setTimeout(resetMakeRecordWindowData, 390);
	}
}

function prepareMakeRecordWindow () {
	let account_num = id('accounts').getAttribute('accountnum');

	// add attribute 'new' and record number attribute to make record window
	id('make-record-window').setAttribute('status', 'new');
	id('make-record-window').setAttribute('recordnum', Number(localStorage.getItem('RCount')) + 1);
	// hide some buttons: repeat and remove record
	id('make-record-button-block').classList.add('hide-some-elements');
	// upload current date
	id('make-record-date').value = getDateFormat(new Date());
	// automatic adjust length of input record amount while typing
	adaptInputLengthExplicitly(id('make-record-amount'));
	// upload account to change account button
	id('make-record-account').innerHTML = account_el(
		1, localStorage.getItem(`AColor${account_num}`),
		localStorage.getItem(`ACurrency${account_num}`),
		Number(localStorage.getItem(`ABalance${account_num}`)).toFixed(2)
	);
	id('make-record-account').setAttribute('accountnum', account_num);
	// adapt account color for dark themes
	checkAccountColor(id('make-record-account').firstElementChild);

	id('record-type-transfer').classList.add('window-nav-el-hide');
	
	// upload category to change category button
	uploadCategoryToMakeRecordCategoryField(
		'-', id('make-record-category'),
		id('make-record-category').firstElementChild,
		id('make-record-category').lastElementChild
	);
	// upload save button title
	uploadSaveRecordButtonTitle('long');
}

function uploadCategoryToMakeRecordCategoryField (type, field, field_icon, field_name) {

	let category_num, subcategory_num,
		record_num = Number(localStorage.getItem('RCount'));

	for (let num = record_num; num > 0; num--) {

		if (localStorage.getItem(`RType${num}`) == type && type == '-') {
			
			category_num = localStorage.getItem(`RCategory${num}`);
			subcategory_num = localStorage.getItem(`RSubcategory${num}`);
			field.setAttribute('categorynum', category_num);
			field.setAttribute('subcategorynum', subcategory_num);

			field_icon.innerHTML = subcategories_icons[category_num][subcategory_num];
			field_name.value = subcategories_titles[category_num][subcategory_num];

			return;

		} else if (localStorage.getItem(`RType${num}`) == type && type == '+') {

			category_num = localStorage.getItem(`RCategory${num}`);
			field.setAttribute('categorynum', category_num);

			field_icon.innerHTML = categories_income_icons[category_num];
			field_name.value = categories_income_titles[category_num];

			return;
		}
	}

	if (type == '-') {

		category_num = subcategories_icons.length - 1;
		subcategory_num = subcategories_icons[subcategories_icons.length - 1].length - 1;
		field.setAttribute('categorynum', category_num);
		field.setAttribute('subcategorynum', subcategory_num);

		field_icon.innerHTML = subcategories_icons[category_num][subcategory_num];
		field_name.value = subcategories_titles[category_num][subcategory_num];

	} else {
		
		category_num = categories_income_icons.length - 1;
		field.setAttribute('categorynum', category_num);

		field_icon.innerHTML = categories_income_icons[category_num];
		field_name.value = categories_income_titles[category_num];
	}
}

function uploadSaveRecordButtonTitle (long) {

	let lang = localStorage.getItem('L'),
		el = id('make-record-save-button');

	if (lang == 'en') {
		if (long == 'long')
			el.value = 'Save record';
		else
			el.value = 'Save';
	} else if (lang == 'de') {
		if (long == 'long')
			el.value = 'Eintrag speichern';
		else
			el.value = 'Speichern';
	} else if (lang == 'cz') {
		if (long == 'long')
			el.value = 'Uložit záznam';
		else
			el.value = 'Uložit';
	} else if (lang == 'ru') {
		if (long == 'long')
			el.value = 'Сохранить запись';
		else
			el.value = 'Сохранить';
	} else if (lang == 'ua') {
		if (long == 'long')
			el.value = 'Зберегти запис';
		else
			el.value = 'Зберегти';
	}
}

function resetMakeRecordWindowData () {

	// reset padding top of floating window
	if (id('make-record-window').classList.contains('window-top-padding'))
		id('make-record-window').classList.remove('window-top-padding');
	
	// reset type of record
	
	if (id('record-types').classList.contains('element-hide'))
		id('record-types').classList.remove('element-hide');

	id('record-types').setAttribute('record-type', id('record-type-expense').getAttribute('record-type'));
  	for (let button of make_record_types)
		if (button.id == 'record-type-expense')
			button.classList.add('active-input-cont');
		else button.classList.remove('active-input-cont');

	// reset note
	id('make-record-note').value = null;
	setTypingListenerForInput(id('make-record-note'));

	// reset amount
  	id('make-record-amount').value = null;
	setTypingListenerForInput(id('make-record-amount'));
	
	// reset category
  	id('make-record-category-cont').classList.remove('make-record-category-cont-hide');
	
	// reset hiding of buttons (repeat and remove buttons)
	if (id('make-record-button-block').classList.contains('hide-some-elements'))
		id('make-record-button-block').classList.remove('hide-some-elements');

	// id('make-record-transfer-account-cont').classList.add('make-record-transfer-account-cont-hide');
	// id('make-record-transfer-account').innerHTML = null;
}





// set up clicks on make record types buttons
for (let button of make_record_types) {
  button.onclick = function() {
    for (let button of make_record_types) {

      if (button == this) {
        button.classList.add('active-input-cont');

				id('record-types').setAttribute('record-type', button.getAttribute('record-type'));

        /* if (this.id == 'make-record-type-cont-transfer') {

          upload_transfer_account_in_makerecord();
          setTimeout(() => {
            id('make-record-transfer-account-cont').classList.remove('make-record-transfer-account-cont-hide');
            id('make-record-category-cont').classList.add('make-record-category-cont-hide');
          }, 1);

        } else { */

					changeMakeRecordCategoryType(button.id);

          /* setTimeout(() => {
            id('make-record-transfer-account-cont').classList.add('make-record-transfer-account-cont-hide');
            id('make-record-category-cont').classList.remove('make-record-category-cont-hide');
          }, 1);

        } */

      } else if (button.classList.contains('active-input-cont'))
				button.classList.remove('active-input-cont');

    }
  }
}

function changeMakeRecordCategoryType (record_type) {
	let el = id('make-record-category');

	el.style = null;
	el.classList.add('category-button-changing-hide');
	
	setTimeout(() => {
		
		if (record_type == 'record-type-expense')
			record_type = '-';
		else record_type = '+';

		uploadCategoryToMakeRecordCategoryField(record_type, el, el.firstElementChild, el.lastElementChild);
		
		el.style.transition = 'transform 0s';
		el.classList.remove('category-button-changing-hide');
		el.classList.add('category-type-changed-hide');
		
		setTimeout(() => {
			el.style = null;
			el.classList.remove('category-type-changed-hide');
		}, 50);

	}, 300);
}





id('make-record-account').onclick = function() {

	if ( Number(localStorage.getItem('ACount')) > 1 ) {
		let clickEl = id('make-record-account'),
			windowEl_cont = id('accounts-window-cont'),
			windowEl = id('accounts-window');
	
		// upload account to change account button
		windowEl.innerHTML = null;
		for (let acc_num = 1; acc_num <= localStorage.getItem('ACount'); acc_num++) uploadAccount(acc_num, windowEl);
		checkAccountsColorInExactlyCont(windowEl);
	
		let top_position = openFloatingWindow(clickEl, windowEl_cont, windowEl, calculateScaleX(clickEl, windowEl_cont));
		windowEl.setAttribute('top-position-x', top_position.x);
		windowEl.setAttribute('top-position-y', top_position.y);
	
		// set up click on accounts
		setUpChoosingAccount(clickEl, windowEl_cont, windowEl);
	
		windowEl_cont.firstElementChild.onclick = function() {
			closeFloatingWindow(clickEl, windowEl_cont, windowEl);
		}
	}
	
}

function setUpChoosingAccount (clickEl, windowEl_cont, windowEl) {

	for (let account of windowEl.getElementsByClassName('account')) {
		account.onclick = function() {

			let account_num = account.getAttribute('accountnum'),
				account_clickEl = clickEl.firstElementChild;
			clickEl.setAttribute('accountnum', account_num);

			// upload choosen accounts data to change account button
			account_clickEl.classList.add('account-block-animation');
			account_clickEl.style.background = '#' + localStorage.getItem(`AColor${account_num}`);
			account_clickEl.firstElementChild.innerText = localStorage.getItem(`ACurrency${account_num}`);
			account_clickEl.lastElementChild.innerText = getReadableNumber(localStorage.getItem(`ABalance${account_num}`));
			// adapt account color for dark themes
			checkAccountColor(clickEl.firstElementChild);

			// animate closing choosing account window
			let clickEL_transition = changeFloatingWindowTransformation(clickEl, windowEl_cont, windowEl);
			setTimeout(() => {
				clickEl.classList.remove('account-block-animation');
				clickEl.style.transition = clickEL_transition;
				closeFloatingWindow(clickEl, windowEl_cont, windowEl);
			}, 1);
			
		}
	}
}



id('make-record-category').onclick = () => {
	
	let clickEl = id('make-record-category'),
		windowEl_cont, windowEl, categories_els_arr;
	
	if (id('record-type-expense').classList.contains('active-input-cont')) {

		windowEl_cont = id('categories-expense-cont');
		windowEl = id('categories-expense');
		categories_els_arr = id('subcategories').getElementsByClassName('subcategory');

	} else if (id('record-type-income').classList.contains('active-input-cont')) {
		
		windowEl_cont = id('categories-income-cont');
		windowEl = id('categories-income');
		categories_els_arr = id('categories-income').getElementsByClassName('category');

	}

	openCategoryWindow(clickEl, windowEl_cont, windowEl);
	setUpClickOnSubcategory(clickEl, windowEl_cont, windowEl, categories_els_arr);
}

function openCategoryWindow (clickEl, windowEl_cont, windowEl) {
	
	let top_position = openFloatingWindow(clickEl, windowEl_cont, windowEl, calculateScaleX(clickEl, windowEl_cont));
	windowEl.setAttribute('top-position-x', top_position.x);
	windowEl.setAttribute('top-position-y', top_position.y);
	
	windowEl_cont.firstElementChild.onclick = () => {
		closeFloatingWindow(clickEl, windowEl_cont, windowEl);

		if (id('subcategories-cont').classList.contains('subcategories-cont-visible'))
			setTimeout(() => {
				resetCategoryWindowData(id('subcategories').getElementsByClassName('subcategory-cont'))
			}, 325);
	}
}

function resetCategoryWindowData (subcategories_els_arr) {

	id('categories-expense').classList.remove('categories-overflow');
	id('subcategories-title').innerHTML = null;
	id('subcategories-cont').classList.remove('subcategories-cont-visible');
	subcategories_els_arr[id('subcategories').getAttribute('categorynum')].classList.remove('subcategory-cont-visible');
}

function setUpOpeningSubcategoryList (categories_block, categories_els_arr, subcategories_els_arr) {
	
	for (let category of categories_els_arr) {
		category.onclick = function() {

			let category_num = this.getAttribute('categorynum');
			id('subcategories').setAttribute('categorynum', category_num);

			categories_block.classList.add('categories-overflow');
			id('subcategories-title').innerHTML = this.lastElementChild.innerHTML;
			subcategories_els_arr[category_num].classList.add('subcategory-cont-visible');
				
			id('subcategories-cont').classList.add('subcategories-cont-visible');

			id('subcategories-back-button').onclick = function() {
				closeSubcategoriesWindow(categories_block, subcategories_els_arr, category_num);
			}

		}
	}
}

function closeSubcategoriesWindow (categories_block, subcategories_els_arr, category_num) {

	categories_block.classList.remove('categories-overflow');
	id('subcategories-cont').classList.remove('subcategories-cont-visible');

	setTimeout(() => {
		id('subcategories-title').innerHTML = null;
		subcategories_els_arr[category_num].classList.remove('subcategory-cont-visible');
	}, 300);
}

function setUpClickOnSubcategory (clickEl, windowEl_cont, windowEl, categories_els_arr) {

  for (let category of categories_els_arr) {
    category.onclick = function() {
      
		clickEl.firstElementChild.innerHTML = this.firstElementChild.innerHTML;
		clickEl.lastElementChild.value = this.lastElementChild.innerHTML;

		if (windowEl.id == 'categories-expense') {
			clickEl.setAttribute('categorynum', id('subcategories').getAttribute('categorynum'));
			clickEl.setAttribute('subcategorynum', this.getAttribute('subcategorynum'));
		}
		else
			clickEl.setAttribute('categorynum', this.getAttribute('categorynum'));

		closeCategoriesWindow(clickEl, windowEl_cont, windowEl);

    }
  }
}

function closeCategoriesWindow (clickEl, windowEl_cont, windowEl) {
	
	let clickEL_transition = changeFloatingWindowTransformation(clickEl, windowEl_cont, windowEl);;
	
	setTimeout(() => {
		clickEl.style.transition = clickEL_transition;
		closeFloatingWindow(clickEl, windowEl_cont, windowEl);
	}, 1);

	if (id('subcategories-cont').classList.contains('subcategories-cont-visible'))
		setTimeout(() => {
			resetCategoryWindowData(id('subcategories').getElementsByClassName('subcategory-cont'))
		}, 325);
}





id('make-record-save-button').onclick = () => {
	if (id('make-record-amount').value != 0) {

		let record = getMakeRecordDataArray();

		updateStorageAccountBalance(record.num, record.type, record.account, record.amount);
		updateAccountInfo( record.account, 'Balance', id('accounts').getElementsByClassName('account') );

		saveRecordToStorage(record.num, record.type, record.note, record.account, record.amount, record.category, record.subcategory);
	
		if (id('make-record-window').getAttribute('status') == 'new') {
			updateHistoryForNewRecord(record.num, record.type, record.account);
			closeFloatingWindow(id('make-record-button'), id('make-record-window-cont'), id('make-record-window'));
		} else
			for (let recordEl of id('history').getElementsByClassName('record'))
				if (recordEl.getAttribute('recordnum') == record.num) {
					updateHistoryForEditedRecord(record.num, recordEl);					
					break;
				}

		// upload today stats
		uploadTodayStats();
		// upload expenses and incomes stats
		uploadExpensesIncomesStats();
		// update pie chart data
		updatePieChart();

		// reset make record window data
		setTimeout(() => {
			resetMakeRecordWindowData();
			enableScrolling();
		}, 390);

	} else animateEmptyFieldError(id('make-record-amount'));
}

function getMakeRecordDataArray () {
	return {
		num: id('make-record-window').getAttribute('recordnum'),
		type: id('record-types').getAttribute('record-type'),
		note: id('make-record-note').value,
		account: id('make-record-account').getAttribute('accountnum'),
		amount: Math.abs(id('make-record-amount').value),
		category: id('make-record-category').getAttribute('categorynum'),
		subcategory: id('make-record-category').getAttribute('subcategorynum')
	};
}

function saveRecordToStorage (record_num, record_type, record_note, record_account, record_amount, record_category, record_subcategory) {

	// save record data to storage
	localStorage.setItem(`RType${record_num}`, record_type);
	localStorage.setItem(`RAmount${record_num}`, record_amount);
	localStorage.setItem(`RAccount${record_num}`, record_account);
	localStorage.setItem(`RCategory${record_num}`, record_category);
	localStorage.setItem(`RSubcategory${record_num}`, record_subcategory);

	// save or delete record note
	if (record_note.length != 0)
		localStorage.setItem(`RNote${record_num}`, record_note);
	else if (record_note.length == 0 && localStorage.getItem(`RNote${record_num}`))
		localStorage.removeItem(`RNote${record_num}`);

	// save record date to storage
	saveRecordDateToStorage(record_num);
}

function saveRecordDateToStorage (record_num) {
	let date = new Date (id('make-record-date').value);

	localStorage.setItem(`RMinute${record_num}`, date.getMinutes());
	localStorage.setItem(`RHour${record_num}`, date.getHours());
	localStorage.setItem(`RDay${record_num}`, date.getDate());
	localStorage.setItem(`RMonth${record_num}`, (date.getMonth() + 1));
	localStorage.setItem(`RYear${record_num}`, date.getFullYear());
}

function updateStorageAccountBalance (record_num, record_type, record_account, record_amount) {
	
	let type_sign = Number(record_type + '1'),
		record_account_balance = Number(localStorage.getItem(`ABalance${record_account}`));

	if (id('make-record-window').getAttribute('status') == 'new') {
		localStorage.setItem(`ABalance${record_account}`, (record_account_balance + (record_amount * type_sign)).toFixed(2));
	} else {
		
		let account_num = localStorage.getItem(`RAccount${record_num}`),
			account_balance = Number(localStorage.getItem(`ABalance${account_num}`)),
			record_storage_amount = Number(localStorage.getItem(`RAmount${record_num}`));
		
		localStorage.setItem(`ABalance${account_num}`, (account_balance - (record_storage_amount * type_sign)).toFixed(2));

		record_account_balance = Number(localStorage.getItem(`ABalance${record_account}`));
		localStorage.setItem(`ABalance${record_account}`, (record_account_balance + (record_amount * type_sign)).toFixed(2));
		
		for (let account of id('accounts').getElementsByClassName('account'))
			if (account.getAttribute('accountnum') == account_num)
				updateAccountInfo( account_num, 'Balance', id('accounts').getElementsByClassName('account') );
		
	}
}

function updateAllAccountInfo (account_num, info) {

	updateAccountInfo( account_num, info, id('accounts').getElementsByClassName('account') );
	updateAccountInfo( account_num, info, id('settings-category-window-content').getElementsByClassName('account') );
}

function updateAccountInfo (account_num, info, accounts) {
	
	for (let account of accounts) {
		if (account.getAttribute('accountnum') == account_num) {

			if (info == 'Currency')
				account.firstElementChild.innerText = localStorage.getItem(`A${info}${account_num}`);
			else if (info == 'Balance') {

				let holding_el = freezeWidthOfEl(account.lastElementChild);
				account.lastElementChild.innerText = getReadableNumber( Number(localStorage.getItem(`A${info}${account_num}`)).toFixed(2) );
				updateWidthOfEl(account.lastElementChild, holding_el);
					

			} else if (info == 'Color')
				account.style.background = '#' + localStorage.getItem(`A${info}${account_num}`);

		}
	}
}


function updateHistoryForNewRecord (record_num, record_type, record_account) {

	// increase records count in storage
	localStorage.setItem('RCount', record_num);

	let history_type = id('history-type-nav').getAttribute('history-type');

	if (
		(
			id('history').firstElementChild &&
			getRecordDateFormat( id('history').firstElementChild.getAttribute('recordnum') ) > getRecordDateFormat(record_num)
		) ||
		(history_type != 'all' && record_type != history_type) ||
		id('accounts').getAttribute('accountnum') != record_account
	) {
		checkRecordsOrderByDate(Number(record_num));
		reuploadRecordsToHistoryAnimated();
	} else {
		record_num = checkRecordsOrderByDate(Number(record_num));

		// hide history empty message
		if (id('history-empty').classList.contains('visible'))
			id('history-empty').classList.remove('visible');

		// add record to history
		addRecordToHistory(record_num, record_account, 'afterbegin');
		animateAddingRecord(id('history').firstElementChild);
		setUpClickOnRecord(id('history').firstElementChild);
	}

}

function addRecordToHistory (record_num, record_account, place) {

	let record = constructRecordEl(record_num, record_account);
	let hr = `<hr class="small-hr">`;
	
	if (id('history').firstElementChild) {
		id('history').insertAdjacentHTML(place, hr);
	}
	id('history').insertAdjacentHTML(place, record);
}

function constructRecordEl (record_num, record_account) {

	let record_date = localStorage.getItem(`RDay${record_num}`) + '.' + ( Number(localStorage.getItem(`RMonth${record_num}`)) ),
		category_num = localStorage.getItem(`RCategory${record_num}`),
		subcategory_num = localStorage.getItem(`RSubcategory${record_num}`),
		icon, title,
		record_note = '';

	if (localStorage.getItem(`RNote${record_num}`))
		record_note = `<h4 class="record-note">${localStorage.getItem('RNote' + record_num)}</h4>`;

	if (localStorage.getItem(`RType${record_num}`) == '-') {
		icon = subcategories_icons[category_num][subcategory_num];
		title = subcategories_titles[category_num][subcategory_num];
	} else {
		icon = categories_income_icons[category_num];
		title = categories_income_titles[category_num];
	}
	
	let record = `<div class="record" recordnum="${record_num}">
                    <h4 class="date">${record_date}</h4>
					${record_note}
                    <div class="record-category" categorynum="${category_num}" subcategorynum="${subcategory_num}">
                      <div>${icon}</div>
                      <h3>${title}</h3>
                    </div>
                    <div class="record-amount">
                      <h3>${localStorage.getItem('RType' + record_num)}</h3>
                      <h3>${getReadableNumber( Number(localStorage.getItem('RAmount' + record_num)).toFixed(2) )}</h3>
                      <h3>${localStorage.getItem('ACurrency' + record_account)}</h3>
                    </div>
                  </div>`;

	return record;
}

function animateAddingRecord (record) {

	// .history has padding-block and gap set up on 15px, and small-hr has height 3px: 15 * 2 - 3 = 27
	let margin_top = 27 + record.clientHeight;

	record.style.marginTop = `-${margin_top}px`;

	setTimeout(() => {
		record.style.transition = 'margin-top .4s .4s';
		record.style.marginTop = '0px';
		
		setTimeout(() => {
			record.style.transition = null;
		}, 800);
	}, 1);
}


function updateHistoryForEditedRecord (record_num, record) {

	updateRecordInHistory(record_num, record);

	let period = id('history-period-nav').getAttribute('period');
	let compare_date = new Date();
	let make_record_note_len = id('make-record-note').value.length,
		record_note_classname = record.firstElementChild.nextElementSibling.className;

	if (period == 'week') compare_date.setDate(compare_date.getDate() - 7);
	else if (period == 'month') compare_date.setMonth(compare_date.getMonth() - 1);
	else compare_date = new Date(getRecordDateFormat(record_num));

	if (
		checkRecordsOrderByDate(Number(record_num)) != record_num ||
		getRecordDateFormat(record_num) < getDateFormat(compare_date) ||
		id('make-record-account').getAttribute('accountnum') != id('make-record-account').firstElementChild.getAttribute('accountnum') ||
		( make_record_note_len != 0 && record_note_classname != 'record-note' ||
			make_record_note_len == 0 && record_note_classname == 'record-note' )
	) {
		reconnectFloatingWindow(record, id('history'), id('make-record-window-cont'), id('make-record-window'));
		closeReconnectedFloatingWindow(id('make-record-window-cont'), id('make-record-window'));
		reuploadRecordsToHistoryAnimated();
	} else {
		changeFloatingWindowTransformation(record, id('make-record-window-cont'), id('make-record-window'));
		closeFloatingWindow(record, id('make-record-window-cont'), id('make-record-window'));
	}
}

function updateRecordInHistory (record_num, recordEl) {

	let record_date = localStorage.getItem(`RDay${record_num}`) + '.' + ( Number(localStorage.getItem(`RMonth${record_num}`)) ),
		category_num = localStorage.getItem(`RCategory${record_num}`),
		subcategory_num = localStorage.getItem(`RSubcategory${record_num}`),
		icon, title;

	if (localStorage.getItem(`RType${record_num}`) == '-') {
		icon = subcategories_icons[category_num][subcategory_num];
		title = subcategories_titles[category_num][subcategory_num];
	} else {
		icon = categories_income_icons[category_num];
		title = categories_income_titles[category_num];
	}

	// update date
	recordEl.firstElementChild.innerHTML = record_date;
	// update note
	let record_noteEl = updateRecordNoteInHistory(record_num, recordEl);
	// update category
	updateRecordCategoryInHistory(record_num, recordEl, record_noteEl, icon, title);
	// update amount
	recordEl.lastElementChild.firstElementChild.nextElementSibling.innerHTML = getReadableNumber( Number(localStorage.getItem(`RAmount${record_num}`)).toFixed(2) );
	// update currency
	recordEl.lastElementChild.lastElementChild.innerHTML = localStorage.getItem(`ACurrency${ localStorage.getItem('RAccount' + record_num) }`);
}

function updateRecordNoteInHistory (record_num, recordEl) {
	let record_noteEl = null;
		
	if (recordEl.firstElementChild.nextElementSibling.className == 'record-note')
		record_noteEl = recordEl.firstElementChild.nextElementSibling;
		
	if (record_noteEl != null) {
		record_noteEl.innerText = localStorage.getItem(`RNote${record_num}`);
	}

	return record_noteEl;
}

function updateRecordCategoryInHistory (record_num, recordEl, record_noteEl, icon, title) {
	
	let categoryEl;
	if (record_noteEl != null) categoryEl = record_noteEl.nextElementSibling;
	else categoryEl = recordEl.lastElementChild.previousElementSibling;

	categoryEl.setAttribute('categorynum', localStorage.getItem(`RCategory${record_num}`));
	categoryEl.setAttribute('subcategorynum', localStorage.getItem(`RSubcategory${record_num}`));
	categoryEl.firstElementChild.innerHTML = icon;
	categoryEl.lastElementChild.innerHTML = title;
}

function checkRecordsOrderByDate (record_num) {

		for (;
			localStorage.getItem(`RDay${record_num - 1}`) &&
			getRecordDateFormat(record_num - 1) > getRecordDateFormat(record_num);
			record_num--
		)			
			swapRecords(record_num, record_num - 1);
			
		for (;
			localStorage.getItem(`RDay${record_num + 1}`) &&
			getRecordDateFormat(record_num + 1) < getRecordDateFormat(record_num);
			record_num++
		)			
			swapRecords(record_num, record_num + 1);

	return record_num;
}

function swapRecords (a, b) {

	let type = localStorage.getItem(`RType${a}`),
		amount = localStorage.getItem(`RAmount${a}`),
		account = localStorage.getItem(`RAccount${a}`),
		category = localStorage.getItem(`RCategory${a}`),
		subcategory = localStorage.getItem(`RSubcategory${a}`),
		minutes = localStorage.getItem(`RMinute${a}`),
		hours = localStorage.getItem(`RHour${a}`),
		day = localStorage.getItem(`RDay${a}`),
		month = localStorage.getItem(`RMonth${a}`),
		year = localStorage.getItem(`RYear${a}`);

	localStorage.setItem(`RType${a}`, localStorage.getItem(`RType${b}`)),
	localStorage.setItem(`RAmount${a}`, localStorage.getItem(`RAmount${b}`)),
	localStorage.setItem(`RAccount${a}`, localStorage.getItem(`RAccount${b}`)),
	localStorage.setItem(`RCategory${a}`, localStorage.getItem(`RCategory${b}`)),
	localStorage.setItem(`RSubcategory${a}`, localStorage.getItem(`RSubcategory${b}`)),
	localStorage.setItem(`RMinute${a}`, localStorage.getItem(`RMinute${b}`)),
	localStorage.setItem(`RHour${a}`, localStorage.getItem(`RHour${b}`)),
	localStorage.setItem(`RDay${a}`, localStorage.getItem(`RDay${b}`)),
	localStorage.setItem(`RMonth${a}`, localStorage.getItem(`RMonth${b}`)),
	localStorage.setItem(`RYear${a}`, localStorage.getItem(`RYear${b}`));

	localStorage.setItem(`RType${b}`, type),
	localStorage.setItem(`RAmount${b}`, amount),
	localStorage.setItem(`RAccount${b}`, account),
	localStorage.setItem(`RCategory${b}`, category),
	localStorage.setItem(`RSubcategory${b}`, subcategory),
	localStorage.setItem(`RMinute${b}`, minutes),
	localStorage.setItem(`RHour${b}`, hours),
	localStorage.setItem(`RDay${b}`, day),
	localStorage.setItem(`RMonth${b}`, month),
	localStorage.setItem(`RYear${b}`, year);
}

function reuploadRecordsToHistoryAnimated () {

	id('history-reloading-background').classList.add('history-reloading-background-show');
		
	setTimeout(() => {
		id('history').innerHTML = null;
		uploadRecordsToHistory();
			
		setTimeout(() => {
			id('history-reloading-background').classList.remove('history-reloading-background-show');
		}, 200);
	}, 390);
}





const settings_categories = id('settings-categories').getElementsByTagName('div');
const settings_category_windows = id('root').getElementsByClassName('settings-category-window-cont');

id('settings-button-cont-mobile').onclick = function() {
	openSettings(this);
}
id('settings-button-desktop').onclick = function() {
	openSettings(this);
}

function openSettings (clickEl) {

	let windowEl_cont = id('settings-cont'),
		close_button = windowEl_cont.lastElementChild.lastElementChild;
	
	disableScrolling();

	openWindowByBubbleFrontMethod(
		clickEl, windowEl_cont, close_button,
		id('settings-categories').getElementsByTagName('div')
	);

	close_button.onclick = () => {
		enableScrolling();
		closeWindowByBubbleQueueMethod(
			clickEl, windowEl_cont, close_button,
			id('settings-categories').getElementsByTagName('div')
		);
	}
}

// set up click on settings categories
for (let category of settings_categories) {
	category.onclick = function() {
		
		// open settings category window

		let settings_transition = id('settings').style.transition;
		prepareSettingsCategoryWindow(id('settings-category-window-cont'), this.lastElementChild.getAttribute('category-name'), this);
		
		openWindowBlock(id('settings-category-window-cont'), id('settings-category-window-cont').lastElementChild);

		// set up closing settings category window
		id('settings-category-window-cont').firstElementChild.onclick = () => {
			
			id('settings').style.transition = settings_transition;
			closeSettingsCategoryWindow();

			if (id('topmargin-preview-window').classList.contains('topmargin-preview-window-visible'))
				closeTopmarginPreviewWindow();
		}

	}
}

function prepareSettingsCategoryWindow (windowEl_cont, category, clickEl) {
	let content_cont = id('settings-category-window-content');
	let button_cont = id('settings-category-window-button');

	windowEl_cont.lastElementChild.firstElementChild.firstElementChild.innerHTML = clickEl.lastElementChild.value;

	if (category == 'Reset data') uploadSettingsCategoryData_Reset(content_cont, button_cont);
	else if (category == 'Language') uploadSettingsCategoryData_Language(content_cont, button_cont);
	else if (category == 'Blurring') uploadSettingsCategoryData_Blurring(content_cont, button_cont);
	else if (category == 'Themes') uploadSettingsCategoryData_Themes(content_cont, button_cont);
	else if (category == 'Top margin') uploadSettingsCategoryData_Margin(content_cont, button_cont);
	else if (category == 'Accounts') uploadSettingsCategoryData_Accounts(content_cont, button_cont);
}

function closeSettingsCategoryWindow () {

	closeWindowBlock(id('settings-category-window-cont'), id('settings-category-window-cont').lastElementChild);

	setTimeout(() => {
		id('settings-category-window-content').innerHTML = null;
		id('settings-category-window-button').innerHTML = null;
		id('settings-category-window-button').classList.remove('button-block-hide');
	}, 300);
}




// reset data - settings category content
function uploadSettingsCategoryData_Reset (content_cont, button_cont) {
	let lang = localStorage.getItem('L');
	
	content_cont.insertAdjacentHTML('afterbegin',
		`<p class="description">
			${getDescription_ResetData(lang)}
		</p>
		<input type="button" value="" class="clickable-button" id="reset-data-button">`
	);
	button_cont.classList.add('button-block-hide');
	setUpButtonsValue_ResetData(id('reset-data-button'), lang);

	id('reset-data-button').onclick = () => {
		clearLocalStorage();
		enableScrolling();
		window.scrollTo(0, 0);
		window.location.reload();
	}
}

function getDescription_ResetData (lang) {
	
	if (lang == 'en')
		return ('Reset all data (accounts, records, settings), then application will be reloaded. <b>It is irreversible action!</b>');
	else if (lang == 'de')
		return ('Das wird alle Daten (Konten, Einträge, Einstellungen) zurücksetzen und die Web-Anwendung neu starten. <b>Dieser Vorgang kann man nicht rückgängig gemacht werden!</b>');
	else if (lang == 'cz')
		return ('Resetovat všechna data (účty, záznamy, nastavení), poté se web-aplikace restartuje. <b>Je to nevratná akce!</b>');
	else if (lang == 'ru')
		return ('Сбросить все данные (счета, записи, настройки), после чего приложение перезагрузится. <b>Это необратимое действие!</b>');
	else if (lang == 'ua')
		return ('Скинути всі дані (рахунки, записи, налаштування), після чого веб-програма буде перезавантажена. <b>Це незворотна дія!</b>');
}

function setUpButtonsValue_ResetData (button, lang) {

	if (lang == 'en') {
		button.value = 'Reset data';
	} else if (lang == 'de') {
		button.value = 'Daten löschen';
	} else if (lang == 'cz') {
		button.value = 'Resetovat data';
	} else if (lang == 'ru') {
		button.value = 'Сбросить данные';
	} else if (lang == 'ua') {
		button.value = 'Скинути дані';
	}
}

function clearLocalStorage () {

	localStorage.removeItem('L'); // language
	localStorage.removeItem('B'); // blur
	localStorage.removeItem('T'); // theme
	localStorage.removeItem('TM'); // top margin

	clearAccountsDataFromStorage(localStorage.getItem('ACount')); // accounts
	clearRecordsDataFromStorage(localStorage.getItem('RCount')); // records
}

function clearAccountsDataFromStorage (count) {
	
	for (let a = 1; a <= count; a++) {
		localStorage.removeItem(`AColor${a}`);
		localStorage.removeItem(`ACurrency${a}`);
		localStorage.removeItem(`ABalance${a}`);
	}
	
	localStorage.removeItem('ACount');
}

function clearRecordsDataFromStorage (count) {

	for (let a = 1; a <= count; a++) {
		localStorage.removeItem(`RType${a}`);
		localStorage.removeItem(`RAmount${a}`);
		localStorage.removeItem(`RAccount${a}`);
		localStorage.removeItem(`RCategory${a}`);
		localStorage.removeItem(`RSubcategory${a}`);

		localStorage.removeItem(`RMinute${a}`);
		localStorage.removeItem(`RHour${a}`);
		localStorage.removeItem(`RDay${a}`);
		localStorage.removeItem(`RMonth${a}`);
		localStorage.removeItem(`RYear${a}`);	
	}

	localStorage.removeItem('RCount');
}



// language - settings category content
function uploadSettingsCategoryData_Language (content_cont, button_cont) {
	let lang = localStorage.getItem('L');

	content_cont.insertAdjacentHTML('afterbegin',
		`<p class="description">
			${getDescription_Language(lang)}
		</p>
		<label class="radio-button-label">
			<input type="radio" name="radio-language" lang="en">
		</label>
		<label class="radio-button-label">
			<input type="radio" name="radio-language" lang="de">
		</label>
		<label class="radio-button-label">
			<input type="radio" name="radio-language" lang="cz">
		</label>
		<label class="radio-button-label">
			<input type="radio" name="radio-language" lang="ru">
		</label>
		<label class="radio-button-label">
			<input type="radio" name="radio-language" lang="ua">
		</label>`
	);
	button_cont.insertAdjacentHTML('afterbegin',
		`<hr class="big-hr">
		<input type="button" value="Save" class="clickable-button" id="save-language-button">`	
	);

	uploadChoosenLanguageToChangeLanguageWindow(content_cont);
	id('save-language-button').setAttribute('lang', lang);
	
	setUpButtonsValue_Language(id('settings-category-window-cont'), lang);
	setClickOnLanguageButtons(content_cont);

	setUpClickOnSaveLanguageButton(content_cont);
}

function uploadChoosenLanguageToChangeLanguageWindow (content_cont) {
	let lang = localStorage.getItem('L');

	for (let el of content_cont.getElementsByTagName('input'))
		if (el.getAttribute('lang') == lang)
			el.setAttribute('checked', '');
}

function setClickOnLanguageButtons (container) {

	for (let button of container.getElementsByClassName('language-button'))
		button.onclick = function() {
			id('save-language-button').setAttribute('lang', this.getAttribute('lang'));
		}
}

function getDescription_Language (lang) {
	
	if (lang == 'en')
		return ('After setting the new language, web-application will be reloaded.');
	else if (lang == 'de')
		return ('Nach der Installation einer neuen Sprache wird die Webanwendung geladen.');
	else if (lang == 'cz')
		return ('Po nastavení nového jazyka se web-aplikace restartuje.');
	else if (lang == 'ru')
		return ('После установки нового языка веб-приложение будет перезагружено.');
	else if (lang == 'ua')
		return ('Після встановлення нової мови веб-додаток буде перезавантажено.');
}

function setUpButtonsValue_Language (container, lang) {
	let els = container.getElementsByTagName('label'),
		button = id('save-language-button');

	if (lang == 'en') {
		els[0].insertAdjacentText('beforeend', 'English');
		els[1].insertAdjacentText('beforeend', 'German');
		els[2].insertAdjacentText('beforeend', 'Czech');
		els[3].insertAdjacentText('beforeend', 'Russian');
		els[4].insertAdjacentText('beforeend', 'Ukrainian');
		button.value = 'Save';
	} else if (lang == 'de') {
		els[0].insertAdjacentText('beforeend', 'Englisch');
		els[1].insertAdjacentText('beforeend', 'Deutsch');
		els[2].insertAdjacentText('beforeend', 'Tschechisch');
		els[3].insertAdjacentText('beforeend', 'Russisch');
		els[4].insertAdjacentText('beforeend', 'Ukrainisch');
		button.value = 'Speichern';
	} else if (lang == 'cz') {
		els[0].insertAdjacentText('beforeend', 'Angličtina');
		els[1].insertAdjacentText('beforeend', 'Němčina');
		els[2].insertAdjacentText('beforeend', 'Čeština');
		els[3].insertAdjacentText('beforeend', 'Ruština');
		els[4].insertAdjacentText('beforeend', 'Ukrainština');
		button.value = 'Uložit';
	} else if (lang == 'ru') {
		els[0].insertAdjacentText('beforeend', 'Английский');
		els[1].insertAdjacentText('beforeend', 'Немецкий');
		els[2].insertAdjacentText('beforeend', 'Чешский');
		els[3].insertAdjacentText('beforeend', 'Русский');
		els[4].insertAdjacentText('beforeend', 'Украинский');
		button.value = 'Сохранить';
	} else if (lang == 'ua') {
		els[0].insertAdjacentText('beforeend', 'Англійська');
		els[1].insertAdjacentText('beforeend', 'Німецька');
		els[2].insertAdjacentText('beforeend', 'Чеська');
		els[3].insertAdjacentText('beforeend', 'Російська');
		els[4].insertAdjacentText('beforeend', 'Українська');
		button.value = 'Зберегти';
	}
}

function setUpClickOnSaveLanguageButton (content_cont) {
	let save_button = id('save-language-button'),
		lang = localStorage.getItem('L'),
		choosen_lang = lang;

	save_button.onclick = function() {

		for (let el of content_cont.getElementsByTagName('input'))
			if (el.checked) choosen_lang = el.getAttribute('lang');

		if (choosen_lang != lang) {
			localStorage.setItem('L', choosen_lang);
			window.location.reload();
		} else
			closeSettingsCategoryWindow();
	}
}



// blurring - settings category content
function uploadSettingsCategoryData_Blurring (content_cont, button_cont) {
	let lang = localStorage.getItem('L');
	
	content_cont.insertAdjacentHTML('afterbegin',
		`<div class="switch-button-block">
			<p class="description">
				${getDescription_Blurring(lang)}
			</p>
			<div class="switch-cont">
				<p>${getOffWordByLanguage(lang)}</p>
				<div class="switch">
					${getSwitchInput(Number(localStorage.getItem('B')))}
					<span class="switch-slider"></span>
				</div>
				<p>${getOnWordByLanguage(lang)}</p>
			</div>
		</div>`
	);
	button_cont.classList.add('button-block-hide');
	
	let switch_button = content_cont.getElementsByClassName('switch')[0].firstElementChild;
	switch_button.onclick = function() {

		if (this.checked) localStorage.setItem('B', '1');
		else localStorage.setItem('B', '0');

		reapplyBlur(Number(localStorage.getItem('B')));
	}
}

function getSwitchInput (blur_status) {

	if (blur_status)
		return (`<input type="checkbox" checked>`);
	else return (`<input type="checkbox">`);
}

function getDescription_Blurring (lang) {
	
	if (lang == 'en')
		return ('You can turn blurring of some elements off for better performance.');
	else if (lang == 'de')
		return ('Sie können die Unschärfe einiger Elemente ausmachen, um die Leistung zu verbessern.');
	else if (lang == 'cz')
		return ('Můžete pro lepší výkon vypnout rozmazání některých elementů.');
	else if (lang == 'ru')
		return ('Вы можете отключить размытие некоторых элементов для лучшей производительности.');
	else if (lang == 'ua')
		return ('Ви можете вимкнути розмиття деяких елементів для кращої продуктивності.');
}

function getOffWordByLanguage (lang) {
	if (lang == 'en')
		return ('Off');
	else if (lang == 'de')
		return ('Aus');
	else if (lang == 'cz')
		return ('Vyp');
	else if (lang == 'ru')
		return ('Выкл');
	else if (lang == 'ua')
		return ('Вимк');
}

function getOnWordByLanguage (lang) {
	if (lang == 'en')
		return ('On');
	else if (lang == 'de')
		return ('Ein');
	else if (lang == 'cz')
		return ('Zap');
	else if (lang == 'ru')
		return ('Вкл');
	else if (lang == 'ua')
		return ('Вкл');
}



// themes - settings category content
function uploadSettingsCategoryData_Themes (content_cont, button_cont) {
	let lang = localStorage.getItem('L');
	
	content_cont.insertAdjacentHTML('afterbegin',
		`<div class="switch-button-block">
			<p class="description">
				${getDescription_AutoTheme(lang)}
			</p>
			<div class="switch-cont">
				<p>${getOffWordByLanguage(lang)}</p>
				<div class="switch">
					${getSwitchInput(Number(localStorage.getItem('AT')))}
					<span class="switch-slider"></span>
				</div>
				<p>${getOnWordByLanguage(lang)}</p>
			</div>
		</div>
		<hr class="small-hr">
		<div class="themes-cont">
			<div theme="l" class="theme-cont" style="background: #ededed;" id="theme-button-light">
				<div class="theme-account"></div>
				<div class="theme-widget"></div>
				<div class="theme-button"></div>
			</div>
			<div theme="d" class="theme-cont" style="background: #121212;" id="theme-button-dark">
				<div class="theme-account"></div>
				<div class="theme-widget"></div>
				<div class="theme-button"></div>
			</div>
			<div theme="b" class="theme-cont" style="background: #1B252F;" id="theme-button-darkblue">
				<div class="theme-account"></div>
				<div class="theme-widget"></div>
				<div class="theme-button"></div>
			</div>
		</div>`
	);
	button_cont.classList.add('button-block-hide');

	// set up click on switch checkbox
	let switch_button = content_cont.getElementsByClassName('switch')[0].firstElementChild;
	switch_button.onclick = function() {
		changeAutomaticThemeStatusInStorage(this);
		applyTheme(localStorage.getItem('T'));
		checkAccountsColorInExactlyCont(id('root'));
	}
	
	// set up click on themes
	setUpClickOnThemes(content_cont, switch_button);
}

function getDescription_AutoTheme (lang) {

	if (lang == 'en')
		return ('Auto adjust theme');
	else if (lang == 'de')
		return ('Thema automatisch anpassen');
	else if (lang == 'cz')
		return ('Automaticky prizpůsobovat motiv');
	else if (lang == 'ru')
		return ('Автоматически адаптировать тему');
	else if (lang == 'ua')
		return ('Автоматично адаптувати тему');
}

function setUpClickOnThemes (container, switch_button) {

	for ( let el of container.lastElementChild.getElementsByClassName('theme-cont') )
		el.onclick = () => {
			if (el.getAttribute('theme') != localStorage.getItem('T')) {

				if (switch_button.checked) {
					switch_button.checked = false;
					changeAutomaticThemeStatusInStorage(switch_button);
				}

				id('settings-category-window-cont').classList.add('dark');
				id('settings').style.transition = '0s background';
				updatePieChart();

				setTimeout(() => {
					changeTheme(el.getAttribute('theme'));
					setTimeout(() => {
						id('settings-category-window-cont').classList.remove('dark');
					}, 150);
				}, 300);
				
			}
		}
}

function changeAutomaticThemeStatusInStorage (switch_button) {
	if (switch_button.checked) localStorage.setItem('AT', '1');
		else localStorage.setItem('AT', '0');
}

function changeTheme (theme) {
	
	localStorage.setItem('T', theme);
	applyTheme(theme);

	checkAccountsColorInExactlyCont(id('root'));
}



// top margin - settings category content
function uploadSettingsCategoryData_Margin (content_cont, button_cont) {
	let lang = localStorage.getItem('L');
	
	content_cont.insertAdjacentHTML('afterbegin',
		`<p class="description">${getDescription_TopMargin(lang)}</p>
		<input topmargin="" type="range" class="topmargin-range interective-field" id="topmargin-range" value="0" min="0" max="25" step="1">`
	);
	button_cont.insertAdjacentHTML('afterbegin',
		`<hr class="big-hr">
		<input type="button" value="Save" class="clickable-button" id="topmargin-save-button">`	
	);
	setUpButtonsValue_TopMargin(id('topmargin-save-button'), lang);


	prepareTopmarginSettingsCategory();

	id('topmargin-save-button').onclick = () => {
		localStorage.setItem('TM', Number(id('topmargin-range').value) * 2);
		applyTopmargin();
		closeTopmarginPreviewWindow();
		closeSettingsCategoryWindow();
	}

	openTopmarginPreviewWindow();
}

function prepareTopmarginSettingsCategory () {

	id('topmargin-preview-window').innerHTML =
		account_el(
			1,
			localStorage.getItem('AColor1'),
			localStorage.getItem('ACurrency1'),
			Number(localStorage.getItem('ABalance1')).toFixed(2)
		);
	checkAccountColor(id('topmargin-preview-window').firstElementChild);

	setUpListenerOnTopmarginRange();
	
	id('topmargin-range').setAttribute('value', Number(localStorage.getItem('TM')) / 2);
	id('topmargin-preview-window').firstElementChild.style.transition = 'transform .2s';
	id('topmargin-preview-window').firstElementChild.style.transform = `translateY(${Number(localStorage.getItem('TM'))}px)`;
}

function openTopmarginPreviewWindow () {

  id('topmargin-preview-window').classList.add('topmargin-preview-window-visible');

  setTimeout(() => {
    id('topmargin-preview-window').classList.add('topmargin-preview-window-transform');
  }, 300);
}

function closeTopmarginPreviewWindow () {
  id('topmargin-preview-window').classList.remove('topmargin-preview-window-visible');
  id('topmargin-preview-window').classList.remove('topmargin-preview-window-transform');
}

function setUpListenerOnTopmarginRange () {
  id('topmargin-range').addEventListener('input', readTopmarginRange);
  readTopmarginRange.call(id('topmargin-range'));
}
function readTopmarginRange () {
  id('topmargin-preview-window').firstElementChild.style.transform = `translateY(${Number(id('topmargin-range').value) * 2}px)`;
}

function getDescription_TopMargin (lang) {

	if (lang == 'en')
		return ('Set the top margin for easy viewing of the interface on the screen with notch.');
	else if (lang == 'de')
		return ('Setzen Sie den oberen Abstand, um eine bequeme Ansicht der Benutzeroberfläche auf einem Bildschirm mit Aussparung zu gewährleisten.');
	else if (lang == 'cz')
		return ('Nastavte horní okraj pro snadné prohlížení rozhraní na zářezové obrazovce.');
	else if (lang == 'ru')
		return ('Установите верхний отступ для удобного просмотра интерфейса на экране с вырезом.');
	else if (lang == 'ua')
		return ('Встановіть верхній відступ для зручного перегляду інтерфейсу на екрані з вирізом.');
}

function setUpButtonsValue_TopMargin (button, lang) {

	if (lang == 'en') {
		button.value = 'Save';
	} else if (lang == 'de') {
		button.value = 'Speichern';
	} else if (lang == 'cz') {
		button.value = 'Uložit';
	} else if (lang == 'ru') {
		button.value = 'Сохранить';
	} else if (lang == 'ua') {
		button.value = 'Зберегти';
	}
}



// accounts - settings category content
function uploadSettingsCategoryData_Accounts (content_cont, button_cont) {

	button_cont.insertAdjacentHTML('afterbegin',
		`<hr class="big-hr">
		<input type="button" value="Add account" class="clickable-button" id="add-account">`	
	);
	setUpButtonsValue_Accounts(id('add-account'), localStorage.getItem('L'));

	uploadAccountsToSettingsWindow(content_cont);

	for (let account of content_cont.getElementsByClassName('account'))
		setUpClickOnAccount(account);

	setUpClickOnAddAccountButton(content_cont);
}

function uploadAccountsToSettingsWindow (windowEl_cont) {

	for (let account_num = 1; account_num <= localStorage.getItem('ACount'); account_num++) {

  		windowEl_cont.insertAdjacentHTML('beforeend',
			account_el(
				account_num,
				localStorage.getItem('AColor' + account_num),
				localStorage.getItem('ACurrency' + account_num),
				Number( Number(localStorage.getItem('ABalance' + account_num)) ).toFixed(2)
			)
		);
		checkAccountColor(windowEl_cont.lastElementChild);
	}
}

function setUpClickOnAccount (account) {
	account.onclick = function() {

		let clickEl = this,
			windowEl_cont = id('edit-account-cont'),
			windowEl = id('edit-account');
		var hide_popup_notification;
		
		enableScrolling();

		// upload account's data to edit account window
		prepareEditAccountWindow(clickEl.getAttribute('accountnum'));
		// open edit account window
		let top_position = openFloatingWindow(clickEl, windowEl_cont, windowEl, calculateScaleX(clickEl, windowEl_cont));
		windowEl.setAttribute('top-position-x', top_position.x);
		windowEl.setAttribute('top-position-y', top_position.y);

		// set up closing edit account window
		id('edit-account-cont').firstElementChild.onclick = () => {
			let notification_cont = id('popup-connected-notification-cont');
			
			// hide remove notification if needed
			if (notification_cont.classList.contains('show'))
				hidePopUpConnectedNotification(notification_cont, hide_popup_notification);

			disableScrolling();
			closeFloatingWindow(clickEl, windowEl_cont, windowEl);
			resetEditAccountWindow();
		}

		// set up click on remove account button
		hide_popup_notification = setUpClickOnRemoveAccountButton(hide_popup_notification, clickEl, windowEl_cont, windowEl);

		// set up click on save account button
		setUpClickOnSaveAccountButton(hide_popup_notification, clickEl, windowEl_cont, windowEl);
	}
}

function prepareEditAccountWindow (account_num) {

	if (id('settings-category-window-cont').getElementsByClassName('account').length == 1) {
		id('edit-account').classList.add('top-padding');
		id('edit-account').firstElementChild.classList.add('element-hide');
	}

	// upload color
	id('edit-account-color-button').style.background = '#' + localStorage.getItem(`AColor${account_num}`);
	id('edit-account-color-button').setAttribute('color', localStorage.getItem(`AColor${account_num}`));

	// check color if dark theme is on
	checkColorOfEditAccountColorButton();

	// upload currency
	id('edit-account-currency').value = localStorage.getItem(`ACurrency${account_num}`);
	adaptInputLengthExplicitly(id('edit-account-currency'));
	
	// upload balance
	id('edit-account-balance').value = localStorage.getItem(`ABalance${account_num}`);
	adaptInputLengthExplicitly(id('edit-account-balance'));
}

function checkColorOfEditAccountColorButton () {

	if (
		(localStorage.getItem('T') == 'b' || localStorage.getItem('T') == 'd') &&
		id('edit-account-color-button').style.background == 'rgb(5, 5, 5)'
	)
		id('edit-account-color-button').classList.add('invert-color');
	else
		id('edit-account-color-button').classList.remove('invert-color');
}

function setUpClickOnRemoveAccountButton (hide_popup_notification, clickEl, windowEl_cont, windowEl) {
	id('remove-account').onclick = () => {
		let notification_cont = id('popup-connected-notification-cont');

		if (notification_cont.classList.contains('show')) {
			// hide remove account notification
			hidePopUpConnectedNotification(notification_cont, hide_popup_notification);
			// remove account
			removeAccount(clickEl.getAttribute('accountnum'), clickEl, windowEl_cont, windowEl);
			// reset edit account window data
			resetEditAccountWindow();
		} else
			// show remove account notification
			hide_popup_notification = showPopUpConnectedNotification('remove account', notification_cont, windowEl);

	}

	return hide_popup_notification;
}

function setUpClickOnSaveAccountButton (hide_popup_notification, clickEl, windowEl_cont, windowEl) {
	id('save-account').onclick = () => {
		let notification_cont = id('popup-connected-notification-cont');

		// hide remove notification if needed
		if (notification_cont.classList.contains('show'))
			hidePopUpConnectedNotification(notification_cont, hide_popup_notification);
		// save account data
		saveEditedAccount(clickEl.getAttribute('accountnum'), clickEl, windowEl_cont, windowEl);
		// reset edit account window data
		resetEditAccountWindow();
	}
}

function resetEditAccountWindow () {

	if (id('edit-account').classList.contains('top-padding')) {
		setTimeout(() => {
			id('edit-account').classList.remove('top-padding');
			id('edit-account').firstElementChild.classList.remove('element-hide');
		}, 400);
	}
}

function setUpClickOnAddAccountButton (content_cont) {

	id('add-account').onclick = () => {

		addAccount();

		let account_count = localStorage.getItem('ACount');
		uploadAccount(account_count, id('accounts'));
		setUpClickOnAccounts();

		content_cont.insertAdjacentHTML(
			'beforeend',
			account_el(
				account_count,
				localStorage.getItem(`AColor${account_count}`),
				localStorage.getItem(`ACurrency${account_count}`),
				Number( localStorage.getItem(`ABalance${account_count}`) ).toFixed(2)
			)
		);
		checkAccountColor(content_cont.lastElementChild);

		setUpClickOnAccount(content_cont.lastElementChild);

		animateAddingAccount(
			id('settings-category-window-cont').lastElementChild,
			content_cont.lastElementChild,
			id('settings-category-window-cont').lastElementChild.lastElementChild
		);

	}
}

function animateAddingAccount (container, account, button_block) {
	let gap = account.getBoundingClientRect().top - account.previousElementSibling.getBoundingClientRect().top;
	
	container.style.transition = 'transform 0s';
	container.style.transform = `translateY(calc(${gap}px + 1vh))`;
	
	account.style.transition = 'transform 0s';
	account.style.transform = `translateY(${gap}px) scale(0)`;
	
	button_block.style.transition = 'transform 0s';
	button_block.style.transform = `translateY(-${gap}px)`;
	
	setTimeout(() => {
		container.style.transition = 'transform .3s';
		container.style.transform = `translateY(1vh)`;
		
		account.style.transition = 'transform .3s';
		account.style.transform = `translateY(0px) scale(1)`;
		
		button_block.style.transition = 'transform .3s';
		button_block.style.transform = `translateY(0px)`;
		
		setTimeout(() => {
			container.style = null;
			account.style.transition = null;
			button_block.style = null;
		}, 300);
	}, 1);
}

function removeAccount (account_num, clickEl, windowEl_cont, windowEl) {

	// remove all storage records connected with this account
	removeStorageRecordsOfAccount(account_num);
	changeAccountNumInStorageRecords(account_num);
	uploadRecordsToHistory();
		
	// get this accounts
	let account;
	for (let potential_account of id('settings-category-window-cont').getElementsByClassName('account'))
		if (potential_account.getAttribute('accountnum') == account_num) account = potential_account;
	
	let clickEL_transition = changeFloatingWindowTransformation(clickEl, windowEl_cont, windowEl);
	
	setTimeout(() => {

		// close edit account window
		clickEl.classList.remove('account-block-animation');
		clickEl.style.transition = clickEL_transition;
		closeFloatingWindow(clickEl, windowEl_cont, windowEl);
		
		// remove account
		setTimeout(() => {
			animateRemovingAccount(
				id('settings-category-window-cont').lastElementChild,
				account, account_num,
				id('settings-category-window-cont').lastElementChild.lastElementChild
			);
			removeAccountFromStorage(account_num);
			
			id('accounts').innerHTML = null;
			for (let a = 1; a <= Number(localStorage.getItem('ACount')); a++) uploadAccount(a, id('accounts'));
			setUpClickOnAccounts();
			checkAccountsColorInExactlyCont(id('accounts'));

			
			// upload today stats
			uploadTodayStats();
			// upload expenses and incomes stats
			uploadExpensesIncomesStats();
			uploadDataToPieChart();
		}, 390);

	}, 1);
}

function removeStorageRecordsOfAccount (account_num) {

	for (let a = 1; a <= Number(localStorage.getItem('RCount')); a++) {
		if (localStorage.getItem(`RAccount${a}`) == account_num) {

			for (let b = a; b <= Number(localStorage.getItem('RCount')); b++)
				if ( b < Number(localStorage.getItem('RCount')) ) moveRecord(b + 1, b);
				else if ( b == Number(localStorage.getItem('RCount')) ) removeStorageRecord(b);

			a--;

		}
	}
}

function removeStorageRecord (record_num) {

	localStorage.removeItem(`RType${record_num}`);
	localStorage.removeItem(`RAmount${record_num}`);
	localStorage.removeItem(`RAccount${record_num}`);
	localStorage.removeItem(`RCategory${record_num}`);
	localStorage.removeItem(`RSubcategory${record_num}`);

	localStorage.removeItem(`RMinute${record_num}`);
	localStorage.removeItem(`RHour${record_num}`);
	localStorage.removeItem(`RDay${record_num}`);
	localStorage.removeItem(`RMonth${record_num}`);
	localStorage.removeItem(`RYear${record_num}`);

	localStorage.setItem('RCount', Number(localStorage.getItem('RCount')) - 1);
}

function moveRecord (from, to) {

	localStorage.setItem(`RType${to}`, localStorage.getItem(`RType${from}`));
	localStorage.setItem(`RAmount${to}`, localStorage.getItem(`RAmount${from}`));
	localStorage.setItem(`RAccount${to}`, localStorage.getItem(`RAccount${from}`));
	localStorage.setItem(`RCategory${to}`, localStorage.getItem(`RCategory${from}`));
	localStorage.setItem(`RSubcategory${to}`, localStorage.getItem(`RSubcategory${from}`));

	localStorage.setItem(`RMinute${to}`, localStorage.getItem(`RMinute${from}`));
	localStorage.setItem(`RHour${to}`, localStorage.getItem(`RHour${from}`));
	localStorage.setItem(`RDay${to}`, localStorage.getItem(`RDay${from}`));
	localStorage.setItem(`RMonth${to}`, localStorage.getItem(`RMonth${from}`));
	localStorage.setItem(`RYear${to}`, localStorage.getItem(`RYear${from}`));
}

function changeAccountNumInStorageRecords (account_num) {
// change account's number in storage records to (account_num - 1) from account_num

	for (let a = 1; a <= localStorage.getItem('RCount'); a++)
		if (localStorage.getItem(`RAccount${a}`) > account_num)
			localStorage.setItem(`RAccount${a}`, Number(localStorage.getItem(`RAccount${a}`)) - 1);
}

function animateRemovingAccount (container, account, account_num, button_block) {
	let gap;

	if (account.previousElementSibling)
		gap = account.getBoundingClientRect().top - account.previousElementSibling.getBoundingClientRect().top;
	else gap =  account.nextElementSibling.getBoundingClientRect().top - account.getBoundingClientRect().top;

	container.style.transition = 'transform .3s';
	container.style.transform = `translateY(calc(${gap}px + 1vh))`;
	
	account.style.transition = 'transform .3s';
	account.style.transform = `scale(0)`;
	
	let accounts = container.getElementsByClassName('account');
	for (let a = Number(account_num); a < accounts.length; a++) {
		accounts[a].style.transition = 'transform .3s';
		accounts[a].style.transform = `translateY(${-(gap)}px)`;
	}
	
	button_block.style.transition = 'transform .3s';
	button_block.style.transform = `translateY(-${gap}px)`;

	setTimeout(() => {
		container.style.transition = 'transform 0s';
		container.style.transform = `translateY(1vh)`;
		
		button_block.style.transition = 'transform 0s';
		button_block.style.transform = `translateY(0px)`;

		for (let a = Number(account_num); a < accounts.length; a++) {
			accounts[a].style.transition = 'transform 0s';
			accounts[a].style.transform = `translateY(0px)`;
		}
		
		account.remove();
		
		// update accounts numbers attributes on accounts in settings
		updateAccountsNumbers();
	}, 300);
	
	
	// account.style.transition = 'transform .4s';
	// account.style.transform = 'scale(0)';
	// account.style.marginBottom = `-${accounts_gap}px`;
	
	// setTimeout(() => {
	// 	account.remove();
	// }, 402);
}

function removeAccountFromStorage (account_num) {
	
	for (let a = Number(account_num); a <= localStorage.getItem('ACount'); a++) {
		if ( a < Number(localStorage.getItem('ACount')) ) moveAccount(a + 1, a);
		else if ( a == Number(localStorage.getItem('ACount')) ) {
			localStorage.removeItem(`AColor${a}`);
			localStorage.removeItem(`ACurrency${a}`);
			localStorage.removeItem(`ABalance${a}`);
			localStorage.setItem('ACount', Number(localStorage.getItem('ACount')) - 1);
		}
	}
}

function moveAccount (from, to) {
	
	localStorage.setItem(`AColor${to}`, localStorage.getItem(`AColor${from}`));
	localStorage.setItem(`ACurrency${to}`, localStorage.getItem(`ACurrency${from}`));
	localStorage.setItem(`ABalance${to}`, localStorage.getItem(`ABalance${from}`));
}

function updateAccountsNumbers () {
	let accounts = id('settings-category-window-cont').getElementsByClassName('account');

	for (let a = 1; a <= accounts.length; a++) accounts[a - 1].setAttribute('accountnum', a);
}

id('edit-account-color-button').onclick = function() {

	let clickEl = this,
		windowEl_cont = id('edit-account-color-cont'),
		windowEl = id('edit-account-color');

	// check color if dark theme is on
	if (localStorage.getItem('T') == 'b' || localStorage.getItem('T') == 'd')
		id('edit-account-color-choose').lastElementChild.classList.add('invert-color');

	// set up click on accounts
	setUpChoosingAccountColor(clickEl, windowEl_cont, windowEl);

	openFloatingWindow(clickEl, windowEl_cont, windowEl, calculateScaleX(clickEl, windowEl_cont));

	windowEl_cont.firstElementChild.onclick = function() {
		closeFloatingWindow(clickEl, windowEl_cont, windowEl);
	}
	
}

function setUpChoosingAccountColor (clickEl, windowEl_cont, windowEl) {

	for (let button of windowEl.getElementsByClassName('color'))
		button.onclick = function() {

			let color = button.getAttribute('color');
			clickEl.setAttribute('color', color);
			clickEl.style.background = '#' + color;

			// check color if dark theme is on
			checkColorOfEditAccountColorButton();
			
			closeFloatingWindow(clickEl, windowEl_cont, windowEl);
			
		}
}

function saveEditedAccount (account_num, clickEl, windowEl_cont, windowEl) {

	let previous_currency = localStorage.getItem(`ACurrency${account_num}`);
	
	localStorage.setItem(`AColor${account_num}`, id('edit-account-color-button').getAttribute('color'));
	localStorage.setItem(`ACurrency${account_num}`, id('edit-account-currency').value);
	localStorage.setItem(`ABalance${account_num}`, Number(id('edit-account-balance').value).toFixed(2));

	// update account currency and balance everywhere
	clickEl.classList.add('account-block-animation');	
	updateAllAccountInfo(account_num, 'Color');
	updateAllAccountInfo(account_num, 'Balance');
	updateAllAccountInfo(account_num, 'Currency');

	checkAccountColorExlicitlyEverywhere(Number(account_num));

	// update data of all widgets because of new account currency
	if (
		previous_currency != id('edit-account-currency').value &&
		id('accounts').getAttribute('accountnum') == account_num
	) {
		// upload today stats
		uploadTodayStats();
		// upload expenses and incomes stats
		uploadExpensesIncomesStats();
		uploadRecordsToHistory();
		uploadDataToPieChart();
	}

	// close edit account window

	let clickEL_transition = changeFloatingWindowTransformation(clickEl, windowEl_cont, windowEl);
	
	setTimeout(() => {
		clickEl.classList.remove('account-block-animation');
		clickEl.style.transition = clickEL_transition;
		closeFloatingWindow(clickEl, windowEl_cont, windowEl);
	}, 1);
}

function checkAccountColorExlicitlyEverywhere (account_num) {
	let account;

	account = id('settings-category-window-cont').getElementsByClassName('account')[account_num - 1];
	checkAccountColor(account);
	
	account = id('accounts').getElementsByClassName('account')[account_num - 1];
	checkAccountColor(account);
}

function setUpButtonsValue_Accounts (button, lang) {

	if (lang == 'en')
		button.value = 'Add account';
	else if (lang == 'de')
		button.value = 'Konto hinzufügen';
	else if (lang == 'cz')
		button.value = 'Přidat účet';
	else if (lang == 'ru')
		button.value = 'Добавить счёт';
	else if (lang == 'ua')
		button.value = 'Додати рахунок';
}






function disableScrolling () {
	var x = window.scrollX;
	var y = window.scrollY;
	window.onscroll = function() {
		window.scrollTo(x, y);
	};
}
function enableScrolling () {
	window.onscroll = function(){};
}



function animateEmptyFieldError (el) {
	el.classList.add('empty-field-transform1');

  setTimeout(() => {
    el.classList.add('empty-field-transform2');

    setTimeout(() => {
      el.classList.remove('empty-field-transform1');
      el.classList.remove('empty-field-transform2');
    }, 120);
  }, 120);
}


// change width of all active inputs while typing

setTypingListenerForAllInputs(id('root').getElementsByClassName('active-input'));
function setTypingListenerForAllInputs (inputs_arr) {

	for (let input of inputs_arr) setTypingListenerForInput(input);
}

function setTypingListenerForInput (input) {
	input.addEventListener('input', adaptInputLength);
	adaptInputLength.call(input);
}

function adaptInputLength () {
	let less_length, bigger_length;
	let lang = localStorage.getItem('L');

	if (lang == 'en' || lang == 'de' || lang == 'cz') {
		less_length = 3.5;
		bigger_length = 1.1;
	} else if (lang == 'ru' || lang == 'ua') {
		less_length = 4;
		bigger_length = 1.1;
	}
	
	if (this.value.length == 0 && this.placeholder.length < 4)
		this.style.width = less_length + 'ch';
	else if (this.value.length == 0 && this.placeholder.length >= 4)
		this.style.width = this.placeholder.length * bigger_length + 'ch';
	else if (this.value.length < 4)
		this.style.width = less_length + 'ch';
	else if (this.value.length >= 4)
		this.style.width = this.value.length * bigger_length + 'ch';
}

// change width of input by its characters count
function adaptInputLengthExplicitly (el) {
	let less_length, bigger_length;
	let lang = localStorage.getItem('L');

	if (lang == 'en' || lang == 'de' || lang == 'cz') {
		less_length = 3.5;
		bigger_length = 1.1;
	} else if (lang == 'ru' || lang == 'ua') {
		less_length = 4;
		bigger_length = 1.25;
	}
	
	if (el.value.length == 0 && el.placeholder.length < 4)
		el.style.width = less_length + 'ch';
	else if (el.value.length == 0 && el.placeholder.length >= 4)
		el.style.width = el.placeholder.length * bigger_length + 'ch';
	else if (el.value.length < 4)
		el.style.width = less_length + 'ch';
	else if (el.value.length >= 4)
		el.style.width = el.value.length * bigger_length + 'ch';
}



if (localStorage.getItem('L')) {
	startPreloaderAnimation();
}